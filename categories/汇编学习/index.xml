<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>汇编学习 on blog of chuj</title><link>https://chujdk.github.io/categories/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0.html</link><description>Recent content in 汇编学习 on blog of chuj</description><generator>Hugo</generator><language>zh-cn</language><managingEditor>chujj31@gmail.com (chuj)</managingEditor><webMaster>chujj31@gmail.com (chuj)</webMaster><copyright>© chuj</copyright><lastBuildDate>Thu, 22 Oct 2020 13:38:00 +0000</lastBuildDate><atom:link href="https://chujdk.github.io/categories/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml"/><item><title>10.22汇编</title><link>https://chujdk.github.io/asm-learn/10-22%E6%B1%87%E7%BC%96.html</link><pubDate>Thu, 22 Oct 2020 13:38:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-22%E6%B1%87%E7%BC%96.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p>今天看完了int指令和端口，由于这些知识和32位的有一定区别，所以知识点就不列了，我也只是粗略的看了一下，做了一下实验而已&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:paragraph -->
&lt;p>实验13&lt;/p></description></item><item><title>10.21汇编</title><link>https://chujdk.github.io/asm-learn/10-21%E6%B1%87%E7%BC%96.html</link><pubDate>Wed, 21 Oct 2020 22:48:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-21%E6%B1%87%E7%BC%96.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p>&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:audio {"id":171} -->
&lt;figure class="wp-block-audio">&lt;audio controls src="https://chujdk.github.io/usr/uploads/2020/10/14-In-These-Arms.m4a">&lt;/audio>&lt;figcaption>&lt;span class="has-inline-color has-luminous-vivid-amber-color">&lt;em>&lt;a href="https://music.163.com/#/song?id=27006596&amp;market=baiduqk">In These Arms&lt;/a>&lt;/em>&lt;/span>&lt;/figcaption>&lt;/figure>
&lt;!-- /wp:audio -->
&lt;!-- wp:paragraph -->
&lt;p>今天看了两章，下午由于一些事耽搁了，本来其实还可以看更多，但总体还是满意的&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:paragraph -->
&lt;p>第十一章是讲标志寄存器，说实话这个感觉主要靠记，而我还真记不下来&lt;/p></description></item><item><title>10.20汇编</title><link>https://chujdk.github.io/asm-learn/10-20%E6%B1%87%E7%BC%96.html</link><pubDate>Tue, 20 Oct 2020 22:08:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-20%E6%B1%87%E7%BC%96.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p>实验7之后实验的代码量大幅提高，所以每章花费的时间也大幅提高了。上午只看完了第十章，会用函数了。晚上争取完成课程设计。&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:heading {"level":3} -->
&lt;h3>CALL和RET&lt;/h3>
&lt;!-- /wp:heading -->
&lt;!-- wp:paragraph -->
&lt;p>call可以将IP或IP和CS压入栈中，并跳转至标号,ret可以通过退栈获得的值对IP修改，retf可以通过两次退栈来对CS,IP都修改，实现段间转移。两者配合使用则可实现函数。&lt;/p></description></item><item><title>王爽《汇编语言》(第四版) 实验7</title><link>https://chujdk.github.io/asm-learn/%E7%8E%8B%E7%88%BD-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E7%AC%AC%E5%9B%9B%E7%89%88-%E5%AE%9E%E9%AA%8C7.html</link><pubDate>Mon, 19 Oct 2020 17:38:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/%E7%8E%8B%E7%88%BD-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E7%AC%AC%E5%9B%9B%E7%89%88-%E5%AE%9E%E9%AA%8C7.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p>这个实验确实是比较繁琐，而且我先是手写的代码，有很多考虑错误的地方，最后花了2个多小时才解决掉。&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:code -->
&lt;pre class="wp-block-code">&lt;code>;迄今为止最麻烦的程序
assume cs:code,es:table,ss:stack

data segment
 db '1975','1976','1977','1978','1979','1980','1981','1982','1983'
 db '1984','1985','1986','1987','1988','1989','1990','1991','1992'
 db '1993','1994','1995'

 dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514
 dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000

 dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226
 dw 11542,14430,15257,17800
data ends

table segment
 db 21 dup ('year summ ne ?? ')
table ends

stack segment
 dw 8 dup(0)
stack ends

code segment
 start:
 mov ax,data
 mov ds,ax
 mov ax,table
 mov es,ax
 mov ax,stack
 mov ss,ax
 mov sp,10h

 mov cx,21
 mov bx,0
 mov di,0
 mov si,0
 s:
 push cx
 mov si,0
 mov cx,2
 s1:
 mov ax,[bx][si]
 mov es:[si],ax
 mov ax,54h[bx][si]
 mov es:5[si],ax
 add si,2
 loop s1

 mov ax,ds:0a8h[di]
 mov es:[0ah],ax
 mov ax,[54h+bx]
 mov dx,[56h+bx]
 div word ptr es:[0ah]
 mov es:[0dh],ax

 add di,2
 add bx,4
 ;es++
 mov ax,es
 add ax,1
 mov es,ax

 pop cx
 loop s

 mov ax,4c00h
 int 21h
code ends

end start&lt;/code>&lt;/pre>
&lt;!-- /wp:code -->
&lt;!-- wp:paragraph -->
&lt;p>这段程序的循环只有两个，而且事实上嵌套的循环也可以写开来，相对而言这个写的还可以，寄存器也十分宽裕，完全没有用到bp，通过栈又可以很容易地不使用di。我个人对这一段非常满意。&lt;/p></description></item><item><title>10.18汇编</title><link>https://chujdk.github.io/asm-learn/10-18%E6%B1%87%E7%BC%96.html</link><pubDate>Sun, 18 Oct 2020 19:02:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-18%E6%B1%87%E7%BC%96.html</guid><description>&lt;!-- wp:audio {"id":178,"align":"center"} -->
&lt;figure class="wp-block-audio aligncenter">&lt;audio controls src="https://chujdk.github.io/usr/uploads/2020/10/02-Sweet-Child-O-Mine.m4a">&lt;/audio>&lt;figcaption>&lt;span class="has-inline-color has-luminous-vivid-amber-color">&lt;em>&lt;a href="https://music.163.com/#/song?id=18095043&amp;market=baiduqk">Sweet Child O' Mine&lt;/a>&lt;/em>&lt;/span>&lt;/figcaption>&lt;/figure>
&lt;!-- /wp:audio -->
&lt;!-- wp:heading {"level":4} -->
&lt;h4>&lt;span class="has-inline-color has-luminous-vivid-amber-color">写在笔记之前&lt;/span>&lt;/h4>
&lt;!-- /wp:heading -->
&lt;!-- wp:paragraph -->
&lt;p>今天一个上午都在做第5个实验，一方面是上午的时间比较少，另一方面也是这个实验的代码量增大。现在来看，我的汇编能力已经有了一点，王爽这本书写的确实是很好，相信能为我的二进制研究打下基础。希望今天能再看完一章。&lt;/p></description></item><item><title>王爽汇编语言第四版第六章实验源码</title><link>https://chujdk.github.io/asm-learn/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%AE%9E%E9%AA%8C%E6%BA%90%E7%A0%81.html</link><pubDate>Sun, 18 Oct 2020 11:58:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%AE%9E%E9%AA%8C%E6%BA%90%E7%A0%81.html</guid><description>&lt;!-- wp:code -->
&lt;pre class="wp-block-code">&lt;code>assume cs:code,ds:data,ss:stack

data segment
 dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h
data ends

stack segment
 dw 0,0,0,0,0,0,0,0
stack ends

code segment
 start:
 mov ax,stack
 mov ss,ax
 mov sp,16
 mov ax,data
 mov ds,ax

 push ds:[0]
 push ds:[2]
 pop ds:[2]
 pop ds:[0]

 mov ax,4c00h
 int 21h
code ends

end start&lt;/code>&lt;/pre>
&lt;!-- /wp:code -->
&lt;!-- wp:separator -->
&lt;hr class="wp-block-separator"/>
&lt;!-- /wp:separator -->
&lt;!-- wp:code -->
&lt;pre class="wp-block-code">&lt;code>assume cs:code,ds:data,ss:stack

data segment
 dw 0123h,0456h,0123h,0456h,0123h,0456h,0123h,0456h,0123h,0456h,0123h,0456h,0123h,0456h,0123h,0456h

stack segment
 dw 0,0
stack ends

code segment
 start:
 mov ax,stack
 mov ss,ax
 mov sp,16
 mov ax,data
 mov ds,ax

 push ds:[0]
 push ds:[2]
 pop ds:[2]
 pop ds:[0]

 mov ax,4c00h
 int 21h
code ends

end start&lt;/code>&lt;/pre>
&lt;!-- /wp:code -->
&lt;!-- wp:separator -->
&lt;hr class="wp-block-separator"/>
&lt;!-- /wp:separator -->
&lt;!-- wp:code -->
&lt;pre class="wp-block-code">&lt;code>assume cs:code,ds:data,ss:stack

code segment
 start:
 mov ax,stack
 mov ss,ax
 mov sp,16
 mov ax,data
 mov ds,ax

 push ds:[0]
 push ds:[2]
 pop ds:[2]
 pop ds:[0]

 mov ax,4c00h
 int 21h
code ends

data segment
 dw 0123h,0456h
stack segment
 dw 0,0
stack ends

end start&lt;/code>&lt;/pre>
&lt;!-- /wp:code -->
&lt;!-- wp:separator -->
&lt;hr class="wp-block-separator"/>
&lt;!-- /wp:separator -->
&lt;!-- wp:code -->
&lt;pre class="wp-block-code">&lt;code>assume cs:code

a segment
 db 1,2,3,4,5,6,7,8
a ends

b segment
 db 1,2,3,4,5,6,7,8
b ends

c segment
 db 0,0,0,0,0,0,0,0
c ends

code segment
 start:
 mov ax,cs
 sub ax,1
 mov ss,ax
 sub ax,1
 mov ds,ax
 sub ax,1
 mov es,ax

 mov cx,8
 mov bx,0
 s:mov ax,ds:[bx]
 add ax,es:[bx]
 mov ss:[bx],ax
 inc bx
 loop s

 mov ax,4c00h
 int 21h
code ends

end start&lt;/code>&lt;/pre>
&lt;!-- /wp:code -->
&lt;!-- wp:separator -->
&lt;hr class="wp-block-separator"/>
&lt;!-- /wp:separator -->
&lt;!-- wp:code -->
&lt;pre class="wp-block-code">&lt;code>assume cs:code

a segment
 dw 1,2,3,4,5,6,7,8,9,0ah,0bh,0ch,0dh,0eh,0fh,0ffh
a ends

b segment
 dw 0,0,0,0,0,0,0,0
b ends

code segment
 start:
 mov ax,cs
 sub ax,1
 mov ss,ax
 mov sp,10h
 sub ax,2
 mov ds,ax
 mov cx,8
 mov bx,0
 s:push [bx]
 add bx,2
 loop s

 mov ax,4c00h
 int 21h
code ends

end start&lt;/code>&lt;/pre>
&lt;!-- /wp:code --></description></item><item><title>10.17汇编</title><link>https://chujdk.github.io/asm-learn/10-17%E6%B1%87%E7%BC%96.html</link><pubDate>Sat, 17 Oct 2020 22:26:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-17%E6%B1%87%E7%BC%96.html</guid><description>&lt;!-- wp:audio {"id":181} -->
&lt;figure class="wp-block-audio">&lt;audio controls src="https://chujdk.github.io/usr/uploads/2020/10/10-November-Rain.m4a">&lt;/audio>&lt;figcaption>&lt;em>&lt;span class="has-inline-color has-luminous-vivid-amber-color">&lt;a href="https://music.163.com/#/song?id=18094919">November Rain&lt;/a>&lt;/span>&lt;/em>&lt;/figcaption>&lt;/figure>
&lt;!-- /wp:audio -->
&lt;!-- wp:paragraph -->
&lt;p>今天看了将近三章，效率还算不错&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:paragraph -->
&lt;p>第四章过的很快，没什么特别的。&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:heading {"level":3} -->
&lt;h3>编译链接的过程&lt;/h3>
&lt;!-- /wp:heading -->
&lt;!-- wp:paragraph -->
&lt;p>再强化一次，masm.exe:编译源代码，产生目标文件（.obj）,link.exe:链接目标文件，产生可执行文件(.exe)。&lt;/p></description></item><item><title>10.16汇编</title><link>https://chujdk.github.io/asm-learn/10-16%E6%B1%87%E7%BC%96.html</link><pubDate>Fri, 16 Oct 2020 23:35:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-16%E6%B1%87%E7%BC%96.html</guid><description>&lt;!-- wp:audio {"id":167} -->
&lt;figure class="wp-block-audio">&lt;audio controls src="https://chujdk.github.io/usr/uploads/2020/10/02-Some-Nights.m4a">&lt;/audio>&lt;figcaption>&lt;em>&lt;span class="has-inline-color has-luminous-vivid-amber-color">&lt;a href="https://music.163.com/#/song?id=17910219">some nights&lt;/a>&lt;/span>&lt;/em>&lt;/figcaption>&lt;/figure>
&lt;!-- /wp:audio -->
&lt;!-- wp:paragraph -->
&lt;p>今天的进度非常慢，到11点多才刚刚结束了第三章，总体不是很满意。&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:heading {"level":3} -->
&lt;h3>SS,SP和栈的故事&lt;/h3>
&lt;!-- /wp:heading -->
&lt;!-- wp:paragraph -->
&lt;p>SS是另一种段寄存器（至今为止碰到的第3种，之前的是CS（代码段寄存器）和DS（为[address]服务）），主要是为内存栈提供段地址，而SP则提供了偏移地址。内存栈以字为单位存储，同样是高地址存字的高位，因此每次SP改变的值都是2。&lt;/p></description></item><item><title>10.15汇编</title><link>https://chujdk.github.io/asm-learn/10-15-ass.html</link><pubDate>Thu, 15 Oct 2020 22:14:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-15-ass.html</guid><description>&lt;!-- wp:audio {"id":183} -->
&lt;figure class="wp-block-audio">&lt;audio controls src="https://chujdk.github.io/usr/uploads/2020/10/10-I-Remember-You-Remastered.m4a">&lt;/audio>&lt;figcaption>&lt;span class="has-inline-color has-luminous-vivid-amber-color">&lt;em>&lt;a href="https://music.163.com/#/song?id=4279879">i remember you&lt;/a>&lt;/em>&lt;/span>&lt;/figcaption>&lt;/figure>
&lt;!-- /wp:audio -->
&lt;!-- wp:paragraph -->
&lt;p>今天只学习了2.12-3.5，进度稍微有一点落后，希望周末可以补回来&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:heading {"level":3} -->
&lt;h3>内存中字的存储&lt;/h3>
&lt;!-- /wp:heading -->
&lt;!-- wp:paragraph -->
&lt;p>8086是16位的，显然一次可以处理16位的数据，虽然内存以字节为单位存储数据，但是仍然可以以字为单位存储，一个字为16位。存储字的内存单元被称为&lt;strong>字单元&lt;/strong>。特别需要注意的一点，&lt;strong>字单元中，高地址单元存储高位&lt;/strong>。&lt;/p></description></item><item><title>10.14-汇编</title><link>https://chujdk.github.io/asm-learn/10-14-ass.html</link><pubDate>Wed, 14 Oct 2020 22:07:37 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/10-14-ass.html</guid><description>&lt;!-- wp:audio {"id":176} -->
&lt;figure class="wp-block-audio">&lt;audio controls src="https://chujdk.github.io/usr/uploads/2020/10/04-High-Enough.m4a">&lt;/audio>&lt;figcaption>&lt;span class="has-inline-color has-luminous-vivid-amber-color">&lt;em>&lt;a href="https://music.163.com/#/song?id=2436434">high enough&lt;/a>&lt;/em>&lt;/span>&lt;/figcaption>&lt;/figure>
&lt;!-- /wp:audio -->
&lt;!-- wp:paragraph -->
&lt;p>今天主要看的是第一章和2.1-2.10，第一章是对硬件的一些介绍，总体上没什么可说的，第二章讲的是寄存器，比较值得记录的是物理地址=段地址*16+偏移地址和CS代码段寄存器，和IP指令指针寄存器。&lt;/p></description></item><item><title>汇编语言环境搭建</title><link>https://chujdk.github.io/asm-learn/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</link><pubDate>Tue, 13 Oct 2020 17:03:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/asm-learn/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p>今天花了很多钱买书，《汇编语言》《逆向工程核心原理》和《加密与解密》，花了这么多，不好好看的话，就很亏，所以写个博客防止自己走马观花，同时也记录一下学习过程的心情。&lt;/p></description></item></channel></rss>