<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DynELF工具的实践 on blog of chuj</title><link>https://chujdk.github.io/tags/dynelf%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%9E%E8%B7%B5.html</link><description>Recent content in DynELF工具的实践 on blog of chuj</description><generator>Hugo</generator><language>zh-cn</language><managingEditor>chujj31@gmail.com (chuj)</managingEditor><webMaster>chujj31@gmail.com (chuj)</webMaster><copyright>© chuj</copyright><lastBuildDate>Sat, 21 Nov 2020 08:34:00 +0000</lastBuildDate><atom:link href="https://chujdk.github.io/tags/dynelf%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%9E%E8%B7%B5/index.xml" rel="self" type="application/rss+xml"/><item><title>BUU-jarvisoj_level5-WP</title><link>https://chujdk.github.io/wp/buu-jarvisoj_level5-wp.html</link><pubDate>Sat, 21 Nov 2020 08:34:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-jarvisoj_level5-wp.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p>写这篇wp纯粹是证明一下我这两天有做题，这道题是ret2csu和DynELF的使用，而且也没什么特殊的地方，就直接上exp了。&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:image {"align":"center","id":557,"sizeSlug":"large"} -->
&lt;div class="wp-block-image">&lt;figure class="aligncenter size-large">&lt;img src="https://chujdk.github.io/usr/uploads/2020/11/QQ截图20201121082942.png" alt="" class="wp-image-557"/>&lt;/figure>&lt;/div>
&lt;!-- /wp:image -->
&lt;!-- wp:paragraph -->
&lt;p>不过还是有一点很奇怪，在连接服务器的时候，如果不把context的log_level的属性设为'debug'的话，就会在DynELF后的等待"Input:\n"的输入时卡住，收不到输入，而设置了就可以了。这个我不太理解，一直以为log_level只时输出记录而已。而且在本机上，也不需要设置。&lt;/p></description></item><item><title>XCTF-welpwn-WP</title><link>https://chujdk.github.io/wp/xctf-welpwn-wp.html</link><pubDate>Tue, 10 Nov 2020 11:35:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-welpwn-wp.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p>这道题非常的有意思。知识点很简单，就是无libc的ret2libc，最近已经做了两道了。不过这题有一点小限制，需要有一点特殊的处理。&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:image {"id":475,"sizeSlug":"large"} -->
&lt;figure class="wp-block-image size-large">&lt;img src="https://chujdk.github.io/usr/uploads/2020/11/屏幕截图-2020-11-10-112137-1024x751.png" alt="" class="wp-image-475"/>&lt;/figure>
&lt;!-- /wp:image -->
&lt;!-- wp:paragraph -->
&lt;p>我们直接来看payload，基本是&lt;a href="http://chujdk.github.io/2020/11/07/xctf-pwn-100-wp/">pwn-100&lt;/a>和&lt;a href="http://chujdk.github.io/2020/11/09/xctf-pwn-200-wp/">pwn-200&lt;/a>结合了一下，区别就是多了一句&lt;code>payload = 'a'*24 + p64(PopFourTimes)&lt;/code>，这样处理的原因是&lt;/p></description></item><item><title>XCTF-pwn-200-WP</title><link>https://chujdk.github.io/wp/xctf-pwn-200-wp.html</link><pubDate>Mon, 09 Nov 2020 14:48:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-pwn-200-wp.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p>这是一道很简单的题目，算是无libc的ret2libc，但是有很多我不理解的小细节还需要加强学习。&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:paragraph -->
&lt;p>先检查一下安全措施&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:image {"align":"center","id":468,"sizeSlug":"large"} -->
&lt;div class="wp-block-image">&lt;figure class="aligncenter size-large">&lt;img src="https://chujdk.github.io/usr/uploads/2020/11/屏幕截图-2020-11-09-143346.png" alt="" class="wp-image-468"/>&lt;/figure>&lt;/div>
&lt;!-- /wp:image -->
&lt;!-- wp:paragraph -->
&lt;p>发现没有开启canary，可以轻松的进行栈溢出。&lt;/p></description></item><item><title>XCTF-pwn-100-WP</title><link>https://chujdk.github.io/wp/xctf-pwn-100-wp.html</link><pubDate>Sat, 07 Nov 2020 21:57:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-pwn-100-wp.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p>这道题对我而言有两个新知识点，中级rop——&lt;a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/medium-rop-zh/">ret2csu&lt;/a>和DynELF工具的使用。同时这道题也做了我非常久，让我心态有点小崩。为啥会做这么久呢，还是因为我对plt，got和动态链接之类的知识认知太过于匮乏。所以从今天开始我放缓刷题，先看完《程序员的自我修养》一书。&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:paragraph -->
&lt;p>先来谈谈ret2csu，几乎所有的Linux C程序都会调用libc，这样的程序中总会有一个init函数，比如下面这个（不同的程序会不一样）&lt;/p></description></item></channel></rss>