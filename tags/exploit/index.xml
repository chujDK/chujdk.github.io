<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Exploit on blog of chuj</title><link>https://chujdk.github.io/tags/exploit.html</link><description>Recent content in Exploit on blog of chuj</description><generator>Hugo</generator><language>zh-cn</language><managingEditor>chujj31@gmail.com (chuj)</managingEditor><webMaster>chujj31@gmail.com (chuj)</webMaster><copyright>© chuj</copyright><lastBuildDate>Mon, 09 Jun 2025 10:03:43 +0800</lastBuildDate><atom:link href="https://chujdk.github.io/tags/exploit/index.xml" rel="self" type="application/rss+xml"/><item><title>fuse + {get,set}xattr 利用模板</title><link>https://chujdk.github.io/mess/fuse--getsetxattr-%E5%88%A9%E7%94%A8%E6%A8%A1%E6%9D%BF.html</link><pubDate>Mon, 09 Jun 2025 10:03:43 +0800</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/mess/fuse--getsetxattr-%E5%88%A9%E7%94%A8%E6%A8%A1%E6%9D%BF.html</guid><description>&lt;h2 id="起因">起因&lt;/h2>
&lt;p>最近由于一些原因，需要使用 fuse + getxattr 这个 gadget。关于这种方法，可以参考这两篇文章：&lt;a href="https://arttnba3.cn/2021/11/29/PWN-0X02-LINUX-KERNEL-PWN-PART-II/#setxattr-userfaultfd-FUSE-%E5%A0%86%E5%8D%A0%E4%BD%8D%E6%8A%80%E6%9C%AF">ref1&lt;/a>，&lt;a href="https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#FUSE-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">ref2&lt;/a>。&lt;/p>
&lt;p>&lt;a href="https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#FUSE-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">ref2&lt;/a> 里面有给出一个模板，但是遗憾的是此模板使用的是 libfuse 提供的类 VFS 接口。使用 libfuse 就需要我们能够把 libfuse 的库链接到 exp 中，许多时候这并非太大的难度，但是有些时候这样比较麻烦。&lt;/p></description></item><item><title>XCTF-Final-hole-wp</title><link>https://chujdk.github.io/wp/1664.html</link><pubDate>Fri, 31 Mar 2023 19:59:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1664.html</guid><description>&lt;p>这次的 XCTF Final 总长 12 小时，有三道 pwn 题，一道为 Haskell 写成的 lisp 解释器，一道与 Intel sgx 有关。不过我都没怎么看，而是一直在看 hole 这道 v8 题。v8 一直在高速发展，由于我许久没有接触过了，所以不了解新的利用套路——即在构造了 &lt;code>addressOf&lt;/code> 和 &lt;code>fakeObject&lt;/code> 这两个原语后怎么实现 RCE。最后很遗憾，虽然我实现了上述的两个原语，但是最后并没有做出这题。以下是正文，简述了如何实现 hole 对象的 leak 并且完成对上述原语的构造。&lt;del>之后的利用我从解出的大佬那里求来了 exp，等我学会就找时间更新&lt;/del>更新：现在我会了，在文章里面简述了一下。&lt;/p></description></item><item><title>CVE-2022-34918</title><link>https://chujdk.github.io/wp/1663.html</link><pubDate>Thu, 09 Mar 2023 00:15:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1663.html</guid><description>&lt;h2 id="netfilter-iptables-nftables">&lt;span class="section-num">1&lt;/span> netfilter/iptables/nftables&lt;/h2>
&lt;p>这里简述一下 netfilter 和 iptables 和 nftables 之间的关系，我对网络的了解甚少，所以在看代码的时候三者的关系给了我不少困扰。&lt;/p>
&lt;ul>
&lt;li>&lt;code>netfilter&lt;/code> 是内核中的软件框架，用于网络操作。它提供了许多与数据包过滤，网络地址转换（NAT, Network Address Translation）和端口转发相关的操作。&lt;/li>
&lt;li>&lt;code>nftables&lt;/code> 是内核中的一个子系统，提供了对数据包、帧、报的过滤和分类。旨在取代 &lt;code>netfilter&lt;/code> 的 &lt;code>iptables&lt;/code> 部分。他的用户态管理工具为 &lt;code>nft&lt;/code> 。&lt;/li>
&lt;li>&lt;code>iptables&lt;/code> 是一个用户态程序，可以让系统管理员来配置 ip 数据包的过滤规则。通过一个 &lt;code>netfilter&lt;/code> 模块实现。&lt;/li>
&lt;/ul>
&lt;p>如上可以看出， &lt;code>nft&lt;/code> 和 &lt;code>iptables&lt;/code> 是同类型工具，用于用户的配置。 &lt;code>nftables&lt;/code> 和 &lt;code>iptables&lt;/code> 的内核模块同类型，是 &lt;code>nft&lt;/code> 和 &lt;code>iptables&lt;/code> 这样的工具的“背后的引擎”。他们都是 &lt;code>netfilter&lt;/code> 的子系统。而 &lt;code>netfilter&lt;/code> 是一个内核的网络软件框架，提供了与网络操作相关的许多接口。&lt;/p></description></item><item><title>内核堆喷学习——CVE-2021-22555</title><link>https://chujdk.github.io/pwnreview/1659.html</link><pubDate>Tue, 21 Feb 2023 21:21:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1659.html</guid><description>&lt;h2 id="总结">&lt;span class="section-num">1&lt;/span> 总结&lt;/h2>
&lt;p>触发漏洞需要 &lt;code>CPA_NET_ADMIN&lt;/code> ，我们先 &lt;code>unshare&lt;/code> 出自己的名称空间，把权限给自己拉满&lt;/p>
&lt;p>漏洞出现在内核的 netfilter 子系统，是一个防火墙系统。用户层中，iptable 即使通过该子系统实现的。&lt;/p></description></item><item><title>CVE-2021-21220</title><link>https://chujdk.github.io/cve/1586.html</link><pubDate>Thu, 16 Dec 2021 14:31:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/cve/1586.html</guid><description>&lt;p>这是一个在今年的 pwn2own 的比赛上披露的漏洞，可以通过 v8 引擎实现任意代码执行，前天看到腾讯玄武实验室推送了 &lt;a href="https://www.zerodayinitiative.com/blog/2021/12/6/two-birds-with-one-stone-an-introduction-to-v8-and-jit-exploitation">two-birds-with-one-stone-an-introduction-to-v8-and-jit-exploitation&lt;/a> 这篇文章，介绍了这个漏洞的成因。漏洞本身是 jit 引擎在选择机器指令时，对 x86 平台下有符号拓展和无符号拓展指令的选择有误造成的，总体来说比较好理解，感觉比较适合作为 v8 jit 利用入门。参考这篇文章和谷歌归档的 &lt;a href="https://bugs.chromium.org/p/chromium/issues/attachmentText?aid=497472">exp&lt;/a>，我也完成了利用。这里记录一下。本人也只是刚刚开始摸索浏览器相关的利用，肯定有不对的地方，欢迎指出。&lt;/p></description></item></channel></rss>