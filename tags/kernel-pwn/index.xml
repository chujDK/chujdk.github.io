<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kernel-pwn on blog of chuj</title><link>https://chujdk.github.io/tags/kernel-pwn.html</link><description>Recent content in kernel-pwn on blog of chuj</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>chujj31@gmail.com (chuj)</managingEditor><webMaster>chujj31@gmail.com (chuj)</webMaster><lastBuildDate>Mon, 19 Jul 2021 20:57:00 +0000</lastBuildDate><atom:link href="https://chujdk.github.io/tags/kernel-pwn/index.xml" rel="self" type="application/rss+xml"/><item><title>Balsn_CTF_2019-KrazyNote-WP</title><link>https://chujdk.github.io/wp/1480.html</link><pubDate>Mon, 19 Jul 2021 20:57:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1480.html</guid><description>这道题的利用难度其实比较低，主要的难度在逆向上。说实话，乱七八糟的反编译代码是把我绕惨了。最近这段时间碰到了不少题目都是败在逆向上，我也意识</description></item><item><title>QWB2021-notebook-WP</title><link>https://chujdk.github.io/wp/1468.html</link><pubDate>Thu, 15 Jul 2021 23:16:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1468.html</guid><description>强网杯的时候我还一点都不会 kernel pwn，这道题看都没看。这两天尝试复现了一下，从前天下午一直弄到现在才搞出来，费了不少时间，也学到了一些东西，特</description></item><item><title>D^3CTF2019-knote-WP</title><link>https://chujdk.github.io/wp/1455.html</link><pubDate>Tue, 13 Jul 2021 17:50:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1455.html</guid><description>本博客的第 200 篇文章，[font color=&amp;quot;#FA8072&amp;quot;] cheer! [/font] 这道题是老学长 Aris 出的，借着这道题学习了一下用 userfaultfd 机制稳定条件竞争的方法。我确实还是比较菜，又是完全照着 ha1vk 师</description></item><item><title>WCTF2018-klist-WP</title><link>https://chujdk.github.io/wp/1446.html</link><pubDate>Mon, 12 Jul 2021 14:45:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1446.html</guid><description>本文参考自 ha1vk 师傅的linux kernel pwn学习之条件竞争(一) 借着这道题初步学习了一下 kernel 中条件竞争的利用。本题主要是通过条件竞争造成 UAF，然后通</description></item><item><title>*CTF2019-hackme-WP</title><link>https://chujdk.github.io/wp/1433.html</link><pubDate>Thu, 08 Jul 2021 16:08:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/wp/1433.html</guid><description>首先看一下启动参数 qemu-system-x86_64 \ -m 256M \ -nographic \ -kernel bzImage \ -append &amp;#39;console=ttyS0 loglevel=3 oops=panic panic=1 kaslr&amp;#39; \ -monitor /dev/null \ -initrd initramfs.cpio \ -smp cores=4,threads=2 \ -cpu qemu64,smep,smap 2&amp;gt;/dev/null 开启了 kaslr 和 smep，smap。 这道题是一个堆上溢出造成的 UAF，</description></item><item><title>Kernel PWN UAF 的利用和调试</title><link>https://chujdk.github.io/pwnreview/1408.html</link><pubDate>Sat, 19 Jun 2021 15:45:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1408.html</guid><description>进行调试，必然是 gdb attach 到 qemu 上了，在启动指令中加入 -S -gdb tcp::1234 即可启动一个调试口，在一个新的终端中打开 gdb，使用 targe remote :1234 即可 attach 上去。 光 attach 上去肯定不够，</description></item><item><title>Kernel PWN 环境搭建</title><link>https://chujdk.github.io/pwnreview/1318.html</link><pubDate>Thu, 17 Jun 2021 21:45:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1318.html</guid><description>一直对 kernel pwn 挺感兴趣的，再加上 libc 那里也没什么新东西可学了，简单题没什么做的意义，难题也不会做，所以准备开始学习 kernel pwn。不过可能最近也没办法太</description></item></channel></rss>