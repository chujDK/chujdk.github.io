<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Curious on blog of chuj</title><link>https://www.cjovi.icu/tags/curious.html</link><description>Recent content in Curious on blog of chuj</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>chujj31@gmail.com (chuj)</managingEditor><webMaster>chujj31@gmail.com (chuj)</webMaster><copyright>© chuj</copyright><lastBuildDate>Tue, 03 Aug 2021 09:58:00 +0000</lastBuildDate><atom:link href="https://www.cjovi.icu/tags/curious/index.xml" rel="self" type="application/rss+xml"/><item><title>glibc 2.34 malloc 的变化</title><link>https://www.cjovi.icu/pwnreview/1512.html</link><pubDate>Tue, 03 Aug 2021 09:58:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/pwnreview/1512.html</guid><description>昨天突然发现 glibc 2.34 发布了，虽然偶数版本似乎一般不会发布在稳定发行版中，但是还是挺好奇的，花了几分钟看了看，发现主要的变动是取消了几个 hook。</description></item><item><title>seccomp 中的 bpf</title><link>https://www.cjovi.icu/pwnreview/1495.html</link><pubDate>Sat, 24 Jul 2021 15:26:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/pwnreview/1495.html</guid><description>学习这个问题的原因是想做 pwnable.tw 的 seccomp-tool 一题，此题的 elf 可以读取、模拟、加载用户输入的 bpf 代码，其中加载使用的是 prctl 系统调用，功能号为 PR_GET_SECC</description></item><item><title>PWN ARM 环境配置</title><link>https://www.cjovi.icu/pwnreview/1353.html</link><pubDate>Tue, 25 May 2021 22:58:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/pwnreview/1353.html</guid><description>主要使用的调试方法为：qemu + gdb-multiarch，再交叉编译得到有符号的 libc。 qemu 安装 直接通过 apt 安装并不是一个很好的选择，因为版</description></item><item><title>ptmalloc 的简单分析</title><link>https://www.cjovi.icu/pwnreview/1300.html</link><pubDate>Sun, 23 May 2021 22:42:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/pwnreview/1300.html</guid><description>前言 断断续续写了一个多月，终于写完了。写本文的主要目的是获得一个对堆的理性认知，从知其然到知其所以然。主要分析了 __libc_malloc，</description></item><item><title>IDA switch 在跳表结构下的修复</title><link>https://www.cjovi.icu/mess/1345.html</link><pubDate>Sat, 22 May 2021 22:09:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/mess/1345.html</guid><description>今天协会打了一场内部 AWD，第一次参加这样的比赛，确实有不少手忙脚乱的地方，也有学到许多新知识。 PWN 总共有两题，其中一题虚拟机类题由于有较大的</description></item><item><title>pwn 白名单绕过总结</title><link>https://www.cjovi.icu/pwnreview/1294.html</link><pubDate>Thu, 22 Apr 2021 15:37:10 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/pwnreview/1294.html</guid><description>有些时候 pwn 题目中为了增加难度（实际是为了恶心选手），会使用类似 seccomp 的函数来禁用一部分系统调用，往往会把 execve 这种系统调用禁用掉，基本上拿 shell 是不可能</description></item><item><title>unsorted bin 利用的简单总结</title><link>https://www.cjovi.icu/pwnreview/1216.html</link><pubDate>Mon, 05 Apr 2021 22:10:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/pwnreview/1216.html</guid><description>学习堆利用也有一段时间了，基本上就是在和 fastbin 和 unsorted bin 打交道，最近这段时间 tcache 的题也做了一些。套路居多，想想还是应该总结一下。不会写的太详细，也可能</description></item><item><title>如何利用Unsorted Bin泄露Libc基地址</title><link>https://www.cjovi.icu/pwnreview/1089.html</link><pubDate>Tue, 16 Feb 2021 17:20:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/pwnreview/1089.html</guid><description>这其实是一个很简单很枯燥的问题，许多题中都会用到，但是我发现好像并没有文章以该方法为主角介绍该方法，也没有对其原理做出详细解释。估计是大佬们</description></item><item><title>关于/proc目录</title><link>https://www.cjovi.icu/pwnreview/1070.html</link><pubDate>Tue, 09 Feb 2021 15:29:41 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/pwnreview/1070.html</guid><description>/proc 这个目录很牛，充满了信息 /proc 应该说是 Linux 一切皆文件的设计哲学的体现，其中的文件和目录本身都是虚拟的一个文件系统，提供理一些内核信息。里面的有些</description></item><item><title>学习 pwn 的过程中的一点心得</title><link>https://www.cjovi.icu/pwnreview/%E6%88%91%E7%9A%84pwn%E5%BF%83%E5%BE%97.html</link><pubDate>Sat, 21 Nov 2020 22:01:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://www.cjovi.icu/pwnreview/%E6%88%91%E7%9A%84pwn%E5%BF%83%E5%BE%97.html</guid><description>值得注意的东西 与exp的动调 在 exp 中先指定 terminal，即添加一句 context.terminal = [&amp;#39;tmux&amp;#39;,&amp;#39;splitw&amp;#39;,&amp;#39;-h&amp;#39;] 然后在创建进程变量后，添加 gdb.attach(proc.pidof(sh)[0]) #这里的sh是进程变量 这样调试时先打开</description></item></channel></rss>