<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>_IO_FILE on blog of chuj</title><link>https://chujdk.github.io/tags/_io_file.html</link><description>Recent content in _IO_FILE on blog of chuj</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>chujj31@gmail.com (chuj)</managingEditor><webMaster>chujj31@gmail.com (chuj)</webMaster><lastBuildDate>Fri, 16 Apr 2021 21:22:00 +0000</lastBuildDate><atom:link href="https://chujdk.github.io/tags/_io_file/index.xml" rel="self" type="application/rss+xml"/><item><title>_IO_FILE 相关源码阅读（二）——vtable 及其指向的函数:__overflow</title><link>https://chujdk.github.io/pwnreview/1288.html</link><pubDate>Fri, 16 Apr 2021 21:22:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1288.html</guid><description>int _IO_new_file_overflow (FILE *f, int ch) { if (f-&amp;gt;_flags &amp;amp; _IO_NO_WRITES) /* SET ERROR */ { f-&amp;gt;_flags |= _IO_ERR_SEEN; __set_errno (EBADF); return EOF; } /* If currently reading or no buffer allocated. */ if ((f-&amp;gt;_flags &amp;amp; _IO_CURRENTLY_PUTTING) == 0 || f-&amp;gt;_IO_write_base == NULL) { /* Allocate a buffer if needed. */ if (f-&amp;gt;_IO_write_base == NULL) { _IO_doallocbuf (f); _IO_setg (f, f-&amp;gt;_IO_buf_base, f-&amp;gt;_IO_buf_base, f-&amp;gt;_IO_buf_base); } /* Otherwise must be currently reading.</description></item><item><title>leak 小 trick—— 对 _IO_2_1_stdout_ 的攻击</title><link>https://chujdk.github.io/pwnreview/1259.html</link><pubDate>Sat, 10 Apr 2021 20:01:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1259.html</guid><description>有一些堆利用菜单题，不提供输出的功能，这个时候即使弄出了一个带有 main_arena 的 chunk，想要直接 leak 也是比较困难的，有些情况下可以通过攻击 _IO_2_1_stdout_ 实现有效的</description></item><item><title>_IO_FILE 相关源码阅读（一）——vtable 及其指向的函数:从 __finish 说起</title><link>https://chujdk.github.io/pwnreview/1171.html</link><pubDate>Sat, 10 Apr 2021 19:02:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/1171.html</guid><description>__finish 虚函数主要处理的是对文件结构体的析构操作，同时会根据情况进行对文件进行 close 操作。通过本文的分析，应该可以基本理解 _IO_new_file_f</description></item><item><title>从源码看glibc中scanf的实现</title><link>https://chujdk.github.io/pwnreview/963.html</link><pubDate>Wed, 06 Jan 2021 15:45:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/pwnreview/963.html</guid><description>关于 这是可能会成为一个新的专栏，主要想学习一下glibc对IO这一方面的实现，顺便记录一下。有这个打算的主要原因是最近做题做的心态有些小崩，</description></item></channel></rss>