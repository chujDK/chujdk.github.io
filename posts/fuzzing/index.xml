<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>blog of chuj</title><link>https://chujdk.github.io/posts/fuzzing.html</link><description>Recent content on blog of chuj</description><generator>Hugo</generator><language>zh-cn</language><managingEditor>chujj31@gmail.com (chuj)</managingEditor><webMaster>chujj31@gmail.com (chuj)</webMaster><copyright>© chuj</copyright><lastBuildDate>Mon, 20 Dec 2021 13:56:00 +0000</lastBuildDate><atom:link href="https://chujdk.github.io/posts/fuzzing/index.xml" rel="self" type="application/rss+xml"/><item><title>BYTECTF2021-byteview</title><link>https://chujdk.github.io/fuzzing/1589.html</link><pubDate>Mon, 20 Dec 2021 13:56:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/fuzzing/1589.html</guid><description>&lt;h3 id="漏洞分析">漏洞分析&lt;/h3>
&lt;p>比赛的时候分析了很久这道题，结果也没做出来，现在想想主要 C++ 逆向不熟悉。&lt;/p>
&lt;p>在 new content 时，如果之前已经 new 过了，就会进 case1。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> &lt;span style="color:#40a070">1u&lt;/span>&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// new content
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> v17 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">*&lt;/span>(_QWORD &lt;span style="color:#666">*&lt;/span>)v5;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> ( &lt;span style="color:#666">*&lt;/span>(_QWORD &lt;span style="color:#666">*&lt;/span>)v5 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v21 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">*&lt;/span>(_QWORD &lt;span style="color:#666">*&lt;/span>)v5;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v7[&lt;span style="color:#40a070">6&lt;/span>].m128i_i64[&lt;span style="color:#40a070">0&lt;/span>] &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#007020;font-weight:bold">__int64&lt;/span>)menu &lt;span style="color:#666">^&lt;/span> v17 &lt;span style="color:#666">&amp;amp;&lt;/span> &lt;span style="color:#40a070">0xFFFFFFFF0000LL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v7[&lt;span style="color:#40a070">6&lt;/span>].m128i_i32[&lt;span style="color:#40a070">2&lt;/span>] &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">*&lt;/span>(_QWORD &lt;span style="color:#666">*&lt;/span>)(v17 &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">32&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v18 &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#007020;font-weight:bold">struct&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">uniq_ptr_task_req&lt;/span> &lt;span style="color:#666">*&lt;/span>)&lt;span style="color:#007020;font-weight:bold">operator&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span>(&lt;span style="color:#40a070">0x18uLL&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v18&lt;span style="color:#666">-&amp;gt;&lt;/span>choice &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// 另外一种 add 的情况
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> ref &lt;span style="color:#666">=&lt;/span> v18;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">*&lt;/span>(&lt;span style="color:#007020;font-weight:bold">__m128i&lt;/span> &lt;span style="color:#666">*&lt;/span>)&lt;span style="color:#666">&amp;amp;&lt;/span>v18&lt;span style="color:#666">-&amp;gt;&lt;/span>old_content &lt;span style="color:#666">=&lt;/span> _mm_unpacklo_epi64((&lt;span style="color:#007020;font-weight:bold">__m128i&lt;/span>)v21, (&lt;span style="color:#007020;font-weight:bold">__m128i&lt;/span>)(&lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#007020;font-weight:bold">__int64&lt;/span>)v7);&lt;span style="color:#60a0b0;font-style:italic">// old content
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里面有个 v18-&amp;gt;old_content，引用了上一个 content。&lt;/p></description></item><item><title>AFLgo 环境搭建与使用</title><link>https://chujdk.github.io/fuzzing/1556.html</link><pubDate>Wed, 06 Oct 2021 17:55:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/fuzzing/1556.html</guid><description>&lt;p>AFLgo 是一个很有意思的模糊器，但是环境的配置比较麻烦，我碰到了不少错误和问题，这里简单记录一下整个过程。&lt;a href="https://github.com/aflgo/aflgo">官方文档&lt;/a>&lt;/p>
&lt;p>我的环境：全新 Ubuntu 16.04 虚拟机。（不过使用更新的发行版可能会减少一些麻烦的版本问题，我也有点后悔使用这个版本，不过幸好碰到的问题都可以解决）&lt;/p></description></item><item><title>以库的形式使用 LibFuzzer——使用 LibFuzzer 对 lava-M 的测试</title><link>https://chujdk.github.io/fuzzing/1552.html</link><pubDate>Sat, 02 Oct 2021 14:17:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/fuzzing/1552.html</guid><description>&lt;p>半个多月没有更新博客了，主要还是因为逐渐不再以刷题来学习 pwn 了，少了很多可写的东西，再加上上个月特别的忙，先是军训，训完之后就连着上课，早八到晚八，弄的我心力憔悴，确实没学到什么东西，所以确实没什么可写的。&lt;/p></description></item><item><title>AFL学习记录（四）——使用 LAVA-M/BASE64 测试集进行表现测试</title><link>https://chujdk.github.io/fuzzing/1312.html</link><pubDate>Thu, 06 May 2021 16:42:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/fuzzing/1312.html</guid><description>&lt;p>这个测试本来我应该在一个月前完成，但是由于各种各样的原因拖到了现在哈哈哈。&lt;/p>
&lt;p>之前一直因为无法完成插桩编译，所以只能用 qemu 模式来整，这个模式就会慢很多了，我用了 6 个线程跑了两个多小时什么都没跑出来，遂放弃。今天灵光一闪，自己手动编译了一下，不知道为什么就完成了插桩编译。然后也发现了之前跑不出结果的原因——没加 &lt;code>-d&lt;/code> 参数（哈哈哈也是很呆了）。这里简单记录一下测试过程。&lt;/p></description></item><item><title>AFL学习记录（三）——qemu 模式的测试</title><link>https://chujdk.github.io/fuzzing/1201.html</link><pubDate>Thu, 18 Mar 2021 14:48:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/fuzzing/1201.html</guid><description>&lt;p>今天尝试了一下使用 AFL-qemu 的黑盒测试，这里简单记录一下。&lt;/p>
&lt;p>首先需要安装，在目录下的 &lt;code>qemu-mode&lt;/code> 文件夹中有构建脚本 &lt;code>build_qemu_support.sh&lt;/code>，运行之即可安装。期间可能会出现缺少依赖的情况，缺什么安装什么即可。如果缺乏 libtool，使用 &lt;code>sudo apt install libtool&lt;/code> 后仍然可能提示缺少，这是再执行 &lt;code>sudo apt install libtool-bin&lt;/code> 即可。&lt;/p></description></item><item><title>AFL学习记录（二）——一次简单的测试</title><link>https://chujdk.github.io/fuzzing/1140.html</link><pubDate>Thu, 04 Mar 2021 19:29:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/fuzzing/1140.html</guid><description>&lt;p>题目做不出来，先来写这篇记录。&lt;/p>
&lt;p>昨天把环境搭建好了，今天就拿来简单的进行一次测试。还是使用昨天的代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">#include&lt;/span> &lt;span style="color:#007020">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#007020"> 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">#include&lt;/span> &lt;span style="color:#007020">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#007020"> 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">#include&lt;/span> &lt;span style="color:#007020">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#007020"> 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">#include&lt;/span> &lt;span style="color:#007020">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#007020"> 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">#include&lt;/span> &lt;span style="color:#007020">&amp;lt;signal.h&amp;gt;&lt;/span>&lt;span style="color:#007020"> 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#902000">int&lt;/span> &lt;span style="color:#06287e">vuln&lt;/span>(&lt;span style="color:#902000">char&lt;/span> &lt;span style="color:#666">*&lt;/span>str)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> len &lt;span style="color:#666">=&lt;/span> strlen(str);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span>(str[&lt;span style="color:#40a070">0&lt;/span>] &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;A&amp;#39;&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> len &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">66&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> raise(SIGSEGV);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">//如果输入的字符串的首字符为A并且长度为66，则异常退出
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">else&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span>(str[&lt;span style="color:#40a070">0&lt;/span>] &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;F&amp;#39;&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> len &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">6&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> raise(SIGSEGV);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">//如果输入的字符串的首字符为F并且长度为6，则异常退出
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#4070a0">&amp;#34;it is good!&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#902000">int&lt;/span> &lt;span style="color:#06287e">main&lt;/span>(&lt;span style="color:#902000">int&lt;/span> argc, &lt;span style="color:#902000">char&lt;/span> &lt;span style="color:#666">*&lt;/span>argv[])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">char&lt;/span> buf[&lt;span style="color:#40a070">100&lt;/span>]&lt;span style="color:#666">=&lt;/span>{&lt;span style="color:#40a070">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gets(buf);&lt;span style="color:#60a0b0;font-style:italic">//存在栈溢出漏洞
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> printf(buf);&lt;span style="color:#60a0b0;font-style:italic">//存在格式化字符串漏洞
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> vuln(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个程序有栈溢出，格式化字符串漏洞，并且在输入两种特定格式的字符串时会异常退出，来试一下用 AFL 能不能找出这些漏洞。&lt;/p></description></item><item><title>AFL学习记录（一）——安装、运行</title><link>https://chujdk.github.io/fuzzing/1138.html</link><pubDate>Wed, 03 Mar 2021 22:47:00 +0000</pubDate><author>chujj31@gmail.com (chuj)</author><guid>https://chujdk.github.io/fuzzing/1138.html</guid><description>&lt;p>这是一个崭新的分类。学院为我们安排了科研导师，而我选择了研究安全方向的导师组，其实上个学期期中就选好了，但是由于各种原因当时没有直接开始学，到这个学期排课了才开始进行学习。&lt;/p></description></item></channel></rss>